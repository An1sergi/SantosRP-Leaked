
-----------------------------------------------------
if SERVER then   util.AddNetworkString("VC_SendToClient_Options")  util.AddNetworkString("VC_SendSettingsToServer")   function VC.SettingsChanged()  VC.Stream_SV_Settings()  end   local function CheckDefaults() local chng = false for k,v in pairs(VC.Settings_Defaults) do if VC.Settings[k] == nil then VC.Settings[k] = v chng = true end end if chng then VC.SettingsChanged() end end   function VC.ResetSettings() file.Write("vcmod/settings_sv.txt", util.TableToJSON(VC.Settings_Defaults)) VC.Settings = VC.Settings_Defaults VC.SettingsChanged() CheckDefaults() end   function VC.LoadSettings()  local Tbl = {}  if file.Exists("vcmod/settings_sv.txt", "DATA") then Tbl = util.JSONToTable(file.Read("vcmod/settings_sv.txt", "DATA")) else Tbl = VC.Settings_Defaults end  VC.Settings = table.Copy(Tbl) VC.SettingsChanged()  CheckDefaults()  end   function VC.SaveSetting(k,v)  if k and v != nil then  local Tbl = {}  if file.Exists("vcmod/settings_sv.txt", "DATA") then Tbl = util.JSONToTable(file.Read("vcmod/settings_sv.txt", "DATA")) else Tbl = VC.Settings_Defaults end  Tbl[k] = v VC.Settings = Tbl CheckDefaults() VC.SettingsChanged()  file.Write("vcmod/settings_sv.txt", util.TableToJSON(Tbl))  end  end     VC.LoadSettings() timer.Simple(10, VC.SettingsChanged)   function VC.GetSettings(ply) net.Start("VC_SendToClient_Options") net.WriteTable(VC.Settings) if ply then net.Send(ply) else net.Broadcast() end end   concommand.Add("VC_ResetSettings", function(ply, cmd, arg) if VC.CanEditAdminSettings(ply) then VC.ResetSettings() end end)  concommand.Add("VC_GetSettings_Sv", function(ply, cmd, arg) if VC.CanEditAdminSettings(ply) then VC.GetSettings(ply) end end)   net.Receive("VC_SendSettingsToServer", function(len, ply)  local Tbl = net.ReadTable()  if VC.CanEditAdminSettings(ply) then  VC.Settings = Tbl CheckDefaults() VC.SettingsChanged()  file.Write("vcmod/settings_sv.txt", util.TableToJSON(Tbl))  end  end) else   function VC.SettingsChanged()  if !VC.Material then return end  VC.HD_Texture = VC.Material.HD2 if VC.Settings.Light_Type == 2 then VC.HD_Texture = VC.Material.HD end  end   local function CheckDefaults() local chng = false for k,v in pairs(VC.Settings_Defaults) do if VC.Settings[k] == nil then VC.Settings[k] = v chng = true end end if chng then VC.SettingsChanged() end end   function VC.ResetSettings() file.Write("vcmod/settings_cl.txt", util.TableToJSON(VC.Settings_Defaults)) VC.Settings = VC.Settings_Defaults VC.SettingsChanged() CheckDefaults() end   function VC.LoadSettings()  local Tbl = {}  if file.Exists("vcmod/settings_cl.txt", "DATA") then Tbl = util.JSONToTable(file.Read("vcmod/settings_cl.txt", "DATA")) else Tbl = VC.Settings_Defaults end  VC.Settings = table.Copy(Tbl) VC.SettingsChanged()  CheckDefaults()  end   function VC.SaveSetting(k,v)  if k and v != nil then  local Tbl = {}  if file.Exists("vcmod/settings_cl.txt", "DATA") then Tbl = util.JSONToTable(file.Read("vcmod/settings_cl.txt", "DATA")) else Tbl = VC.Settings_Defaults end  Tbl[k] = v VC.Settings = Tbl CheckDefaults() VC.SettingsChanged()  file.Write("vcmod/settings_cl.txt", util.TableToJSON(Tbl))  end  end   VC.LoadSettings()   concommand.Add("VC_SaveSetting_Cl", function(ply, cmd, arg) if arg and arg[1] and arg[2] then VC.SaveSetting(arg[1], arg[2]) end end)     function VC.Controls_ReadScript() VC.Controls_List = util.KeyValuesToTable(file.Read("Data/vcmod/controls.txt", "GAME")) for k,v in pairs(VC.Controls_Main) do if !VC.Controls_List[v.cmd] then VC.Controls_List[v.cmd] = {key = v.default.key, hold = v.default.hold} end end end  function VC.Controls_CreateScript() local CntTbl = {} for _, Ctr in pairs(VC.Controls_Main) do if !Ctr.default.hold then Ctr.default.hold = "0" end CntTbl[Ctr.cmd] = Ctr.default end file.Write("vcmod/controls.txt", util.TableToKeyValues(CntTbl)) VC.Controls_ReadScript() end   if vcmod1 or vcmod1_els then if !file.Exists("vcmod/controls.txt", "DATA") then VC.Controls_CreateScript() else VC.Controls_ReadScript() end end   if !VC.LngData then VC.LngData = {} end   local function GetLanguages()  for k,v in pairs(file.Find("data/vcmod/data_lng/*", "GAME")) do local tbl = string.Explode("_", v) local rev = string.gsub(tbl[2], ".txt", "") rev = tonumber(rev) if !VC.LngData[tbl[1]] or VC.LngData[tbl[1]] < rev then VC.LngData[tbl[1]] = rev end end  for k,v in pairs(VC.LngData) do VC.Lng_T[k] = util.JSONToTable(file.Read("vcmod/data_lng/"..k.."_"..v..".txt", "DATA")) VC.Lng_T_Rev[k] = v end  print("VCMod: initialized clientside language data.")  VC.Lng_Get()  end   hook.Add("PostDrawTranslucentRenderables", "VC_PostDrawTranslucentRenderables_Updater", function()  net.Start("VC_RequestGlobalData") GetLanguages() net.WriteTable(VC.LngData) net.SendToServer()  hook.Remove("PostDrawTranslucentRenderables", "VC_PostDrawTranslucentRenderables_Updater")  end) end local rs7 = "vc.check_msg_work_ALS_k4" 