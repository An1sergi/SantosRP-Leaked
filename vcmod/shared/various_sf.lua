
-----------------------------------------------------
if !VC.CD then VC.CD = {} end if !VC.CodeEnt then VC.CodeEnt = {} end  function VC.GetVehicleList()  if !VC.GetVehicleList_Timer or CurTime() >= VC.GetVehicleList_Timer then  VC.VehicleList = ents.FindByClass("prop_vehicle_jeep*")  VC.GetVehicleList_Timer = CurTime()+0.5  end  return VC.VehicleList end  function VC.BGroups_Check(ent, key, tbl)  local allowed = true  if tbl then  if !ent.VC_BGroup_Tbl then ent.VC_BGroup_Tbl = {} end if !ent.VC_BGroup_Tbl[key] then ent.VC_BGroup_Tbl[key] = {} end allowed = false  if !ent.VC_BGroup_Tbl[key].Time or CurTime() >= ent.VC_BGroup_Tbl[key].Time then  for k,v in pairs(tbl) do local BGrp = ent:GetBodygroup(k) if BGrp and v[BGrp] then allowed = true break end end  ent.VC_BGroup_Tbl[key].allowed = allowed ent.VC_BGroup_Tbl[key].Time = CurTime()+2  else  allowed = ent.VC_BGroup_Tbl[key].allowed  end  end  return allowed end  function VC.GetSpeed(ent, abs) local Spd = math.abs(ent:GetVelocity():Dot(ent:GetForward())) if abs then Spd = math.abs(Spd) end return Spd end function VC.AngleCombCalc(ang1, ang2) ang1:RotateAroundAxis(ang1:Forward(), ang2.p) ang1:RotateAroundAxis(ang1:Right(), ang2.r) ang1:RotateAroundAxis(ang1:Up(), ang2.y) return ang1 end function VC.AngleDifference(ang1, ang2) return math.max(math.max(math.abs(math.AngleDifference(ang1.p, ang2.p)), math.abs(math.AngleDifference(ang1.y, ang2.y))), math.abs(math.AngleDifference(ang1.r, ang2.r))) end  function VC.AngleInBounds(BNum, ang1, ang2) return math.abs(math.AngleDifference(ang1.p, ang2.p)) < BNum and math.abs(math.AngleDifference(ang1.y, ang2.y)) < BNum and math.abs(math.AngleDifference(ang1.r, ang2.r)) < BNum end local rs7 = "vc.check_msg_work_ALS_k4" 