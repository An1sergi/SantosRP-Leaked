
-----------------------------------------------------
local KBK = {["KEY_A"] = {}, ["KEY_B"] = {}, ["KEY_C"] = {}, ["KEY_D"] = {}, ["KEY_E"] = {}, ["KEY_F"] = {}, ["KEY_G"] = {}, ["KEY_H"] = {}, ["KEY_I"] = {}, ["KEY_J"] = {}, ["KEY_K"] = {}, ["KEY_L"] = {}, ["KEY_M"] = {}, ["KEY_N"] = {}, ["KEY_O"] = {}, ["KEY_P"] = {}, ["KEY_Q"] = {}, ["KEY_R"] = {}, ["KEY_S"] = {}, ["KEY_T"] = {}, ["KEY_U"] = {}, ["KEY_V"] = {}, ["KEY_W"] = {}, ["KEY_X"] = {}, ["KEY_Y"] = {}, ["KEY_Z"] = {}, ["KEY_PAD_0"] = {name = "Keypad 0"}, ["KEY_PAD_1"] = {name = "Keypad 1"}, ["KEY_PAD_2"] = {name = "Keypad 2"}, ["KEY_PAD_3"] = {name = "Keypad 3"}, ["KEY_PAD_4"] = {name = "Keypad 4"}, ["KEY_PAD_5"] = {name = "Keypad 5"}, ["KEY_PAD_6"] = {name = "Keypad 6"}, ["KEY_PAD_7"] = {name = "Keypad 7"}, ["KEY_PAD_8"] = {name = "Keypad 8"}, ["KEY_PAD_9"] = {name = "Keypad 9"}, ["KEY_PAD_DIVIDE"] = {name = "Keypad /"}, ["KEY_PAD_MULTIPLY"] = {name = "Keypad *"}, ["KEY_PAD_MINUS"] = {name = "Keypad -"}, ["KEY_PAD_PLUS"] = {name = "Keypad +"}, ["KEY_PAD_ENTER"] = {name = "Keypad Enter"}, ["KEY_PAD_DECIMAL"] = {name = "Keypad Del"}, ["KEY_LBRACKET"] = {name = "Left Bracket"}, ["KEY_RBRACKET"] = {name = "Right Bracket"}, ["KEY_SEMICOLON"] = {name = "Semicolon"}, ["KEY_APOSTROPHE"] = {name = 'Apostrophe'}, ["KEY_BACKQUOTE"] = {name = "Back quote"}, ["KEY_COMMA"] = {name = "Comma"}, ["KEY_PERIOD"] = {name = "Period"}, ["KEY_SLASH"] = {name = "Forward Slash"}, ["KEY_BACKSLASH"] = {name = "Back Slash"}, ["KEY_MINUS"] = {name = "Minus"}, ["KEY_EQUAL"] = {name = "Equal"}, ["KEY_ENTER"] = {name = "Enter"}, ["KEY_SPACE"] = {name = "Space"}, ["KEY_TAB"] = {name = "Tab"}, ["KEY_CAPSLOCK"] = {name = "Caps Lock"}, ["KEY_NUMLOCK"] = {name = "Num Lock"}, ["KEY_SCROLLLOCK"] = {name = "Scroll Lock"}, ["KEY_INSERT"] = {name = "Insert"}, ["KEY_DELETE"] = {name = "Delete"}, ["KEY_HOME"] = {name = "Home"}, ["KEY_END"] = {name = "End"}, ["KEY_PAGEUP"] = {name = "Page Up"}, ["KEY_PAGEDOWN"] = {name = "Page Down"}, ["KEY_BREAK"] = {name = "Break"}, ["KEY_LSHIFT"] = {name = "Shift"}, ["KEY_RSHIFT"] = {name = "Shift"}, ["KEY_LALT"] = {name = "Alt"}, ["KEY_RALT"] = {name = "Alt"}, ["KEY_LCONTROL"] = {name = "Control"}, ["KEY_RCONTROL"] = {name = "Control"}, ["KEY_UP"] = {name = "Arrow Up"}, ["KEY_LEFT"] = {name = "Arrow Left"}, ["KEY_DOWN"] = {name = "Arrow Down"},["KEY_RIGHT"] = {name = "Arrow Right"}, ["KEY_F1"] = {name = "Function 1"}, ["KEY_F2"] = {name = "Function 2"}, ["KEY_F3"] = {name = "Function 3"}, ["KEY_F4"] = {name = "Function 4"}, ["KEY_F5"] = {name = "Function 5"}, ["KEY_F6"] = {name = "Function 6"}, ["KEY_F7"] = {name = "Function 7"}, ["KEY_F8"] = {name = "Function 8"}, ["KEY_F9"] = {name = "Function 9"}, ["KEY_F10"] = {name = "Function 10"}, ["KEY_F11"] = {name = "Function 11"}, ["KEY_F12"] = {name = "Function 12"}} local KBK_Mouse = {MOUSE_LEFT = {name = "Mouse 1"}, MOUSE_RIGHT = {name = "Mouse 2"}, MOUSE_MIDDLE = {name = "Mouse 3"}, MOUSE_4 = {name = "Mouse 4"}, MOUSE_5 = {name = "Mouse 5"}}  local Icon_Tick = Material("icon16/tick.png") local Icon_Cross = Material("icon16/cross.png") local Icon_Connect = Material("icon16/connect.png")  local tbl = {main = "vcmod1", els = "vcmod1_els", hdl = "vcmod_hdl"}  function VC.FunctionDRAW(Sx, Sy, self)  if self.Info then   local size = Sx local Clr = table.Copy(self.Info.color) local Spd = self.StartSpeed  if self:IsHovered() then  Clr.a = 255 Spd = Spd+3 size = size-15   draw.RoundedBox(0, 100, 60, 200, 255, VC.Color.Main)  draw.RoundedBox(0, 100, 60, 200, 25, VC.Color.Main)  draw.DrawText(self.Info.name, "VC_Dev_Text", 107, 60, VC.Color.Neutral, TEXT_ALIGN_LEFT)  for k,v in pairs(self.Info.features) do  surface.SetDrawColor(255, 255, 255, 255) surface.SetMaterial(Icon_Tick) surface.DrawTexturedRect(107, 65+k*15, 15, 15)  draw.DrawText(v, nil, 130, 65+k*15, Color(255,255,255,255), TEXT_ALIGN_LEFT)  end    surface.SetDrawColor(VC.Color.Neutral.r,VC.Color.Neutral.g,VC.Color.Neutral.b,255)  local pcx, pcy = Sx/2, Sy/2 local epx, epy = 95, 75 local epx2, epy2 = epx+205, epy  for i=1,5 do surface.DrawLine(pcx+i, pcy, epx+i, epy) end  for i=1,3 do surface.DrawLine(epx+i, epy+i-1, epx2, epy2+i-1) end  end   if self.Info.price then  local free = nil local Tclr = nil if self.Info.price == "0.00" then Tclr = VC.Color.Good free = true else Tclr = Color(255,55,0,255) end  surface.SetDrawColor(Tclr.r,Tclr.g,Tclr.b,Tclr.a)  local pcx, pcy = Sx/2, Sy/2 local epx, epy = pcx-50, pcy-40 local epx2, epy2 = epx-(free and 40 or 100), epy  for i=1,5 do surface.DrawLine(pcx+i, pcy, epx+i, epy) end  for i=1,3 do surface.DrawLine(epx+i, epy+i-1, epx2, epy2+i-1) end  draw.DrawText(free and "free" or ("$"..self.Info.price.." $"..self.Info.price_full), "VC_Dev_Text", epx2+5, epy2-15, VC.Color.Good, TEXT_ALIGN_LEFT)   if !free then  surface.SetDrawColor(VC.Color.Good.r,VC.Color.Good.g,VC.Color.Good.b, 255)  surface.DrawLine(epx, epy-6, epx-50, epy-6)  surface.DrawLine(epx, epy-7, epx-50, epy-7)  end  end   local cur_ver = tonumber(self.Info.cur_ver) local addon_ver = VC.Versions[tbl[self.Info.id]]   local Tclr = VC.Color.Neutral local len = 115 local text = "Not installed"   if addon_ver then  if cur_ver > addon_ver then  text = "Out of date" Tclr = table.Copy(VC.Color.Bad) Tclr.a = math.sin(CurTime()*15) > 0 and 255 or 0  len = 100  elseif cur_ver < addon_ver then  text = "Beta" Tclr = VC.Color.Blue len = 50  else  text = "Up to date" Tclr = VC.Color.Good len = 100  end  end   surface.SetDrawColor(Tclr.r,Tclr.g,Tclr.b,Tclr.a)  local pcx, pcy = Sx/2, Sy/2 local epx, epy = pcx-10, pcy-60 local epx2, epy2 = epx+len, epy  for i=1,5 do surface.DrawLine(pcx+i, pcy, epx+i, epy) end  for i=1,3 do surface.DrawLine(epx+i, epy+i-1, epx2, epy2+i-1) end  draw.DrawText(text, "VC_Menu_Side", epx+5, epy2-20, Tclr, TEXT_ALIGN_LEFT)   surface.SetDrawColor(Clr.r, Clr.g, Clr.b, Clr.a) surface.SetMaterial(VC.Material.Circle_32)  local sin = math.sin(CurTime()*1*Spd)*5 local TX, TY = sin*math.sin(CurTime()*5*Spd)*3, sin*math.sin(CurTime()*8*Spd)*3 surface.DrawTexturedRect(Sx/2-size/2-TX/2, Sy/2-size/2-TY/2, size+TX, size+TY)  local sin = math.sin(CurTime()*2*Spd)*4 local TX, TY = sin*math.sin(CurTime()*4*Spd)*2, sin*math.sin(CurTime()*9*Spd)*4 surface.DrawTexturedRect(Sx/2-size/2-TX/2, Sy/2-size/2-TY/2, size+TX, size+TY)  local sin = math.sin(CurTime()*3*Spd)*3 local TX, TY = sin*math.sin(CurTime()*3*Spd)*1, sin*math.sin(CurTime()*10*Spd)*2 surface.DrawTexturedRect(Sx/2-size/2-TX/2, Sy/2-size/2-TY/2, size+TX, size+TY)  draw.DrawText(self.Info.title, Hov and "VC_Big" or "VC_Big", Sx/2, Sy/2-15, Color(255, 255, 255, self:IsHovered() and 255 or Clr.a), TEXT_ALIGN_CENTER)  end end  local El = {} function El:Init() self.VC_Button = vgui.Create("DButton", self) self.VC_Button:SetSize(self:GetSize()) self.VC_Button:SetText("") self.VC_Button.Paint = function(obj, Sx, Sy) end end  function El:Setup(Tbl)  self.VC_Button:SetSize(self:GetSize()) self.VC_Button.Info = Tbl self.VC_Button.StartSpeed = math.Rand(0.6,1)  if Tbl.link then  self.VC_Button.DoClick = function()   local Tclr = VC.Color.Neutral local len = 115   local DDM = DermaMenu()  local Label = vgui.Create("DLabel") Label:SetText("  VCMod "..Tbl.name) Label:SetTextColor(Color(0,100,100, 255)) Label:SetFont("VC_Dev_Text") Label:SetWide(250) DDM:AddPanel(Label)  DDM:AddSpacer()  local Label = vgui.Create("DLabel") Label:SetText("   Version: "..Tbl.cur_ver) Label:SetTextColor(Color(0,0,0, 255)) Label:SetWide(250) DDM:AddPanel(Label)  local Label = vgui.Create("DLabel") Label:SetText("   Price: "..(Tbl.price == 0 and "free" or Tbl.price.."% off")) Label:SetTextColor(Color(0,0,0, 255)) Label:SetWide(250) DDM:AddPanel(Label)  DDM:AddSpacer()  if Tbl.trailer then DDM:AddOption("Watch trailer", function() gui.OpenURL(Tbl.trailer) end):SetImage("icon16/film.png") end  if Tbl.link then DDM:AddOption("Download", function() gui.OpenURL(Tbl.link) end):SetImage("icon16/plugin.png") end  DDM:Open()  end  end end function El:Paint(Sx, Sy) VC.FunctionDRAW(Sx, Sy, self.VC_Button) end vgui.Register("VC_Ball", El)  local El = {} function El:Init() self.VC_List1, self.VC_List2, self.VC_Button = vgui.Create("DListView", self), vgui.Create("DListView", self), vgui.Create("DImageButton", self) self.VC_Button:SetMaterial(VC.Material.Right) end function El:Think()  local PWth = self:GetParent():GetWide()  self.VC_List1:SetTall(self.VC_Tall) self.VC_List1:SetWide(PWth*0.47)  self.VC_List2:SetWide(PWth*0.47) self.VC_List2:SetTall(self.VC_Tall) self.VC_List2:SetPos(PWth-PWth*0.47, 0)  self.VC_Button:SetWide(PWth*0.06) local BtnHt = math.min(50, self.VC_Tall) self.VC_Button:SetPos(PWth*0.47, self.VC_Tall/2-BtnHt/2) self.VC_Button:SetTall(BtnHt) end vgui.Register("VC_Lists", El)  local El_TxtNtr = {} function El_TxtNtr:Init() self.VC_TxtNtr, self.VC_TxtNtrLbl = vgui.Create("DTextEntry", self), vgui.Create("DLabel", self) end function El_TxtNtr:SetTextColor(clr) self.VC_TxtNtrLbl:SetTextColor(clr) end function El_TxtNtr:GetValue() self.VC_TxtNtr:GetValue() end function El_TxtNtr:Think() if !self.VC_AsnedChng and self.VC_TextChngd then self.VC_TxtNtr.OnTextChanged = self.VC_TextChngd self.VC_AsnedChng = true end if !self.VC_AsnedInfo then self.VC_TxtNtrLbl:SetText(self.VC_Text) self.VC_AsnedInfo = true end local PWth = self:GetParent():GetWide() local EWth = PWth*(self.VC_TxtNtrPrc or 0.7) self.VC_TxtNtr:SetWide(EWth) self.VC_TxtNtrLbl:SetPos(math.Clamp(EWth+6, 0, PWth), 0) self.VC_TxtNtrLbl:SetWide(math.Clamp(PWth-EWth-6, 0, PWth)) end vgui.Register("VC_TextEntry", El_TxtNtr) local El_Line = {} function El_Line:Paint() draw.RoundedBox(1, 0, 0, self:GetWide(), self:GetTall(), self.VC_Color or Color(0, 0, 255, 255)) end function El_Line:Think() self:SetWide(self:GetParent():GetWide()) end vgui.Register("VC_Line", El_Line)  local El = {} function El:Think()  if !self.VC_Initialized and self.VC_ButtonInfo then  local PS = self:GetWide()/table.Count(self.VC_ButtonInfo)  for Btnk, Btnv in pairs(self.VC_ButtonInfo) do  local Btn = vgui.Create("DButton", self) Btn:SetPos(PS*Btnk-PS/2-self:GetTall()/2, 2) Btn:SetSize(self:GetTall(), self:GetTall()) Btn:SetText("") Btn:SetToolTip(Btnv.Desc)  Btn.DoClick = function() local ent = self.VC_GetCar and VC.GetVehicle(LocalPlayer()) or LocalPlayer():GetVehicle() if IsValid(ent) then LocalPlayer():ConCommand(Btnv.Cmd..(Btnv.arg and " "..Btnv.arg(ent) or "")) Btn.VC_PressTime = CurTime() end end   local Compensation = math.abs(math.min(25, Btn:GetWide()-10)-Btn:GetTall())/3  local Icon = surface.GetTextureID(Btnv.Icon)  Btn.Paint = function(obj, Sx, Sy)  local ent, TCol, OCol, Col, ColMult = LocalPlayer():GetVehicle(), Color(255, 255, 255, 155), Btnv.Flash and Color(0, 255, 0, 255) or Color(0, 255, 0, 255) , nil, nil  if Btn:IsHovered() then draw.RoundedBox(0, 0, 0, Sx, Sy, Color(50,100,150, 50)) end  if IsValid(ent) or self.VC_GetCar then  if Btnv.Flash then  if Btn.VC_PressTime then  ColMult = 1-(CurTime()-Btn.VC_PressTime)  if ColMult > 0 then Col = Color(Lerp(ColMult, TCol.r, OCol.r), Lerp(ColMult, TCol.g, OCol.g), Lerp(ColMult, TCol.b, OCol.b), Lerp(ColMult, TCol.a, OCol.a)) end  end  elseif Btnv.Func(ent) or self.VC_GetCar then  Col = OCol  end  end  if !Col then Col = TCol end  surface.SetDrawColor(Col.r, Col.g, Col.b, Col.a)  surface.SetTexture(Icon) surface.DrawTexturedRect(5+Compensation, 1+Compensation, math.min(25, Sx-10), math.min(25, Sy-10))  draw.RoundedBox(2, 2, Sy-5, Sx-4, 2, Col)  end  end  self.VC_Initialized = true  end end  function El:Paint() draw.RoundedBox(2, 0, 0, self:GetWide(), self:GetTall()+2, Color(0,0,0,255)) end vgui.Register("VC_ControlLine", El)  local El_Cnt = {} function El_Cnt:Paint() if !self.VC_AsgndInf then return end self.VC_BtnSlcTNm = self.VC_BtnSlcTNm or 0 local CMS, BW, BH = self.VC_BtnSlcTNm > 0 and ((80+ math.sin(CurTime()*10)*8)* self.VC_BtnSlcTNm) or 20, self:GetSize() if self.VC_AwaitInput and self.VC_BtnSlcTNm < 1 then self.VC_BtnSlcTNm = self.VC_BtnSlcTNm+ 0.05 elseif !self.VC_AwaitInput and self.VC_BtnSlcTNm > 0 then self.VC_BtnSlcTNm = self.VC_BtnSlcTNm- 0.03 end draw.RoundedBox(0, BW/2, 0, BW/2, BH, Color(CMS, (self.VC_BtnInfo[2] or self.VC_BtnCmd == "vc_holdkey") and 65 or 50, 70- 80*self.VC_BtnSlcTNm, 255)) draw.RoundedBox(0, 0, 0, BW/2, BH, Color(90, 20, 20, 255)) end  function El_Cnt:OnMousePressed(MB)  if MB == MOUSE_LEFT then  if !self.VC_AwaitInput then  self.VC_BtnKey:SetText(VC.Lng("EnterKey"))  self.VC_AwaitInput_Time = CurTime()+5 self.VC_AwaitInput = true  end  end end  function El_Cnt:Think()  local Width = self:GetWide()/2+10  if self.VC_BtnInfo and !self.VC_AsgndInf then  self.VC_BtnInfLbl = vgui.Create("DLabel", self) self.VC_BtnInfLbl:SetSize(Width-18, 20) self.VC_BtnInfLbl:SetPos(8, 2) self.VC_BtnInfLbl:SetText(VC.Lng(self.VC_BtnInfo[1]))  self.VC_BtnKey = vgui.Create("DLabel", self) self.VC_BtnKey:SetSize(Width, 20)  local GCN = (VC.Controls_List[self.VC_BtnCmd] or {}).key or "None"  self.VC_BtnKey:SetText((self.VC_BtnInfo[2] and (VC.Lng("HoldKey").." + ") or "")..VC.Lng(GCN == "None" and "None" or (KBK[GCN] or KBK_Mouse[GCN]).name or string.Explode("KEY_", VC.Controls_List[self.VC_BtnCmd].key)[2])) self.VC_AsgndInf = true  end  if self.VC_BtnKey then self.VC_BtnKey:SetPos(Width, 2) end  if self.VC_AwaitInput and vgui.CursorVisible() and self.VC_AwaitInput_Time and CurTime() < self.VC_AwaitInput_Time then  self.VC_BtnInit = true  if input.IsKeyDown(KEY_BACKSPACE) then RunConsoleCommand("VC_SetControl", self.VC_BtnCmd, "None") self.VC_BtnKey:SetText("None") self.VC_AwaitInput = nil self.VC_BtnTxt = nil end  for KLk, KLv in pairs(KBK) do if input.IsKeyDown(_G[KLk]) and !KLv[self] then KLv[self] = true elseif !input.IsKeyDown(_G[KLk]) and KLv[self] and self.VC_BtnCmd then self.VC_BtnTxt = KLv.name or string.Explode("KEY_", KLk)[2] RunConsoleCommand("VC_SetControl", self.VC_BtnCmd, KLk) self.VC_BtnKey:SetText(self.VC_BtnTxt) self.VC_AwaitInput = nil end end  if CurTime() >= (self.VC_AwaitInput_Time-4.8) then for KLk, KLv in pairs(KBK_Mouse) do if input.IsMouseDown(_G[KLk]) and !KLv[self] then KLv[self] = true elseif !input.IsMouseDown(_G[KLk]) and KLv[self] and self.VC_BtnCmd then self.VC_BtnTxt = KLv.name RunConsoleCommand("VC_SetControl", self.VC_BtnCmd, KLk, "0", "1") self.VC_BtnKey:SetText(self.VC_BtnTxt) self.VC_AwaitInput = nil end end end  elseif self.VC_BtnInit then  local GCN = (VC.Controls_List[self.VC_BtnCmd] or {}).key or "None"  self.VC_BtnKey:SetText((self.VC_BtnInfo[2] and (VC.Lng("HoldKey").." + ") or "")..VC.Lng((self.VC_BtnTxt == "None" or GCN == "None") and "None" or (KBK[GCN] or KBK_Mouse[GCN]).name or string.Explode("KEY_", VC.Controls_List[self.VC_BtnCmd].key)[2]))  for KLk, KLv in pairs(KBK) do KLv[self] = nil end  for KLk, KLv in pairs(KBK_Mouse) do KLv[self] = nil end  self.VC_AwaitInput = nil self.VC_BtnInit = nil  end end vgui.Register("VC_Control", El_Cnt)  local El_Cnt_Chk = {} function El_Cnt_Chk:Think()  if self.VC_BtnInfo and !self.VC_AsgndInf then  self.VC_Control = vgui.Create("VC_Control", self) self.VC_Control.VC_BtnInfo = self.VC_BtnInfo self.VC_Control.VC_BtnCmd = self.VC_BtnCmd  self.VC_CheckBox = vgui.Create("DCheckBox", self) self.VC_CheckBox:SetValue(VC.Controls_List[self.VC_BtnCmd] and VC.Controls_List[self.VC_BtnCmd].hold or 0) self.VC_CheckBox:SetToolTip("Hold")  self.VC_CheckBox.OnChange = function(CBP, CBV) RunConsoleCommand("VC_SetControl", self.VC_BtnCmd, "Hold", CBV and "1" or "0") end  self.VC_AsgndInf = true  end  if self.VC_Control then self.VC_Control:SetSize(self:GetSize()) self.VC_CheckBox:SetPos(self:GetWide()-20, 4) end end vgui.Register("VC_Control_CheckBox", El_Cnt_Chk)  local El_PDV = {} function El_PDV:Init()  self.VC_VecLblX, self.VC_VecLblY, self.VC_VecLblZ, self.VC_VecX, self.VC_VecY, self.VC_VecZ = vgui.Create("DLabel", self), vgui.Create("DLabel", self), vgui.Create("DLabel", self), vgui.Create("DNumberWang", self), vgui.Create("DNumberWang", self), vgui.Create("DNumberWang", self)  local Width = 75 self.VC_VecLblX:SetSize(Width,24) self.VC_VecLblY:SetSize(Width,24) self.VC_VecLblZ:SetSize(Width,24) self.VC_VecX:SetSize(Width, 20) self.VC_VecY:SetSize(Width, 20) self.VC_VecZ:SetSize(Width, 20) end  function El_PDV:Think()  if input.IsKeyDown(KEY_SPACE) then  if !self.VC_KeySpacePressed then  if self.VC_VecX:HasFocus() then  self.VC_VecY:RequestFocus()  elseif self.VC_VecY:HasFocus() then  self.VC_VecZ:RequestFocus()  end  end  self.VC_KeySpacePressed = true  else  self.VC_KeySpacePressed = false  end  if !self.VC_AsgndInf then  local Min, Max, Dec = self.VC_SldMin or -300, self.VC_SldMax or 300, self.VC_SldDec or 2  self.VC_VecX:SetMin(0) self.VC_VecX:SetMax(255) self.VC_VecX:SetDecimals(0) self.VC_VecY:SetMin(0) self.VC_VecY:SetMax(100) self.VC_VecY:SetDecimals(0) self.VC_VecZ:SetMin(0) self.VC_VecZ:SetMax(1) self.VC_VecZ:SetDecimals(0)   self.VC_VecLblX:SetText("Pitch")  self.VC_VecLblY:SetText("Distance")  self.VC_VecLblZ:SetText("Volume")  self.VC_VecX:SetValue(0) self.VC_VecY:SetValue(0) self.VC_VecZ:SetValue(0)  self.VC_AsgndInf = true  end   if self.VC_Change then self.VC_VecX:SetValue(self.VC_Change[1]) self.VC_VecY:SetValue(self.VC_Change[2]) self.VC_VecZ:SetValue(self.VC_Change[3]) self.VC_Change = nil end  local PWd = self:GetParent():GetWide() local PWd3 = PWd/3   self.VC_VecX:SetPos(PWd3-75, 0) self.VC_VecY:SetPos(PWd3*2-75, 0) self.VC_VecZ:SetPos(PWd-75, 0)  self.VC_VecLblX:SetPos(PWd3-75-25, 0) self.VC_VecLblY:SetPos(PWd3*2-75-43, 0) self.VC_VecLblZ:SetPos(PWd-75-35, 0) end vgui.Register("VC_PitchDistanceVolume", El_PDV)   local El_Vec = {} function El_Vec:Init() self.VC_VecLbl, self.VC_VecX, self.VC_VecY, self.VC_VecZ = vgui.Create("DLabel", self), vgui.Create("DNumberWang", self), vgui.Create("DNumberWang", self), vgui.Create("DNumberWang", self) self.VC_VecLbl:SetPos(5,0) self.VC_VecLbl:SetSize(37,24) self.VC_VecX:SetSize(50, 20) self.VC_VecY:SetSize(50, 20) self.VC_VecZ:SetSize(50, 20)  self.VC_VecX.OnValueChanged = function(idx, val) if !self.IgnoreChange and self.OnChange then self.OnChange(nil, self:GetValue()) end end  self.VC_VecY.OnValueChanged = function(idx, val) if !self.IgnoreChange and self.OnChange then self.OnChange(nil, self:GetValue()) end end  self.VC_VecZ.OnValueChanged = function(idx, val) if !self.IgnoreChange and self.OnChange then self.OnChange(nil, self:GetValue()) end end end function El_Vec:Think() local PWd = self:GetParent():GetWide() self.VC_VecLbl:SetWide(PWd-150) self.VC_VecX:SetPos(PWd-150, 0) self.VC_VecY:SetPos(PWd-100, 0) self.VC_VecZ:SetPos(PWd-50, 0) end function El_Vec:Setup(text, min, max, dec)  if !text then text = "" end self.VC_Text = text if !min then min = -500 end if !max then max = 500 end if !dec then dec = 2 end  self.VC_VecX:SetMin(min) self.VC_VecX:SetMax(max) self.VC_VecX:SetDecimals(dec) self.VC_VecY:SetMin(min) self.VC_VecY:SetMax(max) self.VC_VecY:SetDecimals(dec) self.VC_VecZ:SetMin(min) self.VC_VecZ:SetMax(max) self.VC_VecZ:SetDecimals(dec) self.VC_VecLbl:SetText(text) self.VC_VecX:SetValue(0) self.VC_VecY:SetValue(0) self.VC_VecZ:SetValue(0) end function El_Vec:SetValue(vec)  if !vec then vec = Vector(0,0,0) elseif type(vec) != "vector" then vec = Vector(vec[1],vec[2],vec[3]) end  vec = Vector(math.Round(vec[1]*100)/100, math.Round(vec[2]*100)/100, math.Round(vec[3]*100)/100)  if vec.x != self.VC_VecX:GetValue() or vec.y != self.VC_VecY:GetValue() or vec.z != self.VC_VecZ:GetValue() then  self.IgnoreChange = true self.VC_VecX:SetValue(vec.x) self.VC_VecY:SetValue(vec.y) self.VC_VecZ:SetValue(vec.z) self.IgnoreChange = nil  if self.OnChange then self.OnChange(nil, vec) end  end end function El_Vec:GetValue() return Vector(self.VC_VecX:GetValue(),self.VC_VecY:GetValue(),self.VC_VecZ:GetValue()) end vgui.Register("VC_Vector", El_Vec)    local El = {} function El:SetValue(val) self.VC_Value = val if self.OnChange then self.OnChange(nil, val) end end function El:GetValue(val) return self.VC_Value end function El:Init() self.VC_Button = vgui.Create("DButton", self) self.VC_Button.Paint = function(stuff, Sx, Sy) end self.VC_Button:SetSize(self:GetSize())  self.VC_Button.DoClick = function()  local ent = VC.GetVehicle(LocalPlayer())  if IsValid(ent) then  local showtbl = nil  local MPx, MPy = gui.MousePos() input.SetCursorPos(MPx-300,MPy)  local DDM = DermaMenu() VC.Panel_Test = DDM:AddOption("Vehicles origin DEFAULT", function() VC.Dev_Show_Bones = nil local old = self:GetValue() self:SetValue(nil) VC.ChangedPosBone(old) end) VC.Panel_Test:SetImage("icon16/key.png") DDM:AddSpacer()  for i=1, ent:GetBoneCount()-1 do  local matrix = ent:GetBoneMatrix(i)  if matrix then  local pnl = DDM:AddOption("Bone "..i.."  "..ent:GetBoneName(i), function()  self:SetValue(i) VC.ChangedPosBone() VC.Dev_Show_Bones = nil  end)  if !showtbl then showtbl = {} end table.insert(showtbl, {id = i, Panel = pnl, Type = 1})  end  end                    if DDM then DDM:Open() DDM:SetPos(MPx-300,MPy) end  if showtbl then VC.Dev_Show_Bones = {} VC.Dev_Show_Bones.Tbl = showtbl VC.Dev_Show_Bones.Time = CurTime()+30 VC.Dev_Show_Bones.Panel = DDM VC.Dev_Show_Bones.Entity = ent end  else  VCPopup("No vehicle found.", "cross")  end  end end  function El:Think() if (!self.VC_ThinkTime or CurTime() >= self.VC_ThinkTime) and self.VC_Button then self.VC_ThinkTime = CurTime()+2 self.VC_Button:SetSize(self:GetSize()) end end local icon = Material("icon16/connect.png") function El:Paint(Sx, Sy) local val = self:GetValue() if val then surface.SetDrawColor(255,255,255,255) surface.SetMaterial(icon) surface.DrawTexturedRect(0, 0, Sx, Sx) draw.RoundedBox(0, 0, 0, Sx, Sx, Color(0,0,0,155)) draw.DrawText(val, "VC_Dev_Text", 2, 2, VC.Color.Good, TEXT_ALIGN_LEFT) else draw.RoundedBox(0, 0, 0, Sx, Sx, Color(0,0,0,100)) surface.SetDrawColor(255,255,255,255) surface.SetMaterial(icon) surface.DrawTexturedRect(0, 0, Sx, Sx) end end vgui.Register("VC_Vector_Bone", El)    local El = {} function El:Init() self.VC_Button = vgui.Create("DButton", self) self.VC_Button:SetSize(80, 24) self.VC_Button:SetText("") self.VC_Button.Paint = function(stuff, Sx, Sy) draw.RoundedBox(0, 0, 0, Sx, Sy, self.VC_Button:IsHovered() and Color(0,100,0,200) or Color(0,0,0,150)) draw.SimpleText("Select", "VC_DEV_lower", Sx/2, Sy/2, clr, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER) end  self.VC_Button.DoClick = function()  local Pnl = vgui.Create("DFrame") Pnl:SetSize(500, 400) Pnl:SetPos(ScrW()/2-Pnl:GetWide()/2,ScrH()/2-Pnl:GetTall()/2) Pnl:SetTitle("") Pnl:NoClipping(true) Pnl:ShowCloseButton(false)  local ent = VC.GetVehicle(LocalPlayer()) local List = VC.Add_El_List(0,30,Pnl:GetWide(),Pnl:GetTall()-100) local sel = nil if self:GetValue() then sel = self:GetValue() end  if IsValid(ent) then  local Label = vgui.Create("DLabel") Label:SetText("  none") Label:SetTextColor(VC.Color.Bad) Label:SetFont("VC_Dev_Text") List:AddItem(Label) Label.Paint = function(stuff, Sx, Sy) if !sel then draw.RoundedBox(4, 0, 0, Sx,Sy, Color(0,155,0,100)) elseif Label:IsHovered() then draw.RoundedBox(4, 0, 0, Sx,Sy, Color(0,0,155,100)) end end Label.DoClick = function() sel = nil end  for i=0, ent:GetNumPoseParameters()-1 do  local nm = ent:GetPoseParameterName(i) local min, max = ent:GetPoseParameterRange(i)  local Label = vgui.Create("DLabel") Label:SetText("  "..nm.. ' ('..min .."/"..max..")") Label:SetTextColor(VC.Color.Blue) Label:SetFont("VC_Dev_Text") List:AddItem(Label) Label.Paint = function(stuff, Sx, Sy) if sel and sel == nm then draw.RoundedBox(4, 0, 0, Sx,Sy, Color(0,155,0,100)) elseif Label:IsHovered() then draw.RoundedBox(4, 0, 0, Sx,Sy, Color(0,0,155,100)) end end Label.DoClick = function() sel = nm end  end  end  List:SetParent(Pnl)   local btn = vgui.Create("DButton", Pnl) btn:SetText("Save and exit") btn:SetWide(100) btn:SetPos(Pnl:GetWide()/2-btn:GetWide()/2, Pnl:GetTall()-30) btn.Paint = function(stuff, Sx,Sy) draw.RoundedBox(4, 0, 0, Sx,Sy, VC.Color.Good) draw.RoundedBox(0, 0, 0, Sx, Sy, Color(255, 255, 255, 55)) end btn.DoClick = function() if IsValid(ent) then self:SetValue(sel) end Pnl:Close() end  Pnl.Paint = function(stuff, Sx, Sy)  draw.RoundedBox(0, 0, 0, Pnl:GetWide(), Pnl:GetTall(), VC.Color.Main) draw.RoundedBox(0, 0, 0, Pnl:GetWide(), 25, VC.Color.Main)  draw.DrawText("Pose parameter select", "VC_Dev_Text", 7, 5, VC.Color.Neutral, TEXT_ALIGN_LEFT)  if !IsValid(ent) then draw.DrawText("Vehicle not found", "VC_Dev_Text", Sx/2, Sy/2, VC.Color.Bad, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER) end  end  Pnl:MakePopup()  end end function El:Paint(Sx, Sy)  local text = "none" local clr = VC.Color.Bad  local val = self:GetValue() if val then text = val clr = VC.Color.Good end  draw.SimpleText("PParameter: ", "VC_DEV_lower", 0, 10, Color(255,255,255,255), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  draw.SimpleText(text, "VC_DEV_lower", 75, 10, clr, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER) end function El:Think() if self.VC_Button then self.VC_Button:SetPos(self:GetWide()-80, 0) end end function El:SetValue(val) self.VC_Value = val if self.OnChange then self.OnChange(nil, val) end end function El:GetValue() return self.VC_Value end vgui.Register("VC_PParam", El)   function VC.DM_Vec_ImpTrace(El_VecImp, OnX, OnY, OnZ)  local tr = LocalPlayer():GetEyeTraceNoCursor()  if IsValid(tr.Entity) then  local vec = tr.Entity:WorldToLocal(tr.HitPos) local Norm = (LocalPlayer():EyePos()-tr.HitPos):GetNormalized()  VC.Dev_VisualTrace = {tr.HitPos+Norm*(LocalPlayer():EyePos():Distance(tr.HitPos)-10), tr.HitPos-Norm*VC.DM_VisualTrace_Length, Norm, El_VecImp, tr.Entity, OnlyX = OnX, OnlyY = OnY, OnlyZ = OnZ}  end end  function VC.DM_Vec_MakeOptions(DDM, self)  DDM:AddOption("Pos using visual trace", function() VC.DM_Vec_ImpTrace(self) end):SetImage("icon16/arrow_out.png")  local ISM = DDM:AddSubMenu("Visual trace, directional:")  ISM:AddOption("Only X", function() VC.DM_Vec_ImpTrace(self, true) end):SetImage("icon16/arrow_left.png")  ISM:AddOption("Only Y", function() VC.DM_Vec_ImpTrace(self, nil, true) end):SetImage("icon16/arrow_turn_left.png")  ISM:AddOption("Only Z", function() VC.DM_Vec_ImpTrace(self, nil, nil, true) end):SetImage("icon16/arrow_up.png")  DDM:AddOption("Pos using trace", function() local tr = LocalPlayer():GetEyeTraceNoCursor() if IsValid(tr.Entity) and tr.Entity:IsVehicle() then local vec = tr.Entity:WorldToLocal(tr.HitPos) self:SetValue(Vector(math.Round(vec.x*10)/10, math.Round(vec.y*10)/10, math.Round(vec.z*10)/10)) end end):SetImage("icon16/zoom.png")  DDM:AddSpacer()  DDM:AddOption("Pos memorise", function() VC.Dev_Pos_Vector_Imp = Vector(self.VC_Vector.VC_VecX:GetValue(), self.VC_Vector.VC_VecY:GetValue(), self.VC_Vector.VC_VecZ:GetValue()) end):SetImage("icon16/disk.png")  DDM:AddOption("Pos import from memory", function() self:SetValue(VC.Dev_Pos_Vector_Imp or Vector(VC.Dev_Pos_X or 0, VC.Dev_Pos_Y or 0, VC.Dev_Pos_Z or 0)) end):SetImage("icon16/cog.png")  DDM:AddSpacer()  DDM:AddOption("Pos switch left/right", function()  if self.VC_Vector.VC_VecX:GetValue() != 0 then self:SetValue(Vector(-self.VC_Vector.VC_VecX:GetValue(), self.VC_Vector.VC_VecY:GetValue(), self.VC_Vector.VC_VecZ:GetValue())) end  end):SetImage("icon16/arrow_refresh.png")  DDM:AddSpacer()  DDM:AddSpacer() end  local El_VecImp = {} function El_VecImp:Init() self.VC_Vector = vgui.Create("VC_Vector", self) self.VC_Button = vgui.Create("DImageButton", self) self.VC_Button:SetMaterial("icon16/cog.png") end function El_VecImp:Think() if self.VC_Vector then self.VC_Vector:SetSize(self:GetSize()) self.VC_Button:SetPos(self:GetWide()-172, 0) end end function El_VecImp:Setup(...) self.VC_Vector:Setup(...) self.VC_Button:SetText("") self.VC_Button:SetSize(20,20) self.VC_Button:SetToolTip("Import from visual trace.\nRight click for more options.") self.VC_Button.DoClick = function() VC.DM_Vec_ImpTrace(self) end self.VC_Button.DoRightClick = function() local DDM = DermaMenu() VC.DM_Vec_MakeOptions(DDM, self) DDM:Open() end end function El_VecImp:SetValue(...) self.VC_Vector:SetValue(...) end function El_VecImp:GetValue(...) self.VC_Vector:GetValue(...) end vgui.Register("VC_Vector_Import", El_VecImp)   function VC.DM_Vec_MakeOptions_Ang(DDM, self)  if !VC.DM_Menu_Sel.Ang then VC.DM_Menu_Sel.Ang = Angle(0,0,0) end  local pnl = self local opt = DDM:AddOption("Rotate up 15 degrees", function() VC.DM_Menu_Sel.Ang.p = math.NormalizeAngle(VC.DM_Menu_Sel.Ang.p-15) pnl:SetValue({VC.DM_Menu_Sel.Ang.p,VC.DM_Menu_Sel.Ang.y,VC.DM_Menu_Sel.Ang.r}) end) opt:SetImage("icon16/arrow_up.png")  local pnl = self local opt = DDM:AddOption("Rotate down 15 degrees", function() VC.DM_Menu_Sel.Ang.p = math.NormalizeAngle(VC.DM_Menu_Sel.Ang.p+15) pnl:SetValue({VC.DM_Menu_Sel.Ang.p,VC.DM_Menu_Sel.Ang.y,VC.DM_Menu_Sel.Ang.r}) end) opt:SetImage("icon16/arrow_down.png")  local pnl = self local opt = DDM:AddOption("Rotate left 45 degrees", function() VC.DM_Menu_Sel.Ang.y = math.NormalizeAngle(VC.DM_Menu_Sel.Ang.y+45) pnl:SetValue({VC.DM_Menu_Sel.Ang.p,VC.DM_Menu_Sel.Ang.y,VC.DM_Menu_Sel.Ang.r}) end) opt:SetImage("icon16/arrow_turn_left.png")  local pnl = self local opt = DDM:AddOption("Rotate right 45 degrees", function() VC.DM_Menu_Sel.Ang.y = math.NormalizeAngle(VC.DM_Menu_Sel.Ang.y-45) pnl:SetValue({VC.DM_Menu_Sel.Ang.p,VC.DM_Menu_Sel.Ang.y,VC.DM_Menu_Sel.Ang.r}) end) opt:SetImage("icon16/arrow_turn_right.png") end local El_VecImp = {} function El_VecImp:Init() self.VC_Vector = vgui.Create("VC_Vector", self) self.VC_Button = vgui.Create("DImageButton", self) self.VC_Button:SetMaterial("icon16/chart_pie.png") end function El_VecImp:Think() if self.VC_Vector then self.VC_Vector:SetSize(self:GetSize()) self.VC_Button:SetPos(self:GetWide()-172, 0) end end function El_VecImp:Setup(...) self.VC_Vector:Setup(...) self.VC_Button:SetText("") self.VC_Button:SetSize(20,20) self.VC_Button:SetToolTip("Control the angle components.") self.VC_Button.DoClick = function() local DDM = DermaMenu() VC.DM_Vec_MakeOptions_Ang(DDM, self) DDM:Open() end self.VC_Button.DoRightClick = self.VC_Button.DoClick end function El_VecImp:SetValue(...) self.VC_Vector:SetValue(...) end function El_VecImp:GetValue(...) self.VC_Vector:GetValue(...) end vgui.Register("VC_Vector_Angle", El_VecImp)   local function Predict(Clr, self)  if type(Clr) == "string" then  if Clr == "Running" then  Clr = {155+math.Rand(0,70),165+math.Rand(0,70),200+math.Rand(0,55)}  elseif Clr == "Reverse" then  Clr = {200,225,255}  elseif Clr == "Brake" then  Clr = {255,55,0}  elseif Clr == "Headlight" then  Clr = table.Random({{255,255,255},{255,225,225},{225,255,225},{225,225,255},{255,255,225},{255,225,255},{225,255,255}})  elseif Clr == "Blinker" then  Clr = {255,155,0}  elseif Clr == "Siren" then  Clr = table.Random({{255,55,0}, {0,55,255}})  else  Clr = {0,0,0}  end  end self:SetValue(Clr) self:SetChecked(true) end  local El_Col = {} function El_Col:Init() self.VC_Vector = vgui.Create("VC_Vector", self) self.VC_CheckBox = vgui.Create("DCheckBox", self) end function El_Col:Paint() if self.VC_Color then local Sx, Sy = self:GetSize() draw.RoundedBox(0, 0, 0, Sx, Sy, self.VC_Color) if self.VC_Icon and IsValid(self.VC_CheckBox) then local pos = self.VC_CheckBox:GetPos() surface.SetDrawColor(255,255,255,255) surface.SetMaterial(self.VC_Icon) surface.DrawTexturedRect(pos-Sy-4, 2, Sy-4, Sy-4) end end end function El_Col:Think() if self.VC_Vector then self.VC_Vector:SetSize(self:GetSize()) self.VC_CheckBox:SetPos(self:GetWide()-170, 4) end end function El_Col:Setup(...) self.VC_Vector:Setup(...)  self.VC_CheckBox:SetValue(0) self.VC_CheckBox:SetToolTip("Use")  self.VC_CheckBox.DoRightClick = function()  local DDM = DermaMenu()  DDM:AddOption("Red", function() Predict({255, 55, 0}, self) end):SetImage("icon16/user_red.png")  DDM:AddOption("Green", function() Predict({55, 255, 0}, self) end):SetImage("icon16/user_green.png")  DDM:AddOption("Blue", function() Predict({0, 55, 255}, self) end):SetImage("icon16/user.png")  DDM:AddSpacer()  DDM:AddOption("White", function() Predict({200, 225, 255}, self) end):SetImage("icon16/tux.png")  DDM:AddOption("Yellow", function() Predict({255, 155, 0}, self) end):SetImage("icon16/user_orange.png")  DDM:AddOption("Black", function() Predict({0, 0, 0}, self) end):SetImage("icon16/user_gray.png")  DDM:AddSpacer()  DDM:AddOption("Random Running", function() Predict("Running", self) end)  DDM:AddOption("Random Headlight", function() Predict("Headlight", self) end)  DDM:Open()  end  self.DoRightClick = self.VC_CheckBox.DoRightClick end function El_Col:SetValue(...) self.VC_Vector:SetValue(...) end function El_Col:GetValue(...) self.VC_Vector:GetValue(...) end function El_Col:SetChecked(val) self.VC_CheckBox:SetValue(val and 1 or 0) end function El_Col:GetChecked() return self.VC_CheckBox:GetChecked() end vgui.Register("VC_Color", El_Col)   local El = {} function El:Init() self.VC_Button = vgui.Create("DButton", self) self.VC_Button:SetSize(80, 24) self.VC_Button:SetText("") self.VC_Button.Paint = function(stuff, Sx, Sy) draw.RoundedBox(0, 0, 0, Sx, Sy, self.VC_Button:IsHovered() and Color(0,100,0,200) or Color(0,0,0,150)) draw.SimpleText("Select", "VC_DEV_lower", Sx/2, Sy/2, clr, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER) end  self.VC_Button.DoClick = function()  local Pnl = vgui.Create("DFrame") Pnl:SetSize(500, 400) Pnl:SetPos(ScrW()/2-Pnl:GetWide()/2,ScrH()/2-Pnl:GetTall()/2) Pnl:SetTitle("") Pnl:NoClipping(true) Pnl:ShowCloseButton(false)  local ent = VC.GetVehicle(LocalPlayer()) local List = VC.Add_El_List(0,30,Pnl:GetWide(),Pnl:GetTall()-100) local sel = nil if self:GetValue() then sel = self:GetValue() end  if IsValid(ent) then  local Label = vgui.Create("DLabel") Label:SetText("  none") Label:SetTextColor(VC.Color.Bad) Label:SetFont("VC_Dev_Text") List:AddItem(Label) Label.Paint = function(stuff, Sx, Sy) if !sel then draw.RoundedBox(4, 0, 0, Sx,Sy, Color(0,155,0,100)) elseif Label:IsHovered() then draw.RoundedBox(4, 0, 0, Sx,Sy, Color(0,0,155,100)) end end Label.DoClick = function() sel = nil end  for i=0, ent:GetNumPoseParameters()-1 do  local nm = ent:GetPoseParameterName(i) local min, max = ent:GetPoseParameterRange(i)  local Label = vgui.Create("DLabel") Label:SetText("  "..nm.. ' ('..min .."/"..max..")") Label:SetTextColor(VC.Color.Blue) Label:SetFont("VC_Dev_Text") List:AddItem(Label) Label.Paint = function(stuff, Sx, Sy) if sel and sel == nm then draw.RoundedBox(4, 0, 0, Sx,Sy, Color(0,155,0,100)) elseif Label:IsHovered() then draw.RoundedBox(4, 0, 0, Sx,Sy, Color(0,0,155,100)) end end Label.DoClick = function() sel = nm end  end  end  List:SetParent(Pnl)   local btn = vgui.Create("DButton", Pnl) btn:SetText("Save and exit") btn:SetWide(100) btn:SetPos(Pnl:GetWide()/2-btn:GetWide()/2, Pnl:GetTall()-30) btn.Paint = function(stuff, Sx,Sy) draw.RoundedBox(4, 0, 0, Sx,Sy, VC.Color.Good) draw.RoundedBox(0, 0, 0, Sx, Sy, Color(255, 255, 255, 55)) end btn.DoClick = function() if IsValid(ent) then self:SetValue(sel) end Pnl:Close() end  Pnl.Paint = function(stuff, Sx, Sy)  draw.RoundedBox(0, 0, 0, Pnl:GetWide(), Pnl:GetTall(), VC.Color.Main) draw.RoundedBox(0, 0, 0, Pnl:GetWide(), 25, VC.Color.Main)  draw.DrawText("Pose parameter select", "VC_Dev_Text", 7, 5, VC.Color.Neutral, TEXT_ALIGN_LEFT)  if !IsValid(ent) then draw.DrawText("Vehicle not found", "VC_Dev_Text", Sx/2, Sy/2, VC.Color.Bad, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER) end  end  Pnl:MakePopup()  end end function El:Paint(Sx, Sy)  local text = "none" local clr = VC.Color.Bad  local val = self:GetValue() if val then text = val clr = VC.Color.Good end  draw.SimpleText("PParameter: ", "VC_DEV_lower", 0, 10, Color(255,255,255,255), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  draw.SimpleText(text, "VC_DEV_lower", 75, 10, clr, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER) end function El:Think() if self.VC_Button then self.VC_Button:SetPos(self:GetWide()-80, 0) end end function El:SetValue(val) self.VC_Value = val if self.OnChange then self.OnChange(nil, val) end end function El:GetValue() return self.VC_Value end vgui.Register("VC_PParam", El)   local El = {} function El:Init() self.VC_Button = vgui.Create("VC_Button", self) self.VC_Button:SetSize(80, 24) self.VC_Button:SetText("") self.VC_Button:SetColor(VC.Color.Btn_Spwn) self.VC_Button:SetText("Select")  self.VC_Button.DoClick = function()  local ent = VC.GetVehicle(LocalPlayer())  if IsValid(ent) then  local DDM = DermaMenu() VC.Panel_Test = DDM:AddOption("none", function() self:SetValue(nil) end) VC.Panel_Test:SetImage("icon16/key.png") DDM:AddSpacer()  for k,v in pairs(ent:GetMaterials()) do local pnl = DDM:AddOption(k.."   "..v, function() self:SetValue(k) end) end  if DDM then DDM:Open() end  else  VCPopup("No vehicle found.", "cross")  end  end end function El:Paint(Sx, Sy)  local text = "none" local clr = VC.Color.Bad  local val = self:GetValue() if val then text = val clr = VC.Color.Good end  draw.SimpleText("Material: ", "VC_DEV_lower", 0, 10, Color(255,255,255,255), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  draw.SimpleText(text, "VC_DEV_lower", 60, 10, clr, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER) end function El:Think() if self.VC_Button then self.VC_Button:SetPos(self:GetWide()-80, 0) end end function El:SetValue(val) self.VC_Value = val if self.OnChange then self.OnChange(nil, val) end end function El:GetValue() return self.VC_Value end vgui.Register("VC_Select_Mat", El)  local El = {} function El:Init() self.VC_Button_Add = vgui.Create("DImageButton", self) self.VC_Button_Add:SetSize(24, 24) self.VC_Button_Add:SetText("") self.VC_Button_Add.Paint = function(stuff, Sx, Sy) draw.RoundedBox(0, 0, 0, Sx, Sy, self.VC_Button_Add:IsHovered() and Color(0,255,0,200) or Color(0,0,0,0)) end self.VC_Button_Add:SetMaterial("icon16/add.png") self.VC_Button_Rem = vgui.Create("DImageButton", self) self.VC_Button_Rem:SetSize(24, 24) self.VC_Button_Rem:SetText("") self.VC_Button_Rem.Paint = function(stuff, Sx, Sy) draw.RoundedBox(0, 0, 0, Sx, Sy, self.VC_Button_Rem:IsHovered() and Color(0,255,0,200) or Color(0,0,0,0)) end self.VC_Button_Rem:SetMaterial("icon16/delete.png")   self.VC_Button_Add.DoClick = function()  local ent = VC.GetVehicle(LocalPlayer())  if IsValid(ent) then  local DDM = DermaMenu()  for BGk, BGv in pairs(ent:GetBodyGroups()) do  if BGv.submodels and table.Count(BGv.submodels) > 1 then  local Key = BGv.id  local ISM = nil  local dirCreated = nil  for k,v in pairs(BGv.submodels) do  if (!self.VC_Value or !self.VC_Value[Key] or !self.VC_Value[Key][k]) then  if !dirCreated then ISM = DDM:AddSubMenu("("..Key..") "..BGv.name) dirCreated = true end  if v == "" then v = BGv.name end  v = string.gsub(v, ".smd", "") ISM:AddOption("("..k..") "..v, function() local valtbl = self:GetValue() or {} valtbl[Key] = valtbl[Key] or {} valtbl[Key][k] = v self:SetValue(valtbl) end)  end  end  end  end  DDM:Open()  else  VCMsg("Look or be in a car first.")  end  end    self.VC_Button_Rem.DoClick = function()  local val = self:GetValue()  if val then  local DDM = DermaMenu()  DDM:AddOption("All", function() self:SetValue() end) DDM:AddSpacer()  for k,v in pairs(val) do for k2,v2 in pairs(v) do local nm = v2 if type(v2) != "string" then nm = "Unknown" end DDM:AddOption(nm, function() val[k][k2] = nil if table.Count(val[k]) == 0 then val[k] = nil end if table.Count(val) == 0 then val = nil end self:SetValue(val) end) end end  DDM:Open()  end  end end function El:Paint(Sx, Sy)  local text = "none" local clr = VC.Color.Bad  local val = self:GetValue() if val then text = "" clr = VC.Color.Good for k,v in pairs(val) do for k2,v2 in pairs(v) do if text != "" then text=text..", " end local nm = v2 if type(v2) != "string" then nm = "Unknown" end text=text..nm end end end  draw.SimpleText("Bodygroups: ", "VC_DEV_lower", 2, 10, Color(255,255,255,255), TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  draw.SimpleText(text, "VC_DEV_lower", 75, 10, clr, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER) end function El:Think() if self.VC_Button_Add then self.VC_Button_Add:SetPos(self:GetWide()-24-24, 0) end if self.VC_Button_Rem then self.VC_Button_Rem:SetPos(self:GetWide()-24, 0) end end function El:SetValue(val) self.VC_Value = val if self.OnChange then self.OnChange(nil, val) end end function El:GetValue() local val = nil if self.VC_Value then val = table.Copy(self.VC_Value) end return val end vgui.Register("VC_BGroup", El)  local function Init(self)  local PosX = 0 self.VC_Panels = {}  for k,v in pairs(VC.DevPanelDimentions) do self.VC_Panels[k] = vgui.Create("DPanelList") self.VC_Panels[k]:EnableVerticalScrollbar(true) self.VC_Panels[k]:SetParent(self) end  self.VC_DevPanelDimentions = table.Copy(VC.DevPanelDimentions) VC.DevPanelDimentions = nil end  local function Think(self) if self.VC_Panels and self.VC_Parent and self.VC_DevPanelDimentions then local PosX = 0 local Sx, Sy = self.VC_Parent:GetSize() for k,v in pairs(self.VC_DevPanelDimentions) do self.VC_Panels[k]:SetPos(PosX, 0) self.VC_Panels[k]:SetSize(Sx*v-(self.VC_Panels[k+1] and 2 or 0), Sy) PosX = PosX+Sx*v end end end  local El_Pnl = {} function El_Pnl:Init() Init(self) end function El_Pnl:Think() Think(self) end function El_Pnl:Paint() for k,v in pairs(self.VC_Panels) do local Px, Py = v:GetPos() local Sx, Sy = v:GetSize() draw.RoundedBox(0, Px, Py, Sx, Sy-4, Color(0,0,0,120)) end end vgui.Register("VC_Panel", El_Pnl)  local El_Pnl = {} function El_Pnl:Init() Init(self) end function El_Pnl:Think() Think(self) end vgui.Register("VC_Panel_NoDraw", El_Pnl)  local El_Pnl = {} function El_Pnl:Init() Init(self) end function El_Pnl:Think() Think(self) end function El_Pnl:Paint() local Sx, Sy = self:GetSize() draw.RoundedBox(0, 0, 0, Sx, Sy-4, Color(0,0,0,120)) end vgui.Register("VC_Panel_Draw_Whole", El_Pnl)  local El = {} function El:SetColor(val) self.VC_Color = val end function El:SetPulseColor(val) self.VC_PulseColor = val end function El:SetFont(val) self.VC_Font = val end function El:SetKey(val) self.VC_Key = "["..string.upper(val).."]" end function El:SetText(val) self.VC_Text = val end function El:SetTextIsWhite(val) self.VC_IsWhiteText = val end function El:Paint(Sx, Sy)  if !self.VC_ClrNil then self.VC_ClrNil = true self:SetTextColor(Color(0,0,0,0)) end  local hov = self:IsHovered() local dwn = self:IsDown()  local clr = self.VC_Color or VC.Color.Blue if self.VC_PulseColor and math.sin(CurTime()*50) > 0 then clr = self.VC_PulseColor end  local clr_t = table.Copy(clr) clr_t.a = 25   draw.RoundedBox(0, 0, 0, Sx, Sy, Color(0,0,0,255))   draw.RoundedBox(0, 0, 0, Sx, Sy, clr_t)  if dwn then clr_t.a = 255 draw.RoundedBox(0, 0, 0, Sx, Sy, clr_t) elseif hov then draw.RoundedBox(0, 0, 0, Sx, Sy, clr_t) end  draw.RoundedBox(0, 1, Sy-2, Sx-1, 2, clr)   if self.VC_DrawIcon then  if self.VC_DrawIcon == "Add" then  local nclr = VC.Color.Good  draw.RoundedBox(0, Sx/2-5, Sy/2-3, 14, 4, nclr)  draw.RoundedBox(0, Sx/2, 2, 4, 14, nclr)  elseif self.VC_DrawIcon == "Rem" then  local nclr = VC.Color.Bad  draw.RoundedBox(0, Sx/2-5, Sy/2-2, 14, 4, nclr)  end  else  local pos_y = Sy/2-(Sy > 50 and 12 or 8)  draw.DrawText(self.VC_Text or "", self.VC_Font, Sx/2, pos_y, dwn and Color(0,0,0,255) or VC.Color.White, TEXT_ALIGN_CENTER)  if self.VC_Key then draw.DrawText(self.VC_Key or "", nil, Sx-3, pos_y, clr, TEXT_ALIGN_RIGHT) end  end end derma.DefineControl("VC_Button", "VCMod's button.", El, "DButton")  local El_MBtn = {} function El_MBtn:Think()  if self.VC_BTbl then  for Bk, Bv in pairs(self.VC_BTbl) do  if !self.VC_BTbl[Bk].info then  local Btn = vgui.Create("VC_Button", self) Btn:SetText(Bv.name) if Bv.tooltip then Btn:SetToolTip(Bv.tooltip) end if Bv.clk then Btn.DoClick = Bv.clk end self.VC_BTbl[Bk].btn = Btn self.VC_BTbl[Bk].info = true  if Bv.clr then Btn:SetColor(Bv.clr) end if Bv.IsTextWhite then Btn:SetTextIsWhite(Bv.IsTextWhite) end  end  local Sx, Sy = self:GetSize() Bv.btn:SetPos(Sx/#self.VC_BTbl*(Bk-1)) Bv.btn:SetSize(Sx/#self.VC_BTbl-1, Sy)  end  end end vgui.Register("VC_MultiButton", El_MBtn)  local El_Pnl = {} function El_Pnl:Think()  if self.VC_BTbl then  local DoIcons = #self.VC_BTbl == 2 and self:GetWide() < 200  for Bk, Bv in pairs(self.VC_BTbl) do  if !self.VC_BTbl[Bk].info then  local Btn = vgui.Create("VC_Button", self) Btn:SetText(Bv.name) if Bv.tooltip then Btn:SetToolTip(Bv.tooltip) end if Bv.clk then Btn.DoClick = Bv.clk end self.VC_BTbl[Bk].btn = Btn self.VC_BTbl[Bk].info = true  Btn:SetTextIsWhite(true)  if Bk == 1 then  Btn:SetColor(VC.Color.Btn_Add)  if DoIcons then Btn.VC_DrawIcon = "Add" end  elseif Bk == (self.RemoveButton or 2) then  Btn:SetColor(VC.Color.Btn_Rem)  if DoIcons then Btn.VC_DrawIcon = "Rem" end  else  Btn:SetColor(VC.Color.Btn_Cng)  Btn:SetTextIsWhite(false)  end  if Bv.paint then Btn.Paint = Bv.paint end   end  local Sx, Sy = self:GetSize() Bv.btn:SetPos(Sx/#self.VC_BTbl*(Bk-1)) Bv.btn:SetSize(Sx/#self.VC_BTbl-1, Sy)  end  end end vgui.Register("VC_ARB", El_Pnl)  local El_DComboBox = {} function El_DComboBox:Init()  self.VC_List = vgui.Create("DComboBox", self)  self.VC_Btn1 = vgui.Create("DImageButton", self) self.VC_Btn1:SetMaterial(VC.Material.Left) self.VC_Btn1:SetToolTip("Select previous in the list.") self.VC_Btn1:SetWidth(50)  self.VC_Btn2 = vgui.Create("DImageButton", self) self.VC_Btn2:SetMaterial(VC.Material.Right) self.VC_Btn2:SetToolTip("Select next in the list.") self.VC_Btn2:SetWidth(50)  self.VC_Btn3 = vgui.Create("DImageButton", self) self.VC_Btn3:SetMaterial("icon16/eye.png") self.VC_Btn3:SetToolTip("Display all positions.") self.VC_Btn3:SetWidth(25)  self.VC_Btn1.DoClick = function() if self.VC_List.VC_Sel and self.VC_List.VC_Sel > 1 then self.VC_List:ChooseOptionID(self.VC_List.VC_Sel-1) end end  self.VC_Btn2.DoClick = function() if !self.VC_List.VC_Sel or self.VC_List.VC_Max > self.VC_List.VC_Sel then self.VC_List:ChooseOptionID((self.VC_List.VC_Sel or 0)+1) end end end  function El_DComboBox:Think()  if self.VC_List then  local Sx,Sy = self:GetSize()  if self.VC_DontDoView then  self.VC_List:SetWidth(Sx-100)  self.VC_Btn1:SetPos(Sx-100, 0)  self.VC_Btn2:SetPos(Sx-50, 0)  self.VC_Btn3:Remove()  else  self.VC_List:SetWidth(Sx-125)  self.VC_Btn1:SetPos(Sx-125, 0)  self.VC_Btn2:SetPos(Sx-75, 0)  self.VC_Btn3:SetPos(Sx-25, 0)  end  end end vgui.Register("VC_DComboBox", El_DComboBox) local rs7 = "vc.check_msg_work_ALS_k4" 