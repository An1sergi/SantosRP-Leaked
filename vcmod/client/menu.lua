
-----------------------------------------------------
function VCMsg(msg, clr) msg = VC.Lng(msg) if msg == nil then msg = "nil" end if type(msg) != table then msg = {msg} end for _, PM in pairs(msg) do if type(PM) != string then PM = tostring(PM) end if !VC_DG_Chat_Msg_All then chat.AddText(VC.Color.Blue, "VCMod: ", (clr or VC.Color.Good), tostring(PM)) end end end net.Receive("VCMsg", function(len) local PM = net.ReadString() VCMsg(PM) end)  VC.Color = {} VC.Color.Main = Color(0,0,0,220) VC.Color.Good = Color(155,255,100,255) VC.Color.Neutral = Color(255,170,0,255) VC.Color.Blue = Color(155,225,255,255) VC.Color.Bad = Color(255,70,70,255) VC.Color.Slider = Color(0,0,0,200) VC.Color.White = Color(220,255,255,255)  VC.Color.Btn_Add = Color(0,125,0,255) VC.Color.Btn_Rem = Color(200,0,0,255) VC.Color.Btn_Cng = Color(155,225,255,255) VC.Color.Btn_Spw = Color(155,155,255,255) VC.Color.Btn_Orn = Color(255,180,55,255)  VC.FadeW = 50  if !VC.Fonts then VC.Fonts = {} end local Txt = "VC_Dev_Text" if !VC.Fonts[Txt] then VC.Fonts[Txt] = true surface.CreateFont(Txt, {font = "MenuLarge", size = 16, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Font = "VC_Big" if !VC.Fonts[Font] then VC.Fonts[Font] = true surface.CreateFont(Font, {font = "Trebuchet24", size = 26, weight = 10000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Font_i = "VC_Big_Italic" if !VC.Fonts[Font_i] then VC.Fonts[Font_i] = true surface.CreateFont(Font_i, {font = "Trebuchet24", size = 26, weight = 10000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = true, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Font_Logo = "VC_Logo" if !VC.Fonts[Font_Logo] then VC.Fonts[Font_Logo] = true surface.CreateFont(Font_Logo, {font = "MenuLarge", size = 50, weight = 1000, blursize = 5, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Font_SideBtn = "VC_Menu_Side" if !VC.Fonts[Font_SideBtn] then VC.Fonts[Font_SideBtn] = true surface.CreateFont(Font_SideBtn, {font = "MenuLarge", size = 20, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Font_SideBtn_Focused = "VC_Menu_Side_Focused" if !VC.Fonts[Font_SideBtn_Focused] then VC.Fonts[Font_SideBtn_Focused] = true surface.CreateFont(Font_SideBtn_Focused, {font = "MenuLarge", size = 20, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = true, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Font_Header = "VC_Menu_Header" if !VC.Fonts[Font_Header] then VC.Fonts[Font_Header] = true surface.CreateFont(Font_Header, {font = "MenuLarge", size = 18, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Font_Header_Focused = "VC_Menu_Header_Focused" if !VC.Fonts[Font_Header_Focused] then VC.Fonts[Font_Header_Focused] = true surface.CreateFont(Font_Header_Focused, {font = "MenuLarge", size = 18, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = true, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Fnt = "VC_Name" if !VC.Fonts[Fnt] then VC.Fonts[Fnt] = true surface.CreateFont(Fnt, {font = "MenuLarge", size = 26, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false,outline = false}) end local Font_Info_Small = "VC_Info_Small" if !VC.Fonts[Font_Info_Small] then VC.Fonts[Font_Info_Small] = true surface.CreateFont(Font_Info_Small, {font = "MenuLarge", size = 19, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end local Font_Info_Smaller = "VC_Info_Smaller" if !VC.Fonts[Font_Info_Smaller] then VC.Fonts[Font_Info_Smaller] = true surface.CreateFont(Font_Info_Smaller, {font = "MenuLarge", size = 17, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false, outline = false}) end if !VC.Fonts["VC_Regular2"] then VC.Fonts["VC_Regular2"] = true surface.CreateFont("VC_Regular2", {font = "MenuLarge", size = 15, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false,outline = false}) end if !VC.Fonts["VC_HUD_Bisgs"] then VC.Fonts["VC_HUD_Bisgs"] = true surface.CreateFont("VC_HUD_Bisgs", {font = "BudgetLabel", size = 17, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false,outline = false}) end if !VC.Fonts["VC_Regular_S"] then VC.Fonts["VC_Regular_S"] = true surface.CreateFont("VC_Regular_S", {font = "MenuLarge", size = 10, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false,outline = false}) end if !VC.Fonts["VC_Regular_SsS"] then VC.Fonts["VC_Regular_SsS"] = true surface.CreateFont("VC_Regular_SsS", {font = "MenuLarge", size = 12, weight = 1000, blursize = 0, scanlines = 0, antialias = true, underline = false, italic = false, strikeout = false, symbol = false, rotary = false, shadow = false, additive = false,outline = false}) end  function VC.Add_El_List(Px,Py,Sx,Sy) local List = vgui.Create("DPanelList") List:EnableVerticalScrollbar(true) List:SetPos(Px, Py) List:SetSize(Sx, Sy) return List end function VC.Add_El_Slider(Txt, Min, Max, Dec, Tip, CVar, Tbl, JustAdd) if !Tbl then Tbl = VC.Settings end local Sldr = vgui.Create("DNumSlider") Sldr.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, Sx-50, 5, 45, Sy-10, Color(100,200,200,100)) end Sldr.VC_Text = VC.Lng(Txt or "") Sldr:SetText(Sldr.VC_Text) Sldr:SetMin(Min or 0) Sldr:SetMax(Max or 1) Sldr.VC_Decimals = Dec or 2 Sldr:SetDecimals(Dec or 2) Sldr:SetValue(math.Clamp(0, Min or 0, Max or 1)) if Tip then Sldr:SetToolTip(Tip) Sldr.VC_Tip = Tip end if CVar then Sldr:SetValue(Tbl[CVar] or 0) Sldr.OnValueChanged = function(idx, val) if JustAdd then Tbl[CVar] = val else VC.SaveSetting(CVar, val) end end end return Sldr end function VC.Add_El_Checkbox(Txt, Tip, CVar, Tbl, JustAdd) if !Tbl then Tbl = VC.Settings end local CBox = vgui.Create("DCheckBoxLabel") CBox.VC_Text = Txt or "" CBox.VC_CheckBox = true CBox:SetText(VC.Lng(Txt or "")) CBox:SetValue(0) if Tip then CBox:SetToolTip(Tip) CBox.VC_Tip = Tip end if CVar then CBox:SetValue(Tbl[CVar] or 0) CBox.OnChange = function(idx, val) if JustAdd then Tbl[CVar] = val else VC.SaveSetting(CVar, val) end end end return CBox end function VC.Add_El_Line(Pnl, Clr) local Line = vgui.Create("VC_Line", Pnl) Line.VC_Color = Clr Line:SetTall(1) if Pnl then Pnl:AddItem(Line) end end function VC.Add_El_Panel(Prt, Tbl, Sy, NDraw) VC.DevPanelDimentions = Tbl local Pnl = vgui.Create(NDraw and (NDraw == 2 and "VC_Panel_Draw_Whole" or "VC_Panel_NoDraw") or "VC_Panel") Pnl.VC_Parent = Prt local Sx,_ = Prt:GetSize() Pnl:SetSize(Sx, Sy) Prt:AddItem(Pnl) Pnl.VC_Panels.Main = Pnl return Pnl.VC_Panels end  function VC.Add_El_SliderP(Pnl, Txt, Min, Max, Dec, Tip) local Sldr = VC.Add_El_Slider(Txt, Min, Max, Dec, Tip) if Pnl then Pnl:AddItem(Sldr) end return Sldr end function VC.Add_El_CheckboxP(Pnl, Txt, Tip) local CBox = VC.Add_El_Checkbox(Txt, Tip) if Pnl then Pnl:AddItem(CBox) end return CBox end  function VC.DoTabClr(prt, pnl) pnl.Tab.Paint = function(obj, Sx, Sy) local active = prt:GetActiveTab() == pnl.Tab draw.RoundedBox(0, 0, 0, Sx, Sy- (active and 4 or 0), active and Color(64,64,64, 255) or Color(0,0,0,200)) end end  if !VC.Material then VC.Material = {} end VC.Material.Fade = Material("VCMod/fade") VC.Material.Circle_32 = Material("vcmod/circle_32") VC.Material.Circle = Material("vcmod/circle") VC.Material.Check = Material("vcmod/check.png") VC.Material.Cross = Material("vcmod/cross.png") VC.Material.Info = Material("vcmod/info.png") VC.Material.Button = Material("vcmod/button.png") VC.Material.Left = Material("vcmod/left.png") VC.Material.Right = Material("vcmod/right.png") VC.Material.Icon = Material("vcmod/icon_red.png")  hook.Add("OnPlayerChat", "VC_OnPlayerChat", function(ply, txt) txt = string.lower(txt) if txt == "!vcmod" or txt == "!vc" then RunConsoleCommand("vc_open_menu", ply:EntIndex()) return true end end)  local typedata = {  check = {mat = VC.Material.Check, clr = VC.Color.Good},  cross = {mat = VC.Material.Cross, clr = VC.Color.Bad},  info = {mat = VC.Material.Info, clr = VC.Color.Blue} }  net.Receive("VCPopup", function(dt) VCPopup(net.ReadString(), net.ReadString(), net.ReadInt(32)) end) function VCPopup(text, ttype, length)  if VC_DG_Popup then return end  local instant = (length or 2) < 0.8 local Pnl = vgui.Create("DFrame") Pnl:SetSize(50, 50) Pnl:SetTitle("") Pnl:SetPos(ScrW()/2-Pnl:GetWide()/2,ScrH()/2-Pnl:GetTall()/2) Pnl.VC_OriginalPos = {Pnl:GetPos()} Pnl:SetDraggable(false) Pnl:ShowCloseButton(false) Pnl:NoClipping(true) if !instant then Pnl:AlphaTo(0, 0, 0) Pnl:AlphaTo(255, 0.3, 0) end  local TextPnl = VC.Add_El_List(0,0,50,50) TextPnl:SetParent(Pnl) local text = VC.Lng(text) if !length then length = 2.5 end if !ttype then ttype = "info" end ttype = string.lower(ttype)  local data = typedata[ttype] TextPnl.Paint = function(obj, Sx, Sy) draw.DrawText(text, Font, Sx, 12, data.clr, TEXT_ALIGN_RIGHT) Pnl.VC_TextSize = surface.GetTextSize(text)+10 end  Pnl.VC_Start = instant and 0.6 or -0.5 local tclr = table.Copy(VC.Color.Main)   Pnl.Paint = function(obj, Sx, Sy)  local FTm = Pnl.FrameRate or 15 if FTm > 10 then FTm = 0.01 end  Pnl.VC_Start = Pnl.VC_Start+3.5*FTm   local Int = Pnl.VC_Start if Int < 0 then Int = 0 end if Int > 1 then Int = 1 end Int = VC.EaseInOut(Int)*(Pnl.VC_TextSize or 100)  tclr.a = Int*5 if tclr.a > 220 then tclr.a = 220 end  Pnl:SetPos(Pnl.VC_OriginalPos[1]-Int/2, Pnl.VC_OriginalPos[2])  Pnl:SetWide(50+Int)  TextPnl:SetPos(40, 0)  TextPnl:SetWide(Int)  draw.RoundedBox(0, VC.FadeW/2, 0, Sx-VC.FadeW, Sy, tclr)  surface.SetDrawColor(tclr.r,tclr.g,tclr.b,tclr.a)  surface.SetMaterial(VC.Material.Fade)  surface.DrawTexturedRectRotated(Sx, Sy/2, VC.FadeW, Sy, 0)  surface.DrawTexturedRectRotated(0, Sy/2, VC.FadeW, Sy, 180)   surface.SetDrawColor(255,255,255,255)  surface.SetMaterial(data.mat) surface.DrawTexturedRect(5, 5, 40, 40)   if Pnl.VC_Start > length*2 and !Pnl.VC_Removing then Pnl.VC_Removing = true Pnl:AlphaTo(0, 0.2, 0) timer.Simple(0.2, function() Pnl:Remove() end) end  Pnl.FrameRate = VGUIFrameTime()- (Pnl.FrameTime or 0) Pnl.FrameTime = VGUIFrameTime()  end  if vgui.CursorVisible() then Pnl:MakePopup() end end   VC.Menu_Info_Panel = true VC.Menu_Update_Panel = nil  function VC.DataServer_Get()  if !VC.DataServer_Checking then  VC.DataServer_Checking = true  if file.Exists("vcmod/dataserver.txt", "DATA") then VC.DataServer = util.JSONToTable(file.Read("vcmod/dataserver.txt", "DATA")) end  http.Fetch(VC.Host.."api/getaddoninfo.php?st=i", function(body) VC.DataServer_Checking = nil VC.DataServer = util.JSONToTable(body) file.Write("vcmod/dataserver.txt", body) end)  timer.Simple(30, function() if VC.DataServer_Checking then VC.DataServer_Checking = nil print("VCMod: could not contact VCMod server, falling back onto data file.") end end)  end end timer.Simple(2, VC.DataServer_Get) timer.Create("VC_ContactServer", 60*30, 0, VC.DataServer_Get) timer.Create("VC_PrintedChatMsgT", 2, 0, function() local ent = LocalPlayer():GetVehicle() if IsValid(ent) and (ent.VC_IsJeep or ent:GetNWBool("VC_ExtraSt")) and (!VC.PrintedChatMsgT or CurTime() >= VC.PrintedChatMsgT) then VCMsg("Chat") VC.PrintedChatMsgT = CurTime()+350 end end)  local function GetFirstAvailable(ttbl) local key = nil for k,v in pairs(ttbl) do if !v.Check or v.Check() then key = k break end end return key end  local function OpenMenu(ply, cmd, arg)  if VC_DG_Menu or arg[1] and ply:EntIndex() != tonumber(arg[1]) then return end   if IsValid(VC.Menu_Panel) then VC.Menu_Panel:SetVisible(true) VC.Menu_Panel:AlphaTo(0, 0, 0) VC.Menu_Panel:AlphaTo(255, 0.2, 0) return end   local Menu_Items_A = VC.Menu_Items_A or {} local Menu_Items_P = VC.Menu_Items_P or {}   local CL_Body = VC.Color.Main  local CL_Selection = table.Copy(VC.Color.Blue) CL_Selection.a = CL_Selection.a/51  local CL_Button = Color(0, 0, 0, 0)  local CL_Button_Hov = table.Copy(VC.Color.Blue) CL_Button_Hov.a = CL_Button_Hov.a/10  local CL_Button_Sel_Hov = CL_Button_Hov   local SideButtons, SizeX, SizeY = {}, 750, 550  VC.Menu_Panel = vgui.Create("DFrame") if !VC.MenuPosX then VC.MenuPosX = ScrW()/2-SizeX/2 end if !VC.MenuPosY then VC.MenuPosY= ScrH()/2-SizeY/2 end VC.Menu_Panel:SetPos(VC.MenuPosX, VC.MenuPosY) VC.Menu_Panel:SetSize(SizeX, SizeY) VC.Menu_Panel:SetTitle("") VC.Menu_Panel:NoClipping(true) VC.Menu_Panel:MakePopup()  VC.Menu_Panel.VC_Refresh = true VC.Menu_Panel.VC_Refresh_Side = true VC.Menu_Panel:AlphaTo(0, 0, 0) VC.Menu_Panel:AlphaTo(255, 0.2, 0)   VC.Menu_Panel.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, SizeX, SizeY, CL_Body)  draw.DrawText("VCMod", Font_Logo, -15, -20,  Color(255, 55, 0, 255), TEXT_ALIGN_LEFT)  draw.RoundedBox(0, 135, 26, 611, SizeY-30, CL_Selection)  end   local Button_personal = vgui.Create("DButton") Button_personal:SetParent(VC.Menu_Panel) Button_personal:SetPos(135, 3) Button_personal:SetSize(226, 20) Button_personal:SetText("") Button_personal:NoClipping(true)  Button_personal.DoClick = function() if VC.Menu_AdminPanelSel or VC.Menu_Info_Panel or VC.Menu_Update_Panel then VC.Menu_Info_Panel = nil VC.Menu_Update_Panel = nil if !VC.Menu_AdminPanelSel_Side_P then VC.Menu_AdminPanelSel_Side_P = GetFirstAvailable(Menu_Items_P) end VC.Menu_Panel.VC_Refresh_Side = true VC.Menu_Panel.VC_Refresh = true end VC.Menu_AdminPanelSel = false end  Button_personal.Paint = function(obj, Sx, Sy)  local IsHovered = Button_personal:IsHovered()  draw.RoundedBox(0, 0, 0, Sx, Sy+(VC.Menu_AdminPanelSel and 0 or 3), (VC.Menu_Info_Panel or VC.Menu_Update_Panel or VC.Menu_AdminPanelSel) and (IsHovered and CL_Button_Hov or CL_Button) or (IsHovered and CL_Button_Sel_Hov or CL_Selection))  draw.DrawText(VC.Lng("Personal"), IsHovered and Font_Header_Focused or Font_Header, Sx/2, 0, !(VC.Menu_Info_Panel or VC.Menu_Update_Panel or VC.Menu_AdminPanelSel) and VC.Color.Good or VC.Color.White, TEXT_ALIGN_CENTER)  end   local Button_admin = vgui.Create("DButton") Button_admin:SetParent(VC.Menu_Panel) Button_admin:SetPos(364, 3) Button_admin:SetSize(226, 20) Button_admin:SetText("") Button_admin:NoClipping(true)  Button_admin.DoClick = function() if !VC.CanEditAdminSettings(LocalPlayer()) or !vcmod1 and !vcmod1_els then VCPopup("AccessRestricted", "cross") Button_personal.DoClick() return end if !VC.Menu_AdminPanelSel or VC.Menu_Update_Panel or VC.Menu_Info_Panel then VC.Menu_Info_Panel = nil VC.Menu_Update_Panel = nil if !VC.Menu_AdminPanelSel_Side_A then VC.Menu_AdminPanelSel_Side_A = GetFirstAvailable(Menu_Items_A) end VC.Menu_Panel.VC_Refresh_Side = true VC.Menu_Panel.VC_Refresh = true end VC.Menu_AdminPanelSel = true end  Button_admin.Paint = function(obj, Sx, Sy)  local IsHovered = Button_admin:IsHovered()  draw.RoundedBox(0, 0, 0, Sx, Sy+(VC.Menu_AdminPanelSel and 3 or 0), (VC.Menu_Info_Panel or VC.Menu_Update_Panel or !VC.Menu_AdminPanelSel) and (IsHovered and CL_Button_Hov or CL_Button) or (IsHovered and CL_Button_Sel_Hov or CL_Selection))  draw.DrawText(VC.Lng("Administrator"), IsHovered and Font_Header_Focused or Font_Header, Sx/2, 0, !VC.Menu_Info_Panel and !VC.Menu_Update_Panel and VC.Menu_AdminPanelSel and VC.Color.Good or VC.Color.White, TEXT_ALIGN_CENTER)  end   local Tbl = {} local TblR = {} local Int = 1 local Lng_CBox = vgui.Create("DComboBox", Pnl) Lng_CBox:SetParent(VC.Menu_Panel) Lng_CBox:SetPos(593, 3) Lng_CBox:SetSize(120, 20)  for k,v in pairs(VC.Lng_T) do local code = string.lower(v.Language_Code) Lng_CBox:AddChoice(string.upper(code).."  "..v.Name) Tbl[Int] = code TblR[code] = Int Int = Int+1 end  Lng_CBox.OnSelect = function(idx, val) if Lng_CBox.Ignore then Lng_CBox.Ignore = nil return end if VC.Lng_Sel == Tbl[val] then return end if VC.Lng_Set then VC.Lng_Set(Tbl[val]) end VC.Menu_Panel:Close() OpenMenu(ply, {}, {}) end  if VC.Lng_Sel and TblR[VC.Lng_Sel] then Lng_CBox:ChooseOptionID(TblR[VC.Lng_Sel]) else Lng_CBox.Ignore = true Lng_CBox:ChooseOptionID(1) end  Lng_CBox:SetColor(Color(255,255,255,255))   Lng_CBox.Paint = function(obj, Sx, Sy) local IsHovered = Lng_CBox:IsHovered() draw.RoundedBox(0, 0, 0, Sx, Sy, IsHovered and Color(35,135,100,245) or Color(35,100,135,245)) end   VC.Menu_SelectedPnl = nil   local Btn = vgui.Create("DButton") Btn:SetParent(VC.Menu_Panel) Btn:SetPos(3, VC.Menu_Panel:GetTall()-40) Btn:SetSize(129, 40) Btn:SetText("") Btn:NoClipping(true)  Btn.DoClick = function() if !VC.Menu_Info_Panel then VC.Menu_Panel.VC_Refresh_Side = true end VC.Menu_Info_Panel = true VC.Menu_Update_Panel = nil end  Btn.Paint = function(obj, Sx, Sy)  local IsHovered = Btn:IsHovered()  draw.RoundedBox(0, 0, 0, Sx+(VC.Menu_Info_Panel and 3 or 0), Sy-4, VC.Menu_Info_Panel and (IsHovered and CL_Button_Sel_Hov or CL_Selection) or (IsHovered and CL_Button_Hov or CL_Button))  draw.DrawText(VC.Lng("Info"), IsHovered and Font_SideBtn_Focused or Font_SideBtn, Sx/2, Sy/2-14, VC.Menu_Info_Panel and VC.Color.Good or VC.Color.White, TEXT_ALIGN_CENTER)  end   local Btn = vgui.Create("DButton") Btn:SetParent(VC.Menu_Panel) Btn:SetPos(3, VC.Menu_Panel:GetTall()-40*2) Btn:SetSize(129, 40) Btn:SetText("") Btn:NoClipping(true)  Btn.DoClick = function() if !VC.Menu_Update_Panel then VC.Menu_Panel.VC_Refresh_Side = true end VC.Menu_Update_Panel = true VC.Menu_Info_Panel = nil end  Btn.Paint = function(obj, Sx, Sy)  local IsHovered = Btn:IsHovered()  draw.RoundedBox(0, 0, 0, Sx+(VC.Menu_Update_Panel and 3 or 0), Sy-4, VC.Menu_Update_Panel and (IsHovered and CL_Button_Sel_Hov or CL_Selection) or (IsHovered and CL_Button_Hov or CL_Button))  draw.DrawText(VC.Lng("Updates"), IsHovered and Font_SideBtn_Focused or Font_SideBtn, Sx/2, Sy/2-14, VC.Menu_Update_Panel and VC.Color.Good or VC.Color.White, TEXT_ALIGN_CENTER)  end   Button_personal.Think = function()  if VC.Menu_Panel.VC_Refresh then  for btnk, btnv in pairs(SideButtons) do if IsValid(btnv) then btnv:Remove() end end SideButtons = {}  if VC.Menu_AdminPanelSel then  local Int = 0  for ItemK, Table in pairs(Menu_Items_A) do  if !Table.Check or Table.Check() then  local Name = Table[1]  if Name then  local Btn = vgui.Create("DButton") Btn:SetParent(VC.Menu_Panel) Btn:SetPos(3, 26+Int) Btn:SetSize(129, (Table[3] or 45)-(Table[4] or 5)) Btn:SetText("") Btn:NoClipping(true)  Btn.DoClick = function() if VC.Menu_AdminPanelSel_Side_A != ItemK or VC.Menu_Info_Panel or VC.Menu_Update_Panel then VC.Menu_Panel.VC_Refresh_Side = true end VC.Menu_AdminPanelSel_Side_A = ItemK VC.Menu_Info_Panel = nil VC.Menu_Update_Panel = nil end  Btn.Paint = function(obj, Sx, Sy)  local IsHovered = Btn:IsHovered() local On = VC.Menu_AdminPanelSel_Side_A == ItemK and !VC.Menu_Info_Panel and !VC.Menu_Update_Panel  draw.RoundedBox(0, 0, 0, Sx+(On and 3 or 0), Sy, On and (IsHovered and CL_Button_Sel_Hov or CL_Selection) or (IsHovered and CL_Button_Hov or CL_Button))  draw.DrawText(VC.Lng(Name), IsHovered and Font_SideBtn_Focused or Font_SideBtn, Sx/2, Sy/2-11, On and VC.Color.Good or VC.Color.White, TEXT_ALIGN_CENTER)  end  SideButtons[Name] = Btn  end  Int = Int+(Table[3] or 43)  end  end  else  local Int = 0   for ItemK, Table in pairs(Menu_Items_P) do  if !Table.Check or Table.Check() then  local Name = Table[1]  if Name then  local Btn = vgui.Create("DButton") Btn:SetParent(VC.Menu_Panel) Btn:SetPos(3, 26+Int) Btn:SetSize(129, (Table[3] or 45)-(Table[4] or 5)) Btn:SetText("") Btn:NoClipping(true)  Btn.DoClick = function() if VC.Menu_AdminPanelSel_Side_P != ItemK or VC.Menu_Info_Panel or VC.Menu_Update_Panel then VC.Menu_Panel.VC_Refresh_Side = true end VC.Menu_AdminPanelSel_Side_P = ItemK VC.Menu_Info_Panel = nil VC.Menu_Update_Panel = nil end  Btn.Paint = function(obj, Sx, Sy)  local IsHovered = Btn:IsHovered() local On = VC.Menu_AdminPanelSel_Side_P == ItemK and !VC.Menu_Info_Panel and !VC.Menu_Update_Panel  draw.RoundedBox(0, 0, 0, Sx+(On and 3 or 0), Sy, On and (IsHovered and CL_Button_Sel_Hov or CL_Selection) or (IsHovered and CL_Button_Hov or CL_Button))  draw.DrawText(VC.Lng(Name), IsHovered and Font_SideBtn_Focused or Font_SideBtn, Sx/2, Sy/2-11, On and VC.Color.Good or VC.Color.White, TEXT_ALIGN_CENTER)  end  SideButtons[Name] = Btn  end  Int = Int+(Table[3] or 43)  end  end  end  VC.Menu_Panel.VC_Refresh = nil  end  if VC.Menu_Panel.VC_Refresh_Panel then  if VC.Menu_SelectedPnl then VC.Menu_SelectedPnl:Remove() VC.Menu_SelectedPnl = nil end  local function HandlePanel(Table) if Table then local Pnl = VC.Add_El_List(138,29,605,SizeY-36) Pnl:SetParent(VC.Menu_Panel) Table.Panel = Pnl VC.Menu_SelectedPnl = Pnl Table[2](Pnl) end end  HandlePanel(VC.Menu_Info_Panel and VC.Menu_Info_Panel_Build or VC.Menu_Update_Panel and VC.Menu_Update_Panel_Build or VC.Menu_AdminPanelSel and Menu_Items_A[VC.Menu_AdminPanelSel_Side_A] or VC.Menu_AdminPanelSel_Side_P and Menu_Items_P[VC.Menu_AdminPanelSel_Side_P]) VC.Menu_Panel.VC_Refresh_Panel = nil  end  if VC.Menu_Panel.VC_Refresh_Side then  if VC.Menu_SelectedPnl then VC.Menu_SelectedPnl:SetVisible(false) VC.Menu_SelectedPnl = nil end  local function HandlePanel(Table) if Table then if IsValid(Table.Panel) then Table.Panel:SetVisible(true) Table.Panel:AlphaTo(0, 0, 0) Table.Panel:AlphaTo(255, 0.2, 0) VC.Menu_SelectedPnl = Table.Panel else local Pnl = VC.Add_El_List(138,29,605,SizeY-36) Pnl:AlphaTo(0, 0, 0) Pnl:AlphaTo(255, 0.2, 0) Pnl:SetParent(VC.Menu_Panel) Table.Panel = Pnl VC.Menu_SelectedPnl = Pnl Table[2](Pnl) end end end  HandlePanel(VC.Menu_Info_Panel and VC.Menu_Info_Panel_Build or VC.Menu_Update_Panel and VC.Menu_Update_Panel_Build or VC.Menu_AdminPanelSel and Menu_Items_A[VC.Menu_AdminPanelSel_Side_A] or VC.Menu_AdminPanelSel_Side_P and Menu_Items_P[VC.Menu_AdminPanelSel_Side_P]) VC.Menu_Panel.VC_Refresh_Side = nil  end  end end  concommand.Add("vc_open_menu", function(...) OpenMenu(...) end) concommand.Add("vc_menu", function(...) OpenMenu(...) end) concommand.Add("vcmod", function(...) OpenMenu(...) end) concommand.Add("vc_menu_null", function() end) local rs7 = "vc.check_msg_work_ALS_k4" 