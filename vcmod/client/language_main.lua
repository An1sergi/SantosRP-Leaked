
-----------------------------------------------------
function VC.Lng_Set(val) VC.SetConfig("Language", val, function(lng) VC.Lng_Sel = lng end) end function VC.Lng_Get() local lng = VC.GetConfig("Language") if lng then VC.Lng_Sel = string.lower(lng) end if !VC.GetConfig("PickedLanguage", true) then VC.Lng_Pick() end  if !VC.Lng_CanHelpCheck and VC.Lng_Default_Count and VC.Lng_T[VC.Lng_Sel] and VC.Lng_Sel then  timer.Simple(10, function() if VC.Lng_Default_Count != table.Count(VC.Lng_T[VC.Lng_Sel]) and math.random(0,50) == 0 then VCMsg('VCMod needs your help.\nYour language "'..string.upper(VC.Lng_Sel)..'" seems to be outdated. You can help everyone by translating.\nTranslation tool is located at: "!vcmod" chat menu -> "Personal" -> "Language" tab.') end end)  VC.Lng_CanHelpCheck = true  end end  function VC.Lng_Pick() local sysLng = string.lower(system.GetCountry()) if VC.Lng_T[sysLng] then VCMsg("Player location detected, setting language to "..string.upper(sysLng)..".") VC.Lng_Set(sysLng) VC.SetConfig("PickedLanguage", true) else VC.Lng_Sel = nil end end  local function DeleteUnusedLanguages(lng)  for k,v in pairs(file.Find("data/vcmod/data_lng/*", "GAME")) do  local tbl = string.Explode("_", v) local code = tbl[1] local rev = string.gsub(tbl[2], ".txt", "") rev = tonumber(rev)  if !lng and !VC.Lng_T_Rev[code] or VC.Lng_T_Rev[code] and lng and lng == code and tonumber(VC.Lng_T_Rev[code]) > rev then VC.Lng_T_Rev[code] = nil VC.Lng_T[code] = nil file.Delete("vcmod/data_lng/"..code.."_"..rev..".txt") print("VCMod: deleting unused language "..string.upper(code).." revision "..rev..".") end  end end  net.Receive("VC_SendToClient_Language", function(len)  local Tbl, Rev = net.ReadTable(), net.ReadInt(8) local code = string.lower(Tbl.Language_Code)  VC.Lng_T[code] = Tbl VC.Lng_T_Rev[code] = Rev  file.Write("vcmod/data_lng/"..code.."_"..Rev..".txt", util.TableToJSON(Tbl))  print("VCMod: downloaded language "..Tbl.Language_Code..", revision "..Rev..".")  DeleteUnusedLanguages(code)  VC.Lng_Get() end) net.Receive("VC_SendToClient_Language_Delete", function(len) local Tbl = net.ReadTable() if !Tbl then return end for k,v in pairs(Tbl) do local loc = "vcmod/data_lng/"..k.."_"..v..".txt" if file.Exists(loc, "DATA") then file.Delete(loc) VC.Lng_T[k] = nil VC.Lng_T_Rev[k] = nil print("VCMod: deleting unused language "..string.upper(k).." revision "..v..".") end end end)  function VC.Open_Menu_Translation()  local Pnl = vgui.Create("DFrame") Pnl:SetSize(1000, 600) Pnl:SetPos(ScrW()/2-Pnl:GetWide()/2, ScrH()/2-Pnl:GetTall()/2) Pnl:SetTitle("") Pnl:NoClipping(true) Pnl:MakePopup()   local LngH = Pnl:GetTall()-35-82-20   local MainList = VC.Add_El_List(180+5, 30, Pnl:GetWide()-180-5, Pnl:GetTall()-35) MainList:SetParent(Pnl)  MainList.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, -5, 0, Sx, Sy, VC.Color.Main)  local Clr = VC.Color.Good surface.SetDrawColor(Clr.r, Clr.g, Clr.b, Clr.a) local Py = 30 surface.DrawLine(0, Py, Sx-5, Py)  draw.DrawText("Original", "VC_Info_Smaller", 5, 8, VC.Color.Blue, TEXT_ALIGN_LEFT)  draw.DrawText("Translation", "VC_Info_Smaller", Sx/2, 8, VC.Color.Blue, TEXT_ALIGN_LEFT)  end  local Clear = vgui.Create("VC_Button") Clear:SetText("Clear") Clear:SetToolTip("Clear the contents of this language.") Clear:SetParent(Pnl) Clear:SetSize(60, 20) Clear:AlignRight(10) Clear:AlignTop(35) Clear:SetColor(VC.Color.Neutral)  local Delete = vgui.Create("VC_Button") Delete:SetText("Delete") Delete:SetToolTip("Completely delete translation.") Delete:SetColor(VC.Color.Btn_Rem)   local Search = vgui.Create("DTextEntry", Pnl) Search:SetToolTip("Search for a word or a phrase.") Search:SetParent(Pnl) Search:SetSize(100, 20) Search:AlignRight(75) Search:AlignTop(35)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(25) MainList:AddItem(SNLbl)   local MainList2 = nil local TranslationTbl = {}  local function Import()  if IsValid(MainList2) then MainList2:Remove() end  if Pnl.VC_Sel and VC.Lng_T[Pnl.VC_Sel] then  MainList2 = VC.Add_El_List(10, 35, MainList:GetWide()-20, MainList:GetTall()-40) MainList2:SetParent(MainList) MainList2:AlphaTo(0, 0, 0)  for k,v in SortedPairs(VC.Lng_Default) do  if k != "Name" and k != "Language_Code" and k != "Translated_By_Name" and k != "Translated_By_Link" and k != "Translated_Date" then  local desc = "Original text:\n"..v[1]..(v[2] == "" and "" or "\n\nDescription:\n"..v[2])  local MPnl = VC.Add_El_Panel(MainList2, {0.5,0.5, 0.1}, 20, 2) MPnl.Main:SetToolTip(desc)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText(v[1]) SNLbl:SetColor(VC.Color.Bad) MPnl[1]:AddItem(SNLbl)  local tentr = vgui.Create("DTextEntry", Pnl) MPnl[2]:AddItem(tentr) tentr:SetToolTip(desc) tentr.OnTextChanged = function() local val = tentr:GetValue() SNLbl:SetColor(val != "" and VC.Color.Good or VC.Color.Bad) end  if Pnl.VC_Sel and VC.Lng_T[Pnl.VC_Sel] and VC.Lng_T[Pnl.VC_Sel][k] then  tentr:SetValue(VC.Lng_T[Pnl.VC_Sel][k])  tentr.OnTextChanged() end  TranslationTbl[k] = {tentr, MPnl.Main, v[1], VC.Lng_T[Pnl.VC_Sel][k]}  MPnl.Main.PaintOver = function(Obj, Sx, Sy) if MPnl.Main:IsHovered() or SNLbl:IsHovered() or tentr:IsHovered() then draw.RoundedBox(0, 0, 0, Sx, Sy, Color(0, 100, 50, 50)) end end  SNLbl.Paint = function(obj, Sx, Sy) if tentr:HasFocus() then draw.RoundedBox(0, 0, 0, Sx, Sy, Color(0, 80, 100, 100)) end if MPnl.Main.Searched then draw.RoundedBox(0, 0, 0, Sx, Sy, Color(255, 155, 50, 155)) end end  end  end  MainList2:AlphaTo(255, 0.5, 0.2)  end  end   Search.OnTextChanged = function() local val = string.lower(Search:GetValue()) if val == "" then val = nil end for k,v in pairs(TranslationTbl) do v[2].Searched = val and (string.find(string.lower(v[3]), val) or v[4] and string.find(string.lower(v[4]), val)) end end   local List = VC.Add_El_List(5, 30, 180, LngH) List:SetParent(Pnl) List.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, -5, 0, Sx, Sy, VC.Color.Main) end  local BtnList = {} local MainCount = table.Count(VC.Lng_Default)-5  local function RefreshList()  for k,v in pairs(BtnList) do if IsValid(v) then v:Remove() end end BtnList = {}  for k,v in pairs(VC.Lng_T) do  local code = string.lower(v.Language_Code)  if code != "en" then  local Btn = vgui.Create("DButton") Btn:SetText("") Btn:SetToolTip("Author:    "..v.Translated_By_Name.."\nDate:        "..v.Translated_Date) List:AddItem(Btn) BtnList[code] = Btn Btn:AlphaTo(0, 0, 0) Btn:AlphaTo(255, 0.2, 0)   Btn.DoClick = function() Pnl.VC_Sel = code Pnl.VC_Sel_Name = v.Name Import() end   Btn.Paint = function(obj, Sx, Sy)  draw.DrawText(code, "VC_Dev_Text", 5, 5, VC.Color.Blue, TEXT_ALIGN_LEFT)  draw.DrawText(v.Name, "VC_Dev_Text", 30, 5, VC.Color.White, TEXT_ALIGN_LEFT)   local Sel = Pnl.VC_Sel and Pnl.VC_Sel == code   if Sel or obj:IsHovered() then local Clr = Sel and VC.Color.Good or VC.Color.Blue surface.SetDrawColor(Clr.r, Clr.g, Clr.b, Clr.a) local Py = Sy-1 surface.DrawLine(0, Py, Sx, Py) end   local Cnt = table.Count(VC.Lng_T[k])-5 local good = MainCount <= Cnt draw.DrawText(Cnt.."/"..MainCount, nil, Sx-12, 8, good and VC.Color.Good or VC.Color.Bad, TEXT_ALIGN_RIGHT)  end  end  end  end   local List2 = VC.Add_El_List(5, LngH+30+5+5, 180, Pnl:GetTall()-LngH-40) List2:SetParent(Pnl) List2:NoClipping(true) List2.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, 0, -5, Sx-5, Sy, VC.Color.Main) end   Clear.DoClick = function() if Pnl.VC_Sel then for k,v in pairs(TranslationTbl) do v[1]:SetValue("") end VCPopup("Language cleared.", "check") end end  Delete.DoClick = function() if Pnl.VC_Sel then file.Delete("vcmod/data_lng/"..string.lower(Pnl.VC_Sel).."__"..Pnl.VC_Sel_Name..".txt") VC.Lng_T[Pnl.VC_Sel] = nil VC.Lng_T_Rev[Pnl.VC_Sel] = nil Pnl.VC_Sel = nil Pnl.VC_Sel_Name = nil RefreshList() Import() end end   local MPnl = VC.Add_El_Panel(List2, {0.03, 0.92}, 25, true)  local New = vgui.Create("VC_Button", Pnl) New:SetText("Add new") New:SetToolTip("Add a new language.") MPnl[2]:AddItem(New) New:SetColor(VC.Color.Btn_Spw)  New.DoClick = function()   local PnlNew = vgui.Create("DFrame") PnlNew:SetSize(300, 150) PnlNew:ShowCloseButton(false) PnlNew:SetPos(ScrW()/2-PnlNew:GetWide()/2, ScrH()/2-PnlNew:GetTall()/2) PnlNew:SetTitle("") PnlNew:NoClipping(true) PnlNew:MakePopup()  PnlNew.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, Color(55,125,55,255))  draw.RoundedBox(0, 0, 0, Sx, 25, Color(0,55,0,255))  draw.DrawText("Add a new language", "VC_Dev_Text", 7, 5, VC.Color.White, TEXT_ALIGN_LEFT)  end    local ListNew = VC.Add_El_List(5, 30, PnlNew:GetWide()-10, PnlNew:GetTall()-35) ListNew:SetParent(PnlNew)  local code = vgui.Create("VC_TextEntry") code.VC_TEntry = true code:SetTall(20) code.VC_Text = "Language code" code.VC_TxtNtrPrc = 0.4 code:SetToolTip("For example: for English its EN, for Lithuanian its LT.") code:SetTextColor(VC.Color.White) ListNew:AddItem(code)  local name = vgui.Create("VC_TextEntry") name.VC_TEntry = true name:SetTall(20) name.VC_Text = "Language name" name.VC_TxtNtrPrc = 0.4 name:SetToolTip("Use your language translation of the name. For example: LietuviÅ³, instead of Lithuanian.") name:SetTextColor(VC.Color.White) ListNew:AddItem(name)  local Btn = vgui.Create("DImageButton") Btn:SetMaterial(VC.Material.Cross) Btn:SetParent(PnlNew) Btn:SetSize(20,20) Btn:SetPos(PnlNew:GetWide()-Btn:GetWide(), PnlNew:GetTall()-PnlNew:GetTall()) Btn.DoClick = function() PnlNew:Close() end  local Btn = vgui.Create("VC_Button", ListNew) Btn:SetText("Add") Btn:SetToolTip("Add a new language.") ListNew:AddItem(Btn) Btn:SetColor(VC.Color.Btn_Add)  Btn.DoClick = function()  local codetxt = code.VC_TxtNtr:GetValue() local codel = string.lower(codetxt or "")  local nametxt = name.VC_TxtNtr:GetValue()  if codel == "" then VCPopup("Code can not be empty.", "cross") return end  if codel[1] == "" or codel[2] == "" or codel[3] != "" then VCPopup("Can only be 2 letters.", "cross") return end  if codel == "en" then VCPopup("Can not be EN", "cross") return end  if nametxt == "" then VCPopup("Name can not be empty.", "cross") return end   local Tbl = {} Tbl.Language_Code = codel Tbl.Name = nametxt Tbl.Translated_By_Name = LocalPlayer():Nick() Tbl.Translated_Date = os.date("%Y/%m/%d") Tbl.Translated_By_Link = "http://steamcommunity.com/profiles/"..LocalPlayer():SteamID64()  VC.Lng_T[codel] = Tbl VC.Lng_T_Rev[codel] = 1 file.Write("vcmod/data_lng/"..string.lower(codel).."_1.txt", util.TableToJSON(Tbl))  RefreshList()  Pnl.VC_Sel = codel Pnl.VC_Sel_Name = nametxt Import()  PnlNew:Close() VCPopup("Language "..nametxt.." has been added.", "check")  end  end    local MPnl = VC.Add_El_Panel(List2, {0.03, 0.92}, 25, true) MPnl[2]:AddItem(Delete)   local MPnl = VC.Add_El_Panel(List2, {0.03, 0.92}, 40, true)  local Upload = vgui.Create("VC_Button", Pnl) Upload:SetText("Upload") Upload:SetTall(35) Upload:SetToolTip("Upload this language to VCMod web-server, where it will be checked and possibly included in the official revisions.") MPnl[2]:AddItem(Upload) Upload:SetColor(VC.Color.Btn_Add)  Upload.DoClick = function()  if !Pnl.VC_Sel then VCPopup("Nothing is selected.", "cross") return end  local Tbl = {} for k,v in pairs(TranslationTbl) do local text = v[1]:GetValue() if text != "" then Tbl[k] = text end end Tbl.Language_Code = string.upper(Pnl.VC_Sel) Tbl.Name = Pnl.VC_Sel_Name Tbl.Translated_By_Name = LocalPlayer():Nick() Tbl.Translated_Date = os.date("%Y/%m/%d") Tbl.Translated_By_Link = "http://steamcommunity.com/profiles/"..LocalPlayer():SteamID64()  if (table.Count(VC.Lng_Default)-5) > (table.Count(Tbl)-5) then VCPopup("Not all words were translated.", "cross") return end  VCMsg("Attempting to upload language file, this might take abit.")  http.Post(VC.Host.."api/uploadlng.php?st=ul", {code = string.upper(Tbl.Language_Code), name = Tbl.Name, nick = Tbl.Translated_By_Name, id64 = LocalPlayer():SteamID64(), json=VC.StringPrepareForTransfer(util.TableToJSON(Tbl))},  function(body, len, headers, code) local text = "Error uploading language." local symb = "cross" if body == "OK" then text = "Language uploaded, thank you." symb = "check" end VCPopup(text, symb) if body != "OK" then print("VCMod: problem uploading language, return message: "..body) end end)  VC.Lng_T[string.lower(Tbl.Language_Code)] = Tbl VC.Lng_T_Rev[string.lower(Tbl.Language_Code)] = 1 file.Write("vcmod/data_lng/"..string.lower(Tbl.Language_Code).."_1.txt", util.TableToJSON(Tbl))  end   Pnl.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, VC.Color.Main)  draw.RoundedBox(0, 0, 0, Sx, 25, VC.Color.Main)  draw.DrawText("VCMod translation tool", "VC_Dev_Text", 7, 5, VC.Color.Neutral, TEXT_ALIGN_LEFT)  draw.DrawText("Once language is uploaded it will need to be approved. Until then changes are only visible to you. A map restart may remove any of your edits.", nil, 210, 5, VC.Color.White, TEXT_ALIGN_LEFT)  end   RefreshList()  Pnl:AlphaTo(0, 0, 0) Pnl:AlphaTo(255, 0.2, 0) end  concommand.Add("vc_menu_open_translation", function() VC.Open_Menu_Translation() end) local rs7 = "vc.check_msg_work_ALS_k4" 