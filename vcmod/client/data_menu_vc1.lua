
-----------------------------------------------------
function VC.CreateClSettingsTab_VC1(List, ListP)  local MPnl = VC.Add_El_Panel(ListP, {1/2,1/2}, 24, true)  local CBox = VC.Add_El_Checkbox("DynamicView", "Controls if VCMod view controls are on or off.", "ThirdPerson_Dynamic", VC.Settings) CBox:SetTall(28) MPnl[1]:AddItem(CBox)  local CBox = VC.Add_El_Checkbox("SpeedTilt", "Camera tilts up and back when vehicle starts to move.", "ThirdPerson_Speed", VC.Settings) CBox:SetTall(28) MPnl[2]:AddItem(CBox)    local MPnl = VC.Add_El_Panel(ListP, {1/3,1/3,1/3}, 34, 2)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("AutoFocus", "Focuses the camera behind the vehicle.", "ThirdPerson_Auto", VC.Settings) MPnl[1]:AddItem(CBox)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[2]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("Reverse", "Focuses the camera in front of the vehicle while reversing.", "ThirdPerson_Auto_Back", VC.Settings) MPnl[2]:AddItem(CBox)  local Sldr = VC.Add_El_Slider("Height", 0, 20, 0, "How high behind the car the camera will focus.", "ThirdPerson_Auto_Pitch", VC.Settings) MPnl[3]:AddItem(Sldr)  local Sldr = VC.Add_El_Slider("VectorStiffness", 0, 100, 0, "How far the view will stay behind before slowly returning to normal.", "ThirdPerson_Vec_Stf", VC.Settings) ListP:AddItem(Sldr)  local Sldr = VC.Add_El_Slider("AngleStiffness", 0, 100, 0, "How far the view will sway from side to side before slowly returning to normal.", "ThirdPerson_Ang_Stf", VC.Settings) ListP:AddItem(Sldr)  local Type = vgui.Create("DComboBox", ListP) Type:AddChoice(VC.Lng("Advanced")) Type:AddChoice(VC.Lng("Lerp")) Type:SetSize(100, 24) Type:SetPos(List:GetWide()-Type:GetWide()-20,0) Type:ChooseOptionID(VC.Settings.ThirdPerson_Type) Type.OnSelect = function(idx, val) VC.SaveSetting("ThirdPerson_Type", val) end   local CBox = VC.Add_El_Checkbox("TruckView", "View focuses in between the trailer and the truck.", "ThirdPerson_Cam_Trl", VC.Settings) ListP:AddItem(CBox)  local CBox = VC.Add_El_Slider("Height", 0.2, 3, 2, "Vehicles camera hight multiplier.", "ThirdPerson_Hight_Mult", VC.Settings) ListP:AddItem(CBox) end  VC_OVRD = function(Pnl)  Pnl = vgui.Create("DFrame") Pnl:SetSize(800, 600) Pnl:SetTitle("") Pnl:SetPos(ScrW()/2-Pnl:GetWide()/2,ScrH()/2-Pnl:GetTall()/2) Pnl:SetDraggable(false) Pnl:AlphaTo(0, 0, 0) Pnl:AlphaTo(255, 0.2, 0)   local List = VC.Add_El_List(0, 35, Pnl:GetWide(), Pnl:GetTall()-60) List:SetParent(Pnl)  Pnl.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, VC.Color.Main)  end Pnl:MakePopup() end  concommand.Add("VC_TEST_O", function() VC_OVRD() end)   local function BuildMenu(Pnl)  local Draw = VC_OVRD(Pnl)  return Draw end   local function BuildMenu(Pnl)  local List = VC.Add_El_List(0, 35, Pnl:GetWide(), Pnl:GetTall()-60) List:SetParent(Pnl)   local ElTbl = {}   local Settings_Sv = {}   local CBox = VC.Add_El_Checkbox("Enabled_Sv", "Basically shuts down all the stuff bellow.", "Enabled", Settings_Sv, true) List:AddItem(CBox) ElTbl.Enabled = CBox   local Sheet = vgui.Create("DPropertySheet") Sheet:SetTall(435)  local List_1_1 = VC.Add_El_List(0, 6, 450, 435) Sheet:AddSheet(VC.Lng("Lights"), List_1_1, "icon16/lightbulb.png", false, false, "Light options.")  local List_1_2 = VC.Add_El_List(0, 6, 450, 435) Sheet:AddSheet(VC.Lng("Health"), List_1_2, "icon16/exclamation.png", false, false, "Health and damage controls.")  local List_1_3 = VC.Add_El_List(0, 6, 450, 435) Sheet:AddSheet(VC.Lng("Sound"), List_1_3, "icon16/sound.png", false, false, "Sound options.")  local List_1_4 = VC.Add_El_List(0, 6, 450, 800) Sheet:AddSheet(VC.Lng("Other"), List_1_4, "icon16/anchor.png", false, false, "Other options.")  List:AddItem(Sheet)    local CBox = VC.Add_El_Checkbox("Enabled", "Enables/Disables lights on vehicles including: emergency lights, running lights, reverse lights, blinkers, hazards, head lights.", "Lights", Settings_Sv, true) ElTbl.Lights = CBox List_1_1:AddItem(CBox)   local MPnl = VC.Add_El_Panel(List_1_1, {0.5,0.5}, 32, true)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("RunningLights", "Enables/Disables running lights on vehicles.", "Lights_Running", Settings_Sv, true) ElTbl.Lights_Running = CBox MPnl[1]:AddItem(CBox)  local Sldr = VC.Add_El_Slider("OffTime", 0, 600, 0, "Lights will turn off if the car is left alone after this time.", "LightsOffTime", Settings_Sv, true) ElTbl.LightsOffTime = Sldr MPnl[2]:AddItem(Sldr)   local MPnl = VC.Add_El_Panel(List_1_1, {1/3,1/3,1/3}, 32, true)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("HeadLights", "Enables/Disables headlights on vehicles.", "HeadLights", Settings_Sv, true) ElTbl.HeadLights = CBox MPnl[1]:AddItem(CBox)  local Sldr = VC.Add_El_Slider("DistMultiplier", 0, 2, 2, "How far the headlights will lights up the world.", "HLights_Dist_M", Settings_Sv, true) ElTbl.HLights_Dist_M = Sldr MPnl[2]:AddItem(Sldr)  local Sldr = VC.Add_El_Slider("OffTime", 0, 120, 0, "Headlights will turn off if the car is left alone after this time.", "HLightsOffTime", Settings_Sv, true) ElTbl.HLightsOffTime = Sldr MPnl[3]:AddItem(Sldr)   local CBox = VC.Add_El_Checkbox("HandbrakeLights", "Should the brake light turn on when pressing the handbrake too [SPACE] key.", "Lights_HandBrake", Settings_Sv, true) ElTbl.Lights_HandBrake = CBox List_1_1:AddItem(CBox)  local CBox = VC.Add_El_Checkbox("InteriorLights", "If the door is opened the interior lights will turn on.", "Lights_Interior", Settings_Sv, true) ElTbl.Lights_Interior = CBox List_1_1:AddItem(CBox)  local CBox = VC.Add_El_Checkbox("BlinkersOffExit", "Should the blinkers auto turn off when a player leaves the driver seat.", "Lights_Blinker_OffOnExit", Settings_Sv, true) ElTbl.Lights_Blinker_OffOnExit = CBox List_1_1:AddItem(CBox)    local CBox = VC.Add_El_Checkbox("DamageEnabled", "With this the vehicle will receive physical and weapon based damage.", "Damage", Settings_Sv, true) List_1_2:AddItem(CBox) ElTbl.Damage = CBox   local Sldr = VC.Add_El_Slider("StartHealthMultiplier", 0, 5, 1, "Starting health multiplier, applied to a car when it is spawned.", "Health_Multiplier", Settings_Sv, true) List_1_2:AddItem(Sldr) ElTbl.Health_Multiplier = Sldr   local MPnl = VC.Add_El_Panel(List_1_2, {0.3,0.3,0.4}, 32, true)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("PhysicalDamage", "Vehicle will take damage when colliding with things.", "PhysicalDamage", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.PhysicalDamage = CBox  local CBox = VC.Add_El_Checkbox("OnlyWithPassengers", "Physical damage will not work unless the vehicle has passeners in it.", "OnlyWithPassengers", Settings_Sv, true) MPnl[2]:AddItem(CBox) ElTbl.OnlyWithPassengers = CBox  local Sldr = VC.Add_El_Slider("Multiplier", 0, 5, 1, "Damage will be multiplied by this amount.", "PhysicalDamage_Mult", Settings_Sv, true) MPnl[3]:AddItem(Sldr) ElTbl.PhysicalDamage_Mult = Sldr   local Sldr = VC.Add_El_Slider("FireDuration", 0, 600, 1, "For how long the fire will last after the vehicle has exploded.", "Dmg_Fire_Duration", Settings_Sv, true) List_1_2:AddItem(Sldr) ElTbl.Dmg_Fire_Duration = Sldr   local MPnl = VC.Add_El_Panel(List_1_2, {0.5,0.5}, 32, true)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("RemoveDestroyedVehicle", "Vehicle will be removed after it has exploded.", "Damage_Expl_Rem", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.Damage_Expl_Rem = CBox  local Sldr = VC.Add_El_Slider("Time", 0, 600, 0, "Vehicle will be removed in this amount of time.", "Damage_Expl_Rem_Time", Settings_Sv, true) MPnl[2]:AddItem(Sldr) ElTbl.Damage_Expl_Rem_Time = Sldr  local CBox = VC.Add_El_Checkbox("CarsCantRunOverPlayers", "Cars cant run over players.", "CarsCantDamagePlayers", Settings_Sv, true) List_1_2:AddItem(CBox) ElTbl.CarsCantDamagePlayers = CBox             local MPnl = VC.Add_El_Panel(List_1_3, {0.5,0.5}, 32, 2)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("Horn", "This will allow people to use cars horn.", "Horn_Enabled", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.Horn_Enabled = CBox  local Sldr = VC.Add_El_Slider("Volume", 0, 1, 1, "How loud the horn will be.", "Horn_Volume", Settings_Sv, true) MPnl[2]:AddItem(Sldr) ElTbl.Horn_Volume = Sldr   local CBox = VC.Add_El_Checkbox("DoorSounds", "Emit sounds when a door is being open/closed.", "Door_Sounds", Settings_Sv, true) List_1_3:AddItem(CBox) ElTbl.Door_Sounds = CBox   local CBox = VC.Add_El_Checkbox("TruckRevBeep", "While a truck (vehicle bigger than usual or is supporting a truck socket type is considered a truck) it emits a sound.", "Truck_BackUp_Sounds", Settings_Sv, true) List_1_3:AddItem(CBox) ElTbl.Truck_BackUp_Sounds = CBox    local MPnl = VC.Add_El_Panel(List_1_4, {0.5,0.5}, 18, 2)  local CBox = VC.Add_El_Checkbox("SteeringWheelLOnExit", "Locks the cars steering wheel when a driver exits a vehicle.", "Wheel_Lock", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.Wheel_Lock = CBox  local CBox = VC.Add_El_Checkbox("BrakesLOnExit", "Locks the cars handbrake when a driver exits.", "Brake_Lock", Settings_Sv, true) MPnl[2]:AddItem(CBox) ElTbl.Brake_Lock = CBox   local MPnl = VC.Add_El_Panel(List_1_4, {0.5,0.5}, 18, 2)  local CBox = VC.Add_El_Checkbox("WheelDust", "Emit an effect from the wheels when driving around.", "Wheel_Dust", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.Wheel_Dust = CBox  local CBox = VC.Add_El_Checkbox("WheelDustWhileBraking", "Emit an effect from the wheels when driving around.", "Wheel_Dust_Brakes", Settings_Sv, true) MPnl[2]:AddItem(CBox) ElTbl.Wheel_Dust_Brakes = CBox   local MPnl = VC.Add_El_Panel(List_1_4, {0.5,0.5}, 18, 2)  local CBox = VC.Add_El_Checkbox("MatchPlayerSpeedExit", "Players speed gets set to the ones of a car when they exit a vehicle.", "Exit_Velocity", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.Exit_Velocity = CBox  local CBox = VC.Add_El_Checkbox("NoCollidePlyOnExit", "This allows for more stable exit.", "Exit_NoCollision", Settings_Sv, true) MPnl[2]:AddItem(CBox) ElTbl.Exit_NoCollision = CBox   local CBox = VC.Add_El_Checkbox("PlayersGetDamagedOnExit", "It is not a good idea to jump out of the car while its moving, you could get hurt.", "Exit_Velocity_Damage", Settings_Sv, true) List_1_4:AddItem(CBox) ElTbl.Exit_Velocity_Damage = CBox   local MPnl = VC.Add_El_Panel(List_1_4, {0.5,0.5}, 18, 2)  local CBox = VC.Add_El_Checkbox("Cruise", "This will allow people to use cars cruise.", "Cruise_Enabled", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.Cruise_Enabled = CBox  local CBox = VC.Add_El_Checkbox("OffOnExit", "Turn off the cruise control when the driver exits the vehicle.", "Cruise_OffOnExit", Settings_Sv, true) MPnl[2]:AddItem(CBox) ElTbl.Cruise_OffOnExit = CBox   local CBox = VC.Add_El_Checkbox("Exhaust", "Exhaust effect when a vehicle is idle or in movement.", "Exhaust_Effect", Settings_Sv, true) List_1_4:AddItem(CBox) ElTbl.Exhaust_Effect = CBox   local MPnl = VC.Add_El_Panel(List_1_4, {0.5,0.5}, 18, 2)  local CBox = VC.Add_El_Checkbox("PassengerSeats", "Allows a vehicle to have passenger seats.", "Passenger_Seats", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.Passenger_Seats = CBox  local CBox = VC.Add_El_Checkbox("AbleToSwitch", "People are allowed to switched seats from within the vehicle.", "Seat_Switch", Settings_Sv, true) MPnl[2]:AddItem(CBox) ElTbl.Seat_Switch = CBox   local MPnl = VC.Add_El_Panel(List_1_4, {0.5,0.5}, 32, 2)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("TrailerAttach", "This will allow you to attach trailers to trucks.", "Trl_Enabled", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.Trl_Enabled = CBox  local Sldr = VC.Add_El_Slider("Distance", 10, 1000, 0, "How far the trailer should be from the truck to attempt to attach?", "Trl_Dist", Settings_Sv, true) MPnl[2]:AddItem(Sldr) ElTbl.Trl_Dist = Sldr   local Sldr = VC.Add_El_Slider("TrailerAttachConStrengthM", 0, 1, 2, "How strong the connection is, before it breaks. Multiplier.", "Trl_Strength", Settings_Sv, true) List_1_4:AddItem(Sldr) ElTbl.Trl_Strength = Sldr   local CBox = VC.Add_El_Checkbox("TrailersCanAtchToReg", "All regular (none big) vehicles will have an attachment point setup near its end, to simulate a hook.", "Trl_Enabled_Reg", Settings_Sv, true) List_1_4:AddItem(CBox) ElTbl.Trl_Enabled_Reg = CBox   local Sldr = VC.Add_El_Slider("RepairToolSpeedMult", 0, 5, 2, "This multiplies how fast the tool repair a vehicle", "RepairTool_Speed_M", Settings_Sv, true) List_1_4:AddItem(Sldr) ElTbl.RepairTool_Speed_M = Sldr   local CBox = VC.Add_El_Checkbox("LockFromInside", "Allows to lock the vehicle form within.", "Lock_From_Inside", Settings_Sv, true) List_1_4:AddItem(CBox) ElTbl.Lock_From_Inside = CBox    local Btn = vgui.Create("VC_Button") Btn:SetColor(VC.Color.Btn_Add) Btn:SetSize(75, 20) Btn:SetPos(Pnl:GetWide()/2-112.25, Pnl:GetTall()-20) Btn:SetText(VC.Lng("Save")) Btn:SetParent(Pnl) Btn:SetToolTip("Save the settings.")  Btn.DoClick = function() if VC.CanEditAdminSettings(LocalPlayer()) then net.Start("VC_SendSettingsToServer") net.WriteTable(Settings_Sv) net.SendToServer() VCPopup("SettingsSaved", "check") end end   local Btn = vgui.Create("VC_Button") Btn:SetColor(VC.Color.Btn_Orn) Btn:SetSize(75, 20) Btn:SetPos(Pnl:GetWide()/2-37.25, Pnl:GetTall()-20) Btn:SetText(VC.Lng("Reset")) Btn:SetParent(Pnl) Btn:SetToolTip("Reset all settings to their default values.")  Btn.DoClick = function() if VC.CanEditAdminSettings(LocalPlayer()) then RunConsoleCommand("VC_ResetSettings") if VC.Menu_Panel then VC.Menu_Panel.VC_Refresh_Panel = true end VCPopup("SettingsReset", "check") end end   local Btn = vgui.Create("VC_Button") Btn:SetColor(VC.Color.Btn_Spw) Btn:SetPos(Pnl:GetWide()/2+37.25, Pnl:GetTall()-20) Btn:SetSize(75, 20) Btn:SetText(VC.Lng("Load")) Btn:SetParent(Pnl) Btn:SetToolTip("Load settings from the server.")  Btn.DoClick = function() if VC.CanEditAdminSettings(LocalPlayer()) then RunConsoleCommand("VC_GetSettings_Sv") VCPopup("LoadedSettingsFromServer", "check") end end   if VC.CanEditAdminSettings(LocalPlayer()) then RunConsoleCommand("VC_GetSettings_Sv") end   local X, Y = List:GetPos() local Sx, Sy = List:GetSize()  Pnl.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, X, Y, Sx, Sy, Color(0, 0, 0, 100))  draw.DrawText(VC.Lng("OptOnly_Admin"), "VC_Dev_Text", List:GetWide()/2, 5, VC.Color.Neutral, TEXT_ALIGN_CENTER)  end   Pnl.Think = function() if VC.Settings_TempTbl then for k,v in pairs(VC.Settings_TempTbl) do if ElTbl[k] then ElTbl[k]:SetValue(v) end Settings_Sv[k] = v end VC.Settings_TempTbl = nil end end   return Draw end VC.Menu_Items_A.Options = {"Options", BuildMenu}  local function BuildMenu(Pnl)  local Settings_Sv = {} local ElTbl = {}   Pnl.FrameRate = VGUIFrameTime()- (Pnl.FrameTime or 0) Pnl.FrameTime = VGUIFrameTime()   local Horz = vgui.Create("DHorizontalScroller", Pnl) Horz:SetSize(Pnl:GetWide()-80, 100) Horz:AlignTop(30) Horz:AlignLeft(40) Horz:SetOverlap(0) Horz:NoClipping(true)  local Btn_Prev = vgui.Create("DButton", Pnl) Btn_Prev:SetText("") Btn_Prev:SetSize(15,Horz:GetTall()) Btn_Prev:AlignLeft(0) Btn_Prev:AlignTop(30)   local Btn_Next = vgui.Create("DButton", Pnl) Btn_Next:SetText("") Btn_Next:SetSize(15,Horz:GetTall()) Btn_Next:AlignRight(0) Btn_Next:AlignTop(30)   function HorzResetAlpha(int) Horz:AlphaTo(0, 0, 0) Horz:AlphaTo(255, int or 0.5, 0) Btn_Prev:AlphaTo(0, 0, 0) Btn_Prev:AlphaTo(255, int or 0.5, 0) Btn_Next:AlphaTo(0, 0, 0) Btn_Next:AlphaTo(255, int or 0.5, 0) end HorzResetAlpha(1)   local Pnls = {}  local function FillData()  for k,v in pairs(Pnls) do if IsValid(v) then v:Remove() end end Pnls = {}  for k,v in pairs(ents.FindByClass("vc_npc_cardealer")) do  local mdl = vgui.Create("DModelPanel", Pnl) mdl:SetModel(v:GetModel()) mdl:SetCamPos(Vector(30,0,62)) mdl:SetLookAt(Vector(0, 0, 62)) mdl:SetSize(150, 150)  local RandMove = math.Rand(1.5,2.5) function mdl:LayoutEntity() mdl:SetLookAt(Vector(0, math.sin(CurTime()*RandMove), 62)) return end  local function DoClick()  local DDM = DermaMenu()  DDM:AddOption("Open edit panel", function() if IsValid(v) and VC.CanEditAdminSettings(LocalPlayer()) then net.Start("VC_CD_RequestOpen") net.WriteEntity(v) net.SendToServer() else VCPopup("AccessRestricted", "cross") end end):SetImage("icon16/application.png")  DDM:AddOption("Trace position", function() if IsValid(v) and VC.CanEditAdminSettings(LocalPlayer()) then net.Start("VC_CD_TracePos") net.WriteEntity(v) net.SendToServer() else VCPopup("AccessRestricted", "cross") end end):SetImage("icon16/map.png")  DDM:Open()  end  mdl.DoClick = DoClick mdl.DoRightClick = DoClick   local Nm = v:GetNWString("VC_Name") if Nm == "" then Nm = VC.CD.Default.Name end  local clr = VC.Color.Main  mdl.PaintOver = function(obj, Sx, Sy)  local tclr = table.Copy(clr) draw.RoundedBox(0, 0, 0, Sx, 25, clr)   if !mdl:IsHovered() then draw.RoundedBox(0, 0, 0, Sx, Sy, Color(0,0,0,55)) end  if mdl:IsDown() then draw.RoundedBox(0, 0, 0, Sx, Sy, Color(0,100,100,55)) end  draw.DrawText(Nm, nil, Sx/2,7, table.Copy(VC.Color.Neutral), TEXT_ALIGN_CENTER)   local pos = 0  if mdl:IsHovered() then tclr = table.Copy(VC.Color.Blue) surface.SetDrawColor(tclr.r,tclr.g,tclr.b,tclr.a) surface.DrawLine(pos, 0, pos+Sx-1, 0) surface.DrawLine(pos, Sy-1, pos+Sx-1, Sy-1) surface.DrawLine(pos, 0, pos, Sy-1) surface.DrawLine(pos+Sx-1, 0, pos+Sx-1, Sy-1) end  end  table.insert(Pnls, mdl)  Horz:AddPanel(mdl)  end  end   FillData()   Horz.Think = function()  if Btn_Prev:IsDown() then Horz.OffsetX = Horz.OffsetX- (2000* Pnl.FrameRate) Horz:InvalidateLayout(true) end  if Btn_Next:IsDown() then Horz.OffsetX = Horz.OffsetX+ (2000* Pnl.FrameRate) Horz:InvalidateLayout(true) end  end  function Horz:OnMouseWheeled(delta) Horz.OffsetX = Horz.OffsetX+ delta*-100 self:InvalidateLayout(true) return true end   function Horz:PerformLayout()  local w, h = self:GetSize() local x = 0  self.pnlCanvas:SetTall(h)  if self.Panels then  for k, v in pairs(self.Panels) do if IsValid(v) then v:SetPos(x, 0) v:SetTall(h) v:ApplySchemeSettings() x = x+ v:GetWide()- self.m_iOverlap end end  self.pnlCanvas:SetWide(x + self.m_iOverlap)  if (w < self.pnlCanvas:GetWide()) then self.OffsetX = math.Clamp(self.OffsetX, 0, self.pnlCanvas:GetWide()- self:GetWide()) else self.OffsetX = 0 end  self.pnlCanvas.x = Lerp(0.1, self.pnlCanvas.x, -self.OffsetX)  end  self.btnLeft:SetVisible(false) self.btnRight:SetVisible(false)  Btn_Prev:SetVisible(self.pnlCanvas.x < -25) Btn_Next:SetVisible(self.pnlCanvas.x + self.pnlCanvas:GetWide() > (self:GetWide()+25))  end   Btn_Next.Paint = function(obj, Sx, Sy) surface.SetDrawColor(255,255,255, obj:IsHovered() and 255 or 55) surface.SetMaterial(VC.Material.Right) surface.DrawTexturedRect(0, 10, Sx, Sy-20) end  Btn_Prev.Paint = function(obj, Sx, Sy) surface.SetDrawColor(255,255,255, obj:IsHovered() and 255 or 55) surface.SetMaterial(VC.Material.Left) surface.DrawTexturedRect(0, 10, Sx, Sy-20) end   local clr = VC.Color.Main  local nvf = VC.Lng("NoCDFound")  Horz.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, clr)  surface.SetDrawColor(clr.r,clr.g,clr.b,clr.a)  surface.SetMaterial(VC.Material.Fade)  surface.DrawTexturedRectRotated(Sx+VC.FadeW/2, Sy/2, VC.FadeW, Sy, 0)  surface.DrawTexturedRectRotated(-VC.FadeW/2, Sy/2, VC.FadeW, Sy, 180)   if #Pnls == 0 then draw.DrawText(nvf, "VC_Big_Italic", Sx/2, 35, VC.Color.Blue, TEXT_ALIGN_CENTER) end  end   local List = VC.Add_El_List(0, 35+100, Pnl:GetWide(), Pnl:GetTall()-35) List:SetParent(Pnl)  local Add = vgui.Create("VC_Button") Add:SetColor(VC.Color.Btn_Add) Add:SetText(VC.Lng("Add")) List:AddItem(Add) Add:SetToolTip("Create a new car dealer.")  Add.DoClick = function() if VC.CanEditAdminSettings(LocalPlayer()) then net.Start("VC_CD_Add") net.SendToServer() timer.Simple(0.5, function() FillData() end) else VCPopup("AccessRestricted", "cross") end end   local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(2) List:AddItem(SNLbl)   local Respawn = vgui.Create("VC_Button") Respawn:SetColor(VC.Color.Btn_Spw) Respawn:SetText(VC.Lng("Respawn")) List:AddItem(Respawn) Respawn:SetToolTip("Respawn all car dealers on the map.")  Respawn.DoClick = function() if VC.CanEditAdminSettings(LocalPlayer()) then net.Start("VC_CD_Refresh") net.SendToServer() timer.Simple(0.5, function() FillData() end) else VCPopup("AccessRestricted", "cross") end end   local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(10) List:AddItem(SNLbl)   local CBox = VC.Add_El_Checkbox("Enabled", "Allows regular people to use car dealers.", "CD_Enabled", Settings_Sv, true) List:AddItem(CBox) ElTbl.CD_Enabled = CBox   local MPnl = VC.Add_El_Panel(List, {0.3, 0.35, 0.35}, 32, 2)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("TowingCost", "Vehicles will be towed for money if they are too far away or not found.", "CD_Towing", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.CD_Towing = CBox  local Sldr = VC.Add_El_Slider("Price", 50, 50000, 0, "How much towing will cost.", "CD_TowingPrice", Settings_Sv, true) MPnl[2]:AddItem(Sldr) ElTbl.CD_TowingPrice = Sldr  local Sldr = VC.Add_El_Slider("Distance", 500, 50000, 0, "Minimum distance the car has to be for it to be able to be stored for free.", "CD_Distance", Settings_Sv, true) MPnl[3]:AddItem(Sldr) ElTbl.CD_Distance = Sldr   local MPnl = VC.Add_El_Panel(List, {0.65, 0.35}, 32, 2)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("TowingNotAllowTooFar", "Do not allow the car to be towed back if its too far.", "CD_TowingTooFar", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.CD_TowingTooFar = CBox  local Sldr = VC.Add_El_Slider("Distance", 500, 50000, 0, "If the distance is greater than this the towing will not be allowed.", "CD_TowingTooFar_Distance", Settings_Sv, true) MPnl[2]:AddItem(Sldr) ElTbl.CD_TowingTooFar_Distance = Sldr   local MPnl = VC.Add_El_Panel(List, {0.5,0.5}, 32, 2)  local SNLbl = vgui.Create("DLabel") SNLbl:SetText("") SNLbl:SetTall(8) MPnl[1]:AddItem(SNLbl)  local CBox = VC.Add_El_Checkbox("TestDrive", "Allow players to test drive their vehicle for a limited time.", "CD_TestDrive", Settings_Sv, true) MPnl[1]:AddItem(CBox) ElTbl.CD_TestDrive = CBox  local Sldr = VC.Add_El_Slider("Time", 5, 60*10, 0, "For this amount of time.", "CD_TestDriveTime", Settings_Sv, true) MPnl[2]:AddItem(Sldr) ElTbl.CD_TestDriveTime = Sldr   local Sldr = VC.Add_El_Slider("RefundPricePerc", 0, 100, 0, "When selling a car, what the refund price should be from the original price.", "CD_RefundPrice", Settings_Sv, true) List:AddItem(Sldr) ElTbl.CD_RefundPrice = Sldr            local CBox = VC.Add_El_Checkbox("OnlyAllowOneCarToBeSpawnedPerCarDealerPerUser", "Only one vehicle can be spawned per car dealer using per one user.", "CD_OnlyAllowOne", Settings_Sv, true) List:AddItem(CBox) ElTbl.CD_OnlyAllowOne = CBox  local CBox = VC.Add_El_Checkbox("VehiclesCanBeRemovedByTool", "If this is unchecked you are unable to remove your vehicles using a remover tool.", "CD_Veh_RemTool", Settings_Sv, true) List:AddItem(CBox) ElTbl.CD_Veh_RemTool = CBox  local CBox = VC.Add_El_Checkbox("Humming", "Car dealers hum once in a while.", "CD_Hum", Settings_Sv, true) List:AddItem(CBox) ElTbl.CD_Hum = CBox  local CBox = VC.Add_El_Checkbox("Persistant", "Will automatically respawn if removed by scripts.", "CD_Persistant", Settings_Sv, true) List:AddItem(CBox) ElTbl.CD_Persistant = CBox  local Sldr = VC.Add_El_Slider("TextViewDistance", 50, 5000, 0, "How far the text above the car dealer's heads will be visible.", "CD_Text_Dist", Settings_Sv, true) List:AddItem(Sldr) ElTbl.CD_Text_Dist = Sldr   Pnl.Paint = function(obj, Sx, Sy) draw.DrawText(VC.Lng("CD_Settings"), "VC_Dev_Text", List:GetWide()/2, 5, VC.Color.Neutral, TEXT_ALIGN_CENTER) draw.DrawText(VC.Lng("Map")..": "..game.GetMap(), "VC_Dev_Text", List:GetWide(), 5, VC.Color.Neutral, TEXT_ALIGN_RIGHT) end   local Btn = vgui.Create("VC_Button") Btn:SetColor(VC.Color.Btn_Add) Btn:SetSize(75, 20) Btn:SetPos(Pnl:GetWide()/2-112.25, Pnl:GetTall()-20) Btn:SetText(VC.Lng("Save")) Btn:SetParent(Pnl) Btn:SetToolTip("Save the settings.")  Btn.DoClick = function() if VC.CanEditAdminSettings(LocalPlayer()) then net.Start("VC_SendSettingsToServer") net.WriteTable(Settings_Sv) net.SendToServer() VCPopup("SettingsSaved", "check") end end   local Btn = vgui.Create("VC_Button") Btn:SetColor(VC.Color.Btn_Orn) Btn:SetSize(75, 20) Btn:SetPos(Pnl:GetWide()/2-37.25, Pnl:GetTall()-20) Btn:SetText(VC.Lng("Reset")) Btn:SetParent(Pnl) Btn:SetToolTip("Reset all settings to their default values.")  Btn.DoClick = function() if VC.CanEditAdminSettings(LocalPlayer()) then RunConsoleCommand("VC_ResetSettings") if VC.Menu_Panel then VC.Menu_Panel.VC_Refresh_Panel = true end VCPopup("SettingsReset", "check") end end   local Btn = vgui.Create("VC_Button") Btn:SetColor(VC.Color.Btn_Spw) Btn:SetPos(Pnl:GetWide()/2+37.25, Pnl:GetTall()-20) Btn:SetSize(75, 20) Btn:SetText(VC.Lng("Load")) Btn:SetParent(Pnl) Btn:SetToolTip("Load settings from the server.")  Btn.DoClick = function() if VC.CanEditAdminSettings(LocalPlayer()) then RunConsoleCommand("VC_GetSettings_Sv") VCPopup("LoadedSettingsFromServer", "check") end end   if VC.CanEditAdminSettings(LocalPlayer()) then RunConsoleCommand("VC_GetSettings_Sv") end   VC.CD.MM_Refresh = nil   Pnl.Think = function()  if VC.CD.MM_Refresh then timer.Simple(0.2, FillData) VC.CD.MM_Refresh = nil end  if VC.Settings_TempTbl then for k,v in pairs(VC.Settings_TempTbl) do if ElTbl[k] then ElTbl[k]:SetValue(v) end Settings_Sv[k] = v end VC.Settings_TempTbl = nil end  end   return Draw end VC.Menu_Items_A.NPC = {"CD_Settings", BuildMenu} local rs7 = "vc.check_msg_work_ALS_k4" 