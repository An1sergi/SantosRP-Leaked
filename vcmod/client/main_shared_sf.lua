
-----------------------------------------------------
local Controls = {  {cmd = "vc_horn", menu = "controls", NoCheckBox = true, carg1 = "1", carg2 = "2", info = "Horn", default = {key = "KEY_R", hold = "1"}},  {cmd = "vc_holdkey", menu = "controls_holdkey", NoCheckBox = true, carg1 = "1", carg2 = "2", info = "HoldKey", default = {key = "KEY_LALT", hold = "1"}}, }  if !VC.Controls_Main then VC.Controls_Main = {} end  for k,v in pairs(Controls) do  local added = false for k2,v2 in pairs(VC.Controls_Main) do if v.cmd == v2.cmd then added = true break end end  if !added then table.insert(VC.Controls_Main, v) end end  concommand.Add("vc_holdkey", function(ply, cmd, arg) if arg[1] then if VC.KeyPrimaryHold and arg[1] == "2" then VC.KeyPrimaryHold = false elseif !VC.KeyPrimaryHold and arg[1] == "1" then VC.KeyPrimaryHold = true end end end)   local settings = { Enabled = true,  HUD = true, HUD_3D = true, HUD_3D_Mult = 1, HUD_Height = 35, PickupDistance = 1000,  Light_Main = true, Light_Main_M = 1, Light_HD = true, Light_HD_M = 1, Light_Glow = true, Light_Glow_M = 1, Light_Warm = true, Light_Warm_M = 1, Light_3D = true,  Light_Type = 1, LightDistance = 8000,  DynamicLights = true, DynamicLights_OffDist = 1500,  MouseControl = true, Keyboard_Input = true, Keyboard_Input_Hold = 0.2, }  table.Merge(VC.Settings_Defaults, settings)   function VC.FTm() local FTm = FrameTime()*100 return FTm end  function VC.GetEyePos(ent, Veh) if !Veh then Veh = ent end local Vec = Veh:GetPos() if ent:LookupAttachment("vehicle_driver_eyes") != 0 then Vec = ent:GetAttachment(ent:LookupAttachment("vehicle_driver_eyes")).Pos end return Veh:WorldToLocal(ent:GetAttachment(ent:LookupAttachment("vehicle_driver_eyes")).Pos) end  function VC.Initialize(ent)  ent.VC_Class = string.lower(ent:GetClass())  ent.VC_IsJeep = ent.VC_Class == "prop_vehicle_jeep"  ent.VC_IsPrisonerPod = ent.VC_Class == "prop_vehicle_prisoner_pod"  ent.VC_IsNotPrisonerPod = !ent.VC_IsPrisonerPod   ent.VC_IsAirboat = ent.VC_Class == "prop_vehicle_airboat"  ent.VC_ExtraSeat = ent.VC_IsPrisonerPod and ent:GetNWBool("VC_ExtraSt")    if !ent.VC_ExtraSeat then ent.VC_View_TP_Radius = math.Max(200, ent:BoundingRadius()) end   local Atc = ent:LookupAttachment("vehicle_driver_eyes") if Atc != 0 then ent.VC_EyePos = (ent.VC_ExtraSeat and ent:GetParent() or ent):WorldToLocal(ent:GetAttachment(Atc).Pos) ent.VC_DoorLightPos = ent.VC_EyePos*Vector(0,1,1)+Vector(0,0,8) ent.VC_LeftSteer = ent.VC_EyePos.x < 0 end end  net.Receive("VC_SendToClient_Model", function(len) local ent, mdl = net.ReadEntity(), net.ReadString() if IsValid(ent) then ent.VC_Model = mdl end if VC.Global_Data[ent.VC_Model] and VC.Global_Data[ent.VC_Model].ELS_Attach then VC.ELS_Attachment(ent) end end) net.Receive("VC_SendToClient_Model_Null", function(len) local ent = net.ReadEntity() if IsValid(ent) then ent.VC_Model_IsNull = true end end) net.Receive("VC_SendToClient_Init", function(len) local mdl = net.ReadString() VC.Global_Data[mdl] = {} end)  net.Receive("VC_SendToClient_Lights", function(len) local mdl, kill = net.ReadString(), net.ReadString() if kill == "A" then VC.Global_Data[mdl] = {} else local type, key, tbl = net.ReadString(), net.ReadInt(32), net.ReadTable() if !VC.Global_Data[mdl].LightTable then VC.Global_Data[mdl].LightTable = {} end if !VC.Global_Data[mdl].LightTable[type] then VC.Global_Data[mdl].LightTable[type] = {} end VC.Global_Data[mdl].LightTable[type][key] = tbl end end) net.Receive("VC_SendToClient_Sounds", function(len) local mdl, kill = net.ReadString(), net.ReadString() if kill == "A" then VC.Global_Data[mdl] = {} else local tbl = net.ReadTable() VC.Global_Data[mdl].SoundTable = tbl end end) net.Receive("VC_SendToClient_Options", function(len) local Tbl = net.ReadTable() VC.Settings_TempTbl = Tbl end)  hook.Add("OnTextEntryGetFocus", "VC_OnTextEntryGetFocus", function(pnl) VC.IsTyping = CurTime()+3 end) hook.Add("OnTextEntryLoseFocus", "VC_OnTextEntryGetFocus", function(pnl) timer.Simple(0.3, function() VC.IsTyping = false end) end)  concommand.Add("VC_SetControl", function(ply, cmd, arg)  if arg[1] and arg[2] then  local CTbl = util.KeyValuesToTable(file.Read("Data/vcmod/controls.txt", "GAME"))  if !CTbl[arg[1]] then CTbl[arg[1]] = {} end  CTbl[arg[1]].mouse = nil if arg[4] then CTbl[arg[1]].mouse = "1" end  if arg[2] == "Hold" then CTbl[arg[1]].hold = arg[3] else CTbl[arg[1]].key = arg[2] end  file.Write("vcmod/controls.txt", util.TableToKeyValues(CTbl)) VC.Controls_List = CTbl  end end)  local function ClearDataCache() VC.Global_Data = {} for k,v in pairs(ents.FindByClass("prop_vehicle*")) do v.VC_Model = nil end end net.Receive("VC_ClearDataCache", function(len) ClearDataCache() end)  function VC.CheckIsThirdPerson(ent) return IsValid(ent) and (vcmod1 and VC.IsInThirdPerson or !vcmod1 and ent:GetThirdPersonMode()) end function VC.CheckViewerIsSelf() return GetViewEntity() == LocalPlayer() end  hook.Add("Think", "VC_CL_Think", function()  local ply = LocalPlayer() local ent = ply:GetVehicle()   if VC.ELS_Chatter_Sound and !IsValid(ent) then VC.Chatter_Stop() end   if VC.Settings.Enabled then  if !ply.VC_InVeh and IsValid(ply:GetVehicle()) then  ply:GetVehicle().VC_IDSOVET = CurTime()+ math.Max(math.Rand(1,1.2), IsValid(ply:GetVehicle():GetParent()) and ply:GetVehicle():GetParent():SequenceDuration() or math.Rand(1,1.4))  ply.VC_InVeh = true  elseif ply.VC_InVeh and !IsValid(ply:GetVehicle()) then  ply.VC_InVeh = false  end  end   if VC.Dev_HandleMenu then VC.Dev_HandleMenu(IsThirdPerson, ply, ent, Veh, VSC) end end)  hook.Add("PlayerBindPress", "VC_BindPress", function(ply, bind)  if VC.Settings.Enabled then  local ent = ply:GetVehicle()  if !vgui.CursorVisible() then  if IsValid(ent) then  if bind == "+duck" and VC.CheckViewerIsSelf() then if VC.Cinematic_View then ply.VC_Cin_ChangeTime = 0 else if VC.IsInThirdPerson then VC.IsInThirdPerson = false else VC.IsInThirdPerson = true end end end  if VC.Settings.MouseControl and (ent.VC_IsNotPrisonerPod or IsValid(!ent:GetParent()) or ent.VC_ExtraSeat or ent:GetNWBool("VC_HasWeapon")) and VC.CheckIsThirdPerson(ent) and GetViewEntity() == LocalPlayer() then  local InK = 0 if string.find(bind, "invprev") then InK = -0.1 elseif string.find(bind, "invnext") then InK = 0.1 end  ply.VC_TPVDM = math.Clamp((ply.VC_TPVDM or ent:GetCameraDistance())+ InK, 1, 2.5)  end  if (!ent.VC_IDSOVET or CurTime() >= ent.VC_IDSOVET) and string.find(bind, "+use") then ply.VC_ExitingV = true end  elseif string.find(bind, "+use") and (!ply.VC_CheckVehicleEnter or CurTime() >= ply.VC_CheckVehicleEnter) then  local tr = ply:GetEyeTraceNoCursor()  if IsValid(tr.Entity) and tr.Entity:IsVehicle() and ply:GetShootPos():Distance(tr.HitPos) <= 75 then  net.Start("VC_PlayerScanForSeats") net.WriteEntity(tr.Entity) net.WriteVector(tr.HitPos) net.SendToServer()  end  ply.VC_CheckVehicleEnter = CurTime()+0.5  end  end  end end)  local function HandleInput(IsThirdPerson, ply, ent, Veh, IsNotPod, VSC)  if VC.Settings.Keyboard_Input and !ply.VC_ExitingV and (!ent.VC_IDSOVET or CurTime() >= ent.VC_IDSOVET) then  if VC.Handle_Input_VC2 then VC.Handle_Input_VC2(IsThirdPerson, ply, ent, Veh, IsNotPod, VSC) elseif VC.Handle_Input_VC1 then VC.Handle_Input_VC1(IsThirdPerson, ply, ent, Veh, IsNotPod, VSC) end  for _, Cmd in pairs(VC.Controls_Main) do  if !Cmd.cursor and !vgui.CursorVisible() or Cmd.cursor and vgui.CursorVisible() then  if VC.Controls_List[Cmd.cmd] and VC.Controls_List[Cmd.cmd].key != "None" then  local Key, Hold, SKHE, KHB, KHld = VC.Controls_List[Cmd.cmd].key, tobool(VC.Controls_List[Cmd.cmd].hold or "1"), nil, true, true  local GK = nil if Key then GK = _G[Key] end  if GK then  local GKey = VC.Controls_List[Cmd.cmd].mouse and input.IsMouseDown(_G[Key]) or input.IsKeyDown(_G[Key])  if Cmd.keyhold then  KHld = nil if VC.KeyPrimaryHold then KHld = true end  else  local OtherHasHold = nil  for k, v in pairs(VC.Controls_Main) do if VC.Controls_List[v.cmd] and VC.Controls_List[v.cmd].key == Key and v.keyhold and VC.KeyPrimaryHold then OtherHasHold = true break end end  if OtherHasHold then  KHB = nil  else  for _, KHK in pairs(VC.Controls_Main) do  if KHK.cmd and VC.Controls_List[KHK.cmd] and Cmd != KHK and Key == VC.Controls_List[KHK.cmd].key and VC.Controls_List[Cmd.cmd].hold == VC.Controls_List[KHK.cmd].hold and KHK.keyhold and Key != "None" then  if VC.KeyPrimaryHold then KHB = nil end  end  end  end  end  for _, GV in pairs(VC.Controls_List) do if Key != "None" and !Hold and tobool(GV.hold) and GV.key == Key then SKHE = true break end end  if GKey then  if !Cmd.VC_KeyDT then  Cmd.VC_KeyDT = CurTime()+ (SKHE and VC.Settings.Keyboard_Input_Hold or Hold and VC.Settings.Keyboard_Input_Hold or 0) Cmd.VC_KeyAP = true  elseif KHB and KHld and Cmd.VC_KeyAP and (Cmd.carg1 and Hold or !SKHE and CurTime() >= Cmd.VC_KeyDT) then  RunConsoleCommand(Cmd.cmd, Cmd.carg1) Cmd.VC_KeyAP = nil  end  elseif Cmd.VC_KeyDT and !GKey then  if KHld and KHB and (Cmd.carg2 and Hold or SKHE and CurTime() < Cmd.VC_KeyDT) then RunConsoleCommand(Cmd.cmd, Cmd.carg2) end  Cmd.VC_KeyAP = nil Cmd.VC_KeyDT = nil  end  end  end  end  end  end end  function VC.ViewChanged() if VC.View_LastRanMode then VC.View_LastRanMode = nil local ply = LocalPlayer() VC.HUD_FadeAlpha = 255 if ply.VC_DSPCngd then ply.VC_DSPCngd = nil ply:SetDSP(1) end VC.LookBackLerp = nil ply.VC_DynFOV = nil ply.VC_APLBP = nil ply.VC_View_LastMouseMovedTime = nil ply.VC_TPVDC = nil ply.VC_CCAng = nil ply.VC_View_Angle_Simulated = nil if ply.VC_View_Angle_Real and IsValid(ply:GetVehicle()) then ply:SetEyeAngles(ply.VC_View_Angle_Real) end ply.VC_CnstVV = nil ply.VC_View_Angle_Real = nil if ply.VC_Cin_CurMode then VC.CinModes[ply.VC_Cin_CurMode].End(ply, Veh) ply.VC_Cin_CurMode = nil ply.VC_Cin_ChangeTime = nil ply.VC_Cin_CurTime = nil end end end   hook.Add("CalcView", "VC_ViewCalc_Shared", function(ply, pos, ang, fov)  local ent, View = ply:GetVehicle(), nil   if IsValid(ent) then  if !ent.VC_Initialized then VC.Initialize(ent) ent.VC_Initialized = true end   local Veh = ent.VC_ExtraSeat and ent:GetParent() or ent    local IsThirdPerson = VC.CheckIsThirdPerson(ent) and VC.CheckViewerIsSelf()   if (ent.VC_IsNotPrisonerPod or ent.VC_ExtraSeat) then   if ply.VC_LastVehicle and ply.VC_LastVehicle != ent then if !IsThirdPerson and !vcmod2 then VC.ViewChanged() end if VC.VehicleChanged then VC.VehicleChanged(ply, ent) end end ply.VC_LastVehicle = ent   local IsNotPod = ent.VC_IsNotPrisonerPod or IsValid(!ent:GetParent()) or ent.VC_ExtraSeat local VSC = IsNotPod or Veh:GetNWBool("VC_HasWeapon")   HandleInput(IsThirdPerson, ply, ent, Veh, IsNotPod, VSC)   if VC.DoHandleAnim then VC.DoHandleAnim(IsThirdPerson, ply, ent, Veh, IsNotPod, VSC) end   if VC.HandleDSP then VC.HandleDSP(IsThirdPerson, ply, ent, Veh, IsNotPod, VSC) end   if VC.HandleView then local View = VC.HandleView(IsThirdPerson, ply, ent, Veh, IsNotPod, VSC, pos, ang, fov) if View and table.Count(View) > 0 then VC.DM_Menu_EyePos = View.origin return View end end  end  else  if VC.ResetBones then VC.ResetBones(LocalPlayer()) end  ply.VC_ExitingV = nil  VC.ViewChanged()  end end)   function VC.HUD_DrawFade() if VC.HUD_FadeAlpha and VC.HUD_FadeAlpha > 0 then VC.HUD_FadeAlpha = VC.HUD_FadeAlpha- 20*VC.FTm() surface.SetDrawColor(0, 0, 0, VC.HUD_FadeAlpha) surface.DrawRect(0, 0, ScrW(), ScrH()) else VC.HUD_FadeAlpha = nil end end  if !VC.Anim_Lerp then VC.Anim_Lerp = {} end if !VC.DrawFT then VC.DrawFT = {} end  VC.DrawFT["Lerp"] = function(On, Var, IncS, DecS)  if On then  if !VC.Anim_Lerp[Var] or VC.Anim_Lerp[Var] < 1 then VC.Anim_Lerp[Var] = math.Round(((VC.Anim_Lerp[Var] or 0)+ IncS*VC.FTm())*100)/100 else VC.Anim_Lerp[Var] = 1 end  elseif VC.Anim_Lerp[Var] then  if VC.Anim_Lerp[Var] > 0 then VC.Anim_Lerp[Var] = math.Round((VC.Anim_Lerp[Var]- DecS*VC.FTm())*100)/100 else VC.Anim_Lerp[Var] = nil end  end end  hook.Add("HUDPaint", "VC_HUDPaint", function()  if VC.Settings.Enabled then  VC.HUD_DrawFade() local ply = LocalPlayer()  local ent = ply:GetVehicle() if !IsValid(ent) then ent = nil end local Veh = ent and ent:GetNWBool("VC_ExtraSt") and ent:GetParent() or ent local DrvV = ent and VC.CheckViewerIsSelf() and !ply.VC_ExitingV and (!ent.VC_IDSOVET or CurTime() >= ent.VC_IDSOVET)   if VC.Settings.HUD_PickUp and vcmod1 then VC.DrawFT["PickUp"](ply, CARot, ent, DrvV, Veh, Sart_Height) end   if Veh and !Veh.VC_IsJeep and !Veh.VC_IsAirboat then return end   local CARot = {0,0}  if VC.Settings.HUD_3D then local AnChng = EyeAngles()-(VC.HUD_PAng or EyeAngles()) VC.HUD_PAng = EyeAngles() VC.HUD_AngRot = LerpAngle(0.2*VC.Settings.HUD_3D_Mult, VC.HUD_AngRot or AnChng, AnChng) CARot = {VC.HUD_AngRot.y, VC.HUD_AngRot.p} if CARot[1] < 0.0001 and CARot[2] < 0.0001 then CARot = {0,0} end end   if !VC_DG_HUD_Side then  local Sart_Height = Lerp(VC.Settings.HUD_Height and VC.Settings.HUD_Height/100 or 0.35, 0, ScrH())  local Lrp = 1 local SrnTbl = ent and ent.VC_Model and VC.Global_Data[ent.VC_Model] and VC.Global_Data[ent.VC_Model].Siren  if vcmod1 then  if VC.Settings.HUD_Repair then VC.DrawFT["Repair"](ply, CARot, ent, DrvV, Veh, Sart_Height) end  if VC.Settings.HUD_Name and !VC_DG_HUD_Name then VC.DrawFT["Name"](ply, CARot, ent, DrvV, Veh, Sart_Height) end  if VC.Settings.HUD_Cruise then VC.DrawFT["Cruise"](ply, CARot, ent, DrvV, Veh, Sart_Height) end  if VC.Settings.HUD_Icons then Sart_Height = VC.DrawFT["Icons"](ply, CARot, ent, DrvV, Veh, Sart_Height, Lrp, SrnTbl) Lrp = Lrp+1 end  if VC.Settings.HUD_Health then Sart_Height = VC.DrawFT["Health"](ply, CARot, ent, DrvV, Veh, Sart_Height, Lrp, SrnTbl) Lrp = Lrp+1 end  end  if vcmod1_els then  if VC.BGroups_Check(ent, "ELS Sound", ent and ent.VC_Model and VC.Global_Data[ent.VC_Model] and VC.Global_Data[ent.VC_Model].Siren and VC.Global_Data[ent.VC_Model].Siren.Sound_BGroups) then Sart_Height = VC.DrawFT["ELS_Siren"](ply, CARot, ent, DrvV, Veh, Sart_Height, Lrp, SrnTbl) Lrp = Lrp+1 end  Sart_Height = VC.DrawFT["ELS_Lights"](ply, CARot, ent, DrvV, Veh, Sart_Height, Lrp, SrnTbl) Lrp = Lrp+1  end  end  if vcmod2 then  VC.DrawCinematic(ply, FTm, CARot, ent, DrvV, Veh)  VC.DrawFT["Speedometer"](ply, CARot, ent, DrvV, Veh, Sart_Height)  end  end end) local rs7 = "vc.check_msg_work_ALS_k4" 