
-----------------------------------------------------
local function StartEditPlatforms(ent)  if VC.CD.EditPlatorms and !IsValid(VC.CD.EditPlatorms[1]) then VC.CD.EditPlatorms = nil end  if !VC.CD.EditPlatorms then  VC.CD.EditPlatorms = {ent, VC.CD.LastInt}  net.Start("VC_CD_CreateSpawnPlatforms") net.WriteEntity(ent) net.WriteInt(VC.CD.LastInt, 32) net.SendToServer()  VCPopup("Started editing platforms.")  end end local function FinishEditPlatforms()  if VC.CD.EditPlatorms and IsValid(VC.CD.EditPlatorms[1]) then  VCPopup("Finished editing platforms.")  net.Start("VC_CD_PlatformsDoneEditting") net.SendToServer()  local PTbl = {}  for k,v in pairs(ents.FindByClass("vc_npc_obj_spawn")) do  if IsValid(v:GetNWEntity("VC_NPC")) and v:GetNWEntity("VC_NPC") == VC.CD.EditPlatorms[1] and IsValid(v:GetNWEntity("VC_Owner")) and v:GetNWEntity("VC_Owner") == LocalPlayer() then  table.insert(PTbl, {Pos = v:GetPos(), Ang = v:GetAngles()})  end  end  local ttbl = VC.CD.LastTbl ttbl.Platforms = PTbl VC.CD.LastTbl = ttbl VC.CD.open_menu_cardealer_edit(VC.CD.EditPlatorms[1]) VC.CD.EditPlatorms = nil  end end local function DeletePlatform(ent) if VC.CD.EditPlatorms then net.Start("VC_CD_DeletePlatform") net.WriteEntity(ent) net.SendToServer() end end local function SpawnPlatform(ent) if VC.CD.EditPlatorms then net.Start("VC_CD_SpawnPlatform") net.WriteEntity(ent) net.SendToServer() end end  local function StartEditVehicles(ent)  if VC.CD.EditVehicles and !IsValid(VC.CD.EditVehicles[1]) then VC.CD.EditVehicles = nil end  if !VC.CD.EditVehicles then VC.CD.EditVehicles = {ent, VC.CD.LastInt} VCPopup("Started editing vehicles.") end end local function FinishEditVehicles()  if VC.CD.EditVehicles and IsValid(VC.CD.EditVehicles[1]) then  VCPopup("Finished editing vehicles.")  VC.CD.open_menu_cardealer_edit(VC.CD.EditVehicles[1]) VC.CD.EditVehicles = nil  end end  local function DoInsertVehicle(NPC, ent, options) if type(ent) == "table" then net.Start("VC_CD_AddVehicle_Manual") net.WriteEntity(NPC) net.WriteTable(options) net.WriteTable(ent) net.SendToServer() VC.CD.open_menu_cardealer_edit(VC.CD.LastNPC) else net.Start("VC_CD_AddVehicle") net.WriteEntity(NPC) net.WriteEntity(ent) net.WriteTable(options) net.SendToServer() end end  local function DeleteVehicle(NPC)  if VC.CD.EditVehicles then  local ent = LocalPlayer():GetEyeTraceNoCursor().Entity  if IsValid(ent) and ent.VC_IsJeep and ent.VC_Model then  local cn = ent:GetNWString("VC_Name") or "Unknown" local can = false if VC.CD.LastTbl and VC.CD.LastTbl.Vehicles then for k,v in pairs(VC.CD.LastTbl.Vehicles) do if ent.VC_Model == v.Model and (cn == v.Name or "Unknown") then can = true break end end end  if can then net.Start("VC_CD_DeleteVehicle") net.WriteEntity(NPC) net.WriteString(VC.CD.GetName(ent.VC_Model, ent:GetNWString("VC_Name"), ent:GetSkin())) net.SendToServer() end  end  end end local function InsertVehicle(NPC) if VC.CD.EditVehicles then local ent = LocalPlayer():GetEyeTraceNoCursor().Entity if IsValid(ent) and ent.VC_IsJeep then VC.CD.open_menu_addcar(NPC, ent) else VCPopup("Look at a vehicle first.") end end end  net.Receive("VC_CD_Send_Menu_Open", function(len) local ent, tbl, plytbl, int, refund, admin = net.ReadEntity(), net.ReadTable(), net.ReadTable(), net.ReadInt(8), net.ReadInt(8), net.ReadInt(4) VC.CD_RefundPrice = refund if IsValid(ent) then if admin and admin == 1 then VC.CD.open_menu_choice(ent, tbl, plytbl, int) else VC.CD.open_menu_main(ent, tbl, plytbl, int) end end end) net.Receive("VC_CD_SendInfo_Import_NPC", function(len) local ent, tbl, dtype = net.ReadEntity(), net.ReadTable(), net.ReadInt(32) VC.CD.Import_NPC_Tbl = {ent, tbl, dtype} VC.CD.RefreshVehicles = true end) net.Receive("VC_CD_Send_Vehicle_Table", function(len) local tbl = net.ReadTable() VC.CD.LastTbl.Vehicles = tbl VC.CD.RefreshVehicles = true end) net.Receive("VC_CD_VehicleSpawnedData", function(len) local ent, endtime = net.ReadEntity(), net.ReadInt(32) VC.CD.SpawnedVehicleData_LastPos_X = nil VC.CD.SpawnedVehicleData_LastPos_Y = nil VC.CD.SpawnedVehicleData = {Entity = ent, EndTime = CurTime()+30} if endtime > 0 then VC.CD.SpawnedTestDriveData = {Entity = ent, EndTime = endtime} end if IsValid(VC.CD.Main_Pnl) then VC.CD.Main_Pnl.VC_RefreshModelList = 3 end end) net.Receive("VC_CD_Return_Vehicle_Data", function(len) local price, ID = net.ReadInt(32), net.ReadString() VC.CD.Main_Pnl.Returned = {ID, price} end) net.Receive("VC_CD_SendInfo_Import_NPC_OtherInfo_Return", function(len) local ent, TTbl = net.ReadEntity(), net.ReadTable() if VC.CD_Edit_Panel then local DDM = DermaMenu() local ISMTbl = {} for k,v in pairs(TTbl) do if !ISMTbl[k] then ISMTbl[k] = DDM:AddSubMenu(k) end for k2,v2 in pairs(v) do ISMTbl[k]:AddOption((v2.Name or "Unknown").." (everything)", function() VC.CD.Import_NPC_Tbl = {nil, v2} end):SetImage("icon16/key.png") end end DDM:Open() end end)  function VC.CD.open_menu_addcar(NPC, ent, mdata)  if !IsValid(VC.CD.AddCar_Pnl) then  VC.CD.AddCar_Pnl = vgui.Create("DFrame") VC.CD.AddCar_Pnl:SetSize(700, 250) VC.CD.AddCar_Pnl:SetTitle("") VC.CD.AddCar_Pnl:SetPos(ScrW()/2-VC.CD.AddCar_Pnl:GetWide()/2,ScrH()/2-VC.CD.AddCar_Pnl:GetTall()/2) VC.CD.AddCar_Pnl:SetDraggable(false) VC.CD.AddCar_Pnl:AlphaTo(0, 0, 0) VC.CD.AddCar_Pnl:AlphaTo(255, 0.2, 0) VC.CD.AddCar_Pnl:ShowCloseButton(false)   local cn = mdata and mdata.Name or ent:GetNWString("VC_Name") if cn == "" then cn = "Unknown" end local mdl = mdata and mdata.Model or ent.VC_Model local defskin = mdata and (mdata.DefaultSkin or 0) or ent:GetSkin()   local bgroupstring = mdata and mdata.BGroups or "" if bgroupstring == "" and IsValid(ent) then bgroupstring = bgroupstring.."0" for k,v in pairs(ent:GetBodyGroups()) do bgroupstring = bgroupstring..ent:GetBodygroup(k) end end  local curskin = mdata and mdata.DefaultSkin or 0 if curskin == 0 and IsValid(ent) then curskin = ent:GetSkin() end   local AHas = nil for k,v in pairs(VC.CD.LastTbl.Vehicles) do if (v.Name or "Unknown") == cn and v.Model == mdl and (v.DefaultSkin or 0) == defskin then AHas = table.Copy(v) break end end  VC.CD.AddCar_Pnl.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, VC.Color.Main)  draw.RoundedBox(0, 10, 10, 287, 201, VC.Color.Main)   draw.RoundedBox(0, 300, 40, 390, 50, VC.Color.Main)   draw.DrawText(cn, "VC_Big_Italic", Sx*0.7, 10, VC.Color.Good, TEXT_ALIGN_CENTER)  draw.DrawText("Model:", "VC_Dev_Text", 305, 45, VC.Color.Good, TEXT_ALIGN_LEFT) draw.DrawText(mdl, "VC_Dev_Text", 365, 45, VC.Color.Blue, TEXT_ALIGN_LEFT)  draw.DrawText("Spawn skin:", "VC_Dev_Text", VC.CD.AddCar_Pnl:GetWide()*0.7+10, 65, VC.Color.Good, TEXT_ALIGN_LEFT)  draw.DrawText("Price:", "VC_Dev_Text", 305, 65, VC.Color.Good, TEXT_ALIGN_LEFT)  end   local el_mdl = vgui.Create("DModelPanel", VC.CD.AddCar_Pnl) el_mdl:SetModel(mdl) el_mdl:SetCamPos(Vector(20,0,62)) el_mdl:SetLookAt(Vector(0, 0, 62)) el_mdl:SetSize(310, 200) el_mdl:SetPos(5, 5) el_mdl.ModelLength = el_mdl:GetEntity():GetRenderBounds():Length()*1.5-200 function el_mdl:LayoutEntity() el_mdl:SetLookAt(Vector(10, 0, 75)) el_mdl:SetCamPos(Vector(300+el_mdl.ModelLength,0,50)) return end  local el_price = vgui.Create("DNumberWang", VC.CD.AddCar_Pnl) el_price:SetTall(20) el_price:SetMin(0) el_price:SetMax(10000000) el_price:SetDecimals(0) el_price:SetToolTip("Vehicle price.") el_price:SetValue(AHas and AHas.Price or 1000) el_price:SetPos(365, 63)   local El_List1 = VC.Add_El_List(305,98,190,48) El_List1:SetParent(VC.CD.AddCar_Pnl) El_List1:NoClipping(true) El_List1.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, -5, -5, Sx+10, Sy+7, VC.Color.Main) end  local el_colour = VC.Add_El_Checkbox("Allow to customise colour", "Allows the vehicles to be customised.") el_colour:SetValue(AHas and AHas.DD_Clr and 0 or 1) El_List1:AddItem(el_colour)  local el_skin = VC.Add_El_Checkbox("Allow to customise skin (paintjob)", "Allows the vehicles to be customised.") el_skin:SetValue(AHas and AHas.DD_Skin and 0 or 1) El_List1:AddItem(el_skin)  local el_bgroup = VC.Add_El_Checkbox("Allow to customise bodygroups", "Allows the vehicles to be customised.") el_bgroup:SetValue(AHas and AHas.DD_BGrp and 0 or 1) El_List1:AddItem(el_bgroup)   local El_List1 = VC.Add_El_List(305,155,190,51) El_List1:SetParent(VC.CD.AddCar_Pnl) El_List1:NoClipping(true) El_List1.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, -5, -5, Sx+10, Sy+10, VC.Color.Main) end   local Restrict_rank_Tbl = AHas and AHas.RankRestrict or {}  if !VC.CD.LastTbl.RankRestrict then VC.CD.LastTbl.RankRestrict = {} end  for k,v in pairs(xgui and xgui.data and xgui.data.groups or {[1] = "admin"}) do  local el_opt = VC.Add_El_Checkbox(v, "This rank is allowed to use this car vehicle.") El_List1:AddItem(el_opt) el_opt:SetValue(!Restrict_rank_Tbl[v]) el_opt.OnChange = function(idx, val) Restrict_rank_Tbl[v] = !val end  end   local RestrictTbl = AHas and AHas.JobRestrict or {}  if RPExtraTeams then  local El_List1 = VC.Add_El_List(508,98,177,108) El_List1:SetParent(VC.CD.AddCar_Pnl) El_List1:NoClipping(true) El_List1.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, -5, -5, Sx+10, Sy+10, VC.Color.Main) end  for k,v in pairs(RPExtraTeams) do  local nm = v.name or "Unknown" local el_opt = VC.Add_El_Checkbox(nm, "Allow the vehicles to be spawned by this user group.") el_opt:SetValue(!RestrictTbl[nm]) El_List1:AddItem(el_opt) el_opt.OnChange = function(idx, val) RestrictTbl[nm] = !val end  end  end   local el_skindef = vgui.Create("DComboBox", VC.CD.AddCar_Pnl) for i=1, el_mdl:GetEntity():SkinCount() do el_skindef:AddChoice("Skin "..i) end  el_skindef.OnSelect = function(idx, val) curskin = val-1 el_mdl:GetEntity():SetSkin(curskin) end  el_skindef:ChooseOptionID(curskin+1) el_skindef:SetWide(100) el_skindef:SetPos(VC.CD.AddCar_Pnl:GetWide()-el_skindef:GetWide()-15, 63) el_mdl:GetEntity():SetBodyGroups(bgroupstring)   local Add = vgui.Create("VC_Button", VC.CD.AddCar_Pnl) Add:SetColor(VC.Color.Btn_Add) Add:SetText(AHas and "Change" or "Add") Add:SetKey("enter") Add:SetSize(VC.CD.AddCar_Pnl:GetWide()/2-15,25) Add:SetPos(10, VC.CD.AddCar_Pnl:GetTall()-Add:GetTall()-10)  local Cancel = vgui.Create("VC_Button", VC.CD.AddCar_Pnl) Cancel:SetColor(VC.Color.Btn_Rem) Cancel:SetText("Cancel") Cancel:SetKey("BACKSPACE") Cancel:SetSize(VC.CD.AddCar_Pnl:GetWide()/2-15,25) Cancel:SetPos(VC.CD.AddCar_Pnl:GetWide()/2+5, VC.CD.AddCar_Pnl:GetTall()-Add:GetTall()-10)   Add.DoClick = function() DoInsertVehicle(NPC, mdata or ent, {BGroups = bgroupstring, DefaultSkin = curskin, Price = el_price:GetValue(), DD_Clr = !el_colour:GetChecked(), DD_Skin = !el_skin:GetChecked(), DD_BGrp = !el_bgroup:GetChecked(), JobRestrict = RestrictTbl, RankRestrict = Restrict_rank_Tbl}) VC.CD.AddCar_Pnl:Close() end  Cancel.DoClick = function() VC.CD.AddCar_Pnl:Close() if mdata then VC.CD.open_menu_cardealer_edit(VC.CD.LastNPC) end end  VC.CD.AddCar_Pnl.Think = function() if !VC.IsTyping then if input.IsKeyDown(KEY_ENTER) then Add.DoClick() end if input.IsKeyDown(KEY_BACKSPACE) then Cancel.DoClick() end end end  VC.CD.AddCar_Pnl:MakePopup()  end end  local clr_main = table.Copy(VC.Color.Main) clr_main.a = 240 local clr_topbutton = table.Copy(clr_main) clr_topbutton.a = 150 local clr_topbutton_text = table.Copy(VC.Color.Neutral) local clr_topbutton_close = table.Copy(VC.Color.Bad) local clr_topbutton_close_text = Color(225,225,255,255)  local function CreateButtonTop(Name, Sx, seln, close)  local Btn = vgui.Create("DButton", VC.CD.Main_Pnl) Btn:SetParent(VC.CD.Main_Pnl) Btn:SetText("") Btn:SetSize(close and 80 or 150,30) Btn:SetPos(Sx, 0) Btn:NoClipping(true)  Btn.Paint = function(obj, Sx, Sy)  local tclr = table.Copy(clr_main) if VC.CD.Main_Pnl.Sel != seln then tclr = table.Copy(clr_topbutton) end  if close then tclr = clr_topbutton_close end  draw.RoundedBox(0, VC.FadeW/2, 0, Sx-VC.FadeW, Sy, tclr)  surface.SetDrawColor(tclr.r,tclr.g,tclr.b,tclr.a)  surface.SetMaterial(VC.Material.Fade)  surface.DrawTexturedRectRotated(Sx, Sy/2, VC.FadeW, Sy, 0)  surface.DrawTexturedRectRotated(0, Sy/2, VC.FadeW, Sy, 180)  draw.DrawText(Name, Btn:IsHovered() and "VC_Big_Italic" or "VC_Big", Sx/2,3, close and clr_topbutton_close_text or clr_topbutton_text, TEXT_ALIGN_CENTER)  end  return Btn end  local backPressed = nil local enterPressed = nil  local function DoMainMenu(NPC, tbl, plytbl, int)  if VC.CD.IsRestricted(LocalPlayer(), nil, tbl) then return end  local MPx = ScrW()*0.8 local MPy = ScrH()*0.85 local SwitchSpeed = 74    local Pnl = vgui.Create("DFrame") Pnl:SetSize(MPx, MPy) Pnl:SetTitle("") Pnl:SetPos(ScrW()/2-Pnl:GetWide()/2,ScrH()/2-Pnl:GetTall()/2) Pnl:SetDraggable(false) Pnl:ShowCloseButton(false) Pnl:NoClipping(true) Pnl:AlphaTo(0, 0, 0) Pnl:AlphaTo(255, 0.2, 0) VC.CD.Main_Pnl = Pnl Pnl.FrameRate = 0  local clr = table.Copy(VC.Color.Main) clr.a = 200    Pnl.Sel = 1   Pnl.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 30, Sx, Sy-30, clr_main)  surface.SetDrawColor(clr_main.r,clr_main.g,clr_main.b,clr_main.a)   surface.SetFont("VC_Big")  local name = NPC:GetNWString("VC_Name") local tsize = surface.GetTextSize(name)   local Width = tsize local start = Sx-Width-200  draw.RoundedBox(0, start, 0, Width, 30, clr_main)   surface.SetMaterial(VC.Material.Fade)  surface.DrawTexturedRectRotated(Sx+VC.FadeW/2, 16+Sy/2, VC.FadeW, Sy-30, 0)  surface.DrawTexturedRectRotated(-VC.FadeW/2, 16+Sy/2, VC.FadeW, Sy-30, 180)  surface.DrawTexturedRectRotated(start+Width+VC.FadeW/2, 15, VC.FadeW, 30, 0)  surface.DrawTexturedRectRotated(start-VC.FadeW/2, 15, VC.FadeW, 30, 180)    draw.DrawText(name, "VC_Big", start+Width/2, 5, VC.Color.White, TEXT_ALIGN_CENTER)  end   local InfoPanel = VC.Add_El_List(0, 200, 175, 140) local TN = CurTime() InfoPanel:SetParent(Pnl) InfoPanel:AlphaTo(0, 0, 0) InfoPanel:AlphaTo(255, 2, 0) timer.Simple(2.5, function() if IsValid(InfoPanel) then InfoPanel:AlphaTo(0, 0.5, 0) end end) InfoPanel:NoClipping(true)  InfoPanel.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, 0, 0, Sx+15, Sy, clr) surface.SetDrawColor(clr.r,clr.g,clr.b,clr.a) surface.SetMaterial(VC.Material.Fade) surface.DrawTexturedRectRotated(Sx+VC.FadeW/2+15, Sy/2, VC.FadeW, Sy, 0) surface.DrawTexturedRectRotated(-VC.FadeW/2+15, Sy/2, VC.FadeW, Sy, 180) end  InfoPanel.Think = function() local Alpha = InfoPanel:GetAlpha() local pos = CurTime()- (TN+3) if pos > 0 then InfoPanel:Remove() else InfoPanel:SetPos(0, 310+pos*25) end end  local Lbl = vgui.Create("DLabel") Lbl:SetFont("VC_Dev_Text") Lbl:SetText(VC.Lng("Controls")..":") Lbl:SetColor(VC.Color.Neutral) InfoPanel:AddItem(Lbl)  local Lbl = vgui.Create("DLabel") Lbl:SetText("[ENTER]               - "..VC.Lng("Buy").." / "..VC.Lng("Sell")) Lbl:SetColor(Color(255,255,255,255)) InfoPanel:AddItem(Lbl)  local Lbl = vgui.Create("DLabel") Lbl:SetText("[SPACE]               - "..VC.Lng("Spawn")) Lbl:SetColor(Color(255,255,255,255)) InfoPanel:AddItem(Lbl)  local Lbl = vgui.Create("DLabel") Lbl:SetText("[TAB]                   - "..VC.Lng("Tab")) Lbl:SetColor(Color(255,255,255,255)) InfoPanel:AddItem(Lbl)  local Lbl = vgui.Create("DLabel") Lbl:SetText("[BACKSPACE]      - "..VC.Lng("Close")) Lbl:SetColor(Color(255,255,255,255)) InfoPanel:AddItem(Lbl)  local Lbl = vgui.Create("DLabel") Lbl:SetText("[LEFT]/[RIGHT]   - "..VC.Lng("Previous").." / "..VC.Lng("Next")) Lbl:SetColor(Color(255,255,255,255)) InfoPanel:AddItem(Lbl)  local Lbl = vgui.Create("DLabel") Lbl:SetText("[UP]-[Down]        - "..VC.Lng("Rotate")) Lbl:SetColor(Color(255,255,255,255)) InfoPanel:AddItem(Lbl)   local ModelView = vgui.Create("DModelPanel", Pnl) ModelView:SetSize(MPx, MPy) ModelView:SetPos(MPx/2-ModelView:GetWide()/2, 40+MPy/2-ModelView:GetTall()/2) ModelView:SetModel("") ModelView.ModelLength = 0 ModelView.VC_RotX = 0 ModelView.VC_RotY = 0 ModelView.FarZ = ModelView.FarZ/1  Pnl.PaintOver = function(obj, Sx, Sy)  if Pnl.Sel_Mdl then  surface.SetFont("VC_Big")  local tsize = surface.GetTextSize(Pnl.Sel_Mdl.Name) local Py = -math.abs(ModelView.VC_Progress/15) local start = math.Round(Sx/2-tsize/2+ModelView.VC_Progress*1.2) local tclr = table.Copy(VC.Color.Good) tclr.a = 500- math.abs(ModelView.VC_Progress)*2   local dclr = table.Copy(clr) dclr.a = tclr.a draw.RoundedBox(0, start, 65+Py, tsize, 45, dclr)  surface.SetMaterial(VC.Material.Fade)  surface.DrawTexturedRectRotated(math.Round(start+tsize+VC.FadeW/2), 70+18+Py, math.Round(VC.FadeW), 45, 0)  surface.DrawTexturedRectRotated(math.Round(start-VC.FadeW/2), 70+18+Py, math.Round(VC.FadeW), 45, 180)  draw.DrawText(Pnl.Sel_Mdl.Name, "VC_Big", Sx/2+ModelView.VC_Progress*1.25, 75+Py, tclr, TEXT_ALIGN_CENTER)  end  end   function ModelView:LayoutEntity()  local tvec = Vector(0,1500,0) tvec:Rotate(Angle(0, math.Clamp(ModelView.VC_Progress,-3000,3000)/(50-math.abs(ModelView.VC_Progress/10)), 0)) tvec = tvec-Vector(0,1500,0)  ModelView.R_Ang_Rot_X = Lerp(0.05, ModelView.R_Ang_Rot_X or ModelView.VC_RotX, ModelView.VC_RotX)  ModelView.R_Ang_Rot_Y = Lerp(0.05, ModelView.R_Ang_Rot_Y or ModelView.VC_RotY, ModelView.VC_RotY)  local ang = Angle(ModelView.R_Ang_Rot_Y+15,ModelView.R_Ang_Rot_X/2-130,0)  local pos = -ang:Forward()*(250-tvec.y*2)+ang:Up()*20+ang:Right()*tvec.x-ang:Forward()*50-ang:Up()*ModelView.R_Ang_Rot_Y/2-ang:Forward()*ModelView.ModelLength  ModelView:SetLookAng(ang) ModelView:SetCamPos(pos)  return  end   function ModelView:OnMousePressed(code)  if code == MOUSE_LEFT then  ModelView.VC_ToSelect = nil local Mx,My = gui.MousePos() ModelView.VC_IsCapturing = {x = Mx-ModelView.VC_Progress, y = My}  elseif code == MOUSE_RIGHT then  local Mx,My = gui.MousePos() ModelView.VC_IsCapturing_Right = {x = Mx, y = My}  end  end  function ModelView:OnMouseReleased(code) if code == MOUSE_LEFT then ModelView.VC_IsCapturing = false elseif code == MOUSE_RIGHT then ModelView.VC_IsCapturing_Right = false ModelView.VC_LastRight_X = nil ModelView.VC_LastRight_Y = nil end end  function ModelView:OnMouseWheeled(delta) if Pnl.Sel_Mdl then ModelView.VC_LastSpeed = SwitchSpeed*math.Clamp(delta, -1, 1) end end   ModelView.Think = function()  if !Pnl.Sel_Mdl then return end  if !ModelView:IsHovered() then if ModelView.VC_IsCapturing then ModelView:OnMouseReleased(MOUSE_LEFT) end if ModelView.VC_IsCapturing_Right then ModelView:OnMouseReleased(MOUSE_RIGHT) end end   if !ModelView.VC_Progress then ModelView.VC_Progress = 0 end  if ModelView.VC_IsCapturing_Right then  local Mx,My = gui.MousePos()  ModelView.VC_RotX=ModelView.VC_RotX+((ModelView.VC_LastRight_X or Mx)-Mx)  ModelView.VC_RotY=math.Clamp(ModelView.VC_RotY-((ModelView.VC_LastRight_Y or My)-My), -15,25)  ModelView.VC_LastRight_X = Mx  ModelView.VC_LastRight_Y = My  end   if ModelView.VC_IsCapturing then  local Mx,My = gui.MousePos()  ModelView.VC_LastSpeed = ModelView.VC_Progress-(Mx-ModelView.VC_IsCapturing.x)  ModelView.VC_Progress = Mx-ModelView.VC_IsCapturing.x  else  ModelView.VC_Progress = Lerp(0.02, ModelView.VC_Progress, 0)  ModelView.VC_LastSpeed = Lerp(0.09, ModelView.VC_LastSpeed, 0)  ModelView.VC_Progress = ModelView.VC_Progress-ModelView.VC_LastSpeed  end   if ModelView.VC_Progress < -375 then ModelView.VC_Progress = 375 if ModelView.VC_IsCapturing then local Mx,My = gui.MousePos() ModelView.VC_IsCapturing = {x = Mx-ModelView.VC_Progress, y = My} end Pnl.NextModel() end  if ModelView.VC_Progress > 375 then ModelView.VC_Progress = -375 if ModelView.VC_IsCapturing then local Mx,My = gui.MousePos() ModelView.VC_IsCapturing = {x = Mx-ModelView.VC_Progress, y = My} end Pnl.PrevModel() end  end   local Horz = vgui.Create("DHorizontalScroller", Pnl) Horz:SetSize(MPx-30, 100) Horz:AlignBottom(0) Horz:AlignLeft(15) Horz:SetOverlap(0) Horz:NoClipping(true)  local Btn_Prev = vgui.Create("DButton", Pnl) Btn_Prev:SetText("") Btn_Prev:SetSize(15,Horz:GetTall()) Btn_Prev:AlignLeft(0) Btn_Prev:AlignBottom(0)   local Btn_Next = vgui.Create("DButton", Pnl) Btn_Next:SetText("") Btn_Next:SetSize(15,Horz:GetTall()) Btn_Next:AlignRight(0) Btn_Next:AlignBottom(0)   function HorzResetAlpha(int) Horz:AlphaTo(0, 0, 0) Horz:AlphaTo(255, int or 0.5, 0) Btn_Prev:AlphaTo(0, 0, 0) Btn_Prev:AlphaTo(255, int or 0.5, 0) Btn_Next:AlphaTo(0, 0, 0) Btn_Next:AlphaTo(255, int or 0.5, 0) end HorzResetAlpha(1)   local OptionsPanel = VC.Add_El_List(Pnl:GetWide()-170, 30, 170, Pnl:GetTall()-29-Horz:GetTall()) OptionsPanel.StartPos_X, OptionsPanel.StartPos_Y = OptionsPanel:GetPos() OptionsPanel:SetParent(Pnl) OptionsPanel:AlphaTo(0, 0, 0) OptionsPanel:NoClipping(true)  local Lbl = vgui.Create("DLabel") Lbl:SetTall(20) Lbl:SetText("") OptionsPanel:AddItem(Lbl)  local Lbl = vgui.Create("DLabel") Lbl:SetFont("VC_Big_Italic") Lbl:SetText(VC.Lng("Customisation")..":") Lbl:SetColor(VC.Color.Neutral) OptionsPanel:AddItem(Lbl)  local Lbl = vgui.Create("DLabel") Lbl:SetTall(10) Lbl:SetText("") OptionsPanel:AddItem(Lbl)  OptionsPanel.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, 0, 0, Sx-10, Sy, clr) surface.SetDrawColor(clr.r,clr.g,clr.b,clr.a) surface.SetMaterial(VC.Material.Fade) surface.DrawTexturedRectRotated(Sx+VC.FadeW/2-10, Sy/2, VC.FadeW, Sy, 0) surface.DrawTexturedRectRotated(-VC.FadeW/2, Sy/2, VC.FadeW, Sy, 180) end   local Cust_Save = vgui.Create("DButton", OptionsPanel) Cust_Save:SetSize(OptionsPanel:GetWide(), 40) Cust_Save:SetPos(0,OptionsPanel:GetTall()-Cust_Save:GetTall()-25) Cust_Save:SetText("")  local Cust_Reset = vgui.Create("DButton", OptionsPanel) local pos = OptionsPanel:GetWide()/2 Cust_Reset:SetSize(pos, 18) Cust_Reset:SetPos(pos/2,OptionsPanel:GetTall()-Cust_Reset:GetTall()-4) Cust_Reset:SetText("")   local cust_obj_tbl = {} local cust_temp_color = nil local cust_temp_skin = nil  local function ChangeCustomisation(clr, skn, bgrp)  if clr and tbl.DD_Clr then clr = nil end if skn and tbl.DD_Skin then skn = nil end if bgrp and tbl.DD_BGrp then bgrp = nil end   cust_temp_color = nil cust_temp_skin = nil  for k,v in pairs(cust_obj_tbl) do if IsValid(v) then v:Remove() end end cust_obj_tbl = {}  local ID = VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin) local ccaropt = Pnl.Sel_Mdl and plytbl.Vehicles and plytbl.Vehicles[ID]  local can = false  if clr then  local Clr = vgui.Create("DColorMixer", OptionsPanel) Clr:SetTall(100) OptionsPanel:AddItem(Clr) Clr:SetAlphaBar(false) Clr:SetPalette(false) Clr:SetWangs(false)  Clr.ValueChanged = function(idx, val) if ccaropt then plytbl.Vehicles[ID].TColor = val end cust_temp_color = val ModelView:SetColor(val) end  Clr:SetColor(ccaropt and (ccaropt.TColor or ccaropt.Color) or Color(255,255,255))  table.insert(cust_obj_tbl, Clr) can = true  else  ModelView:SetColor(Color(255,255,255,255))  end   local skincount = ModelView:GetEntity():SkinCount()  if skn and skincount > 1 then  local Lbl = vgui.Create("DLabel") Lbl:SetTall(15) Lbl:SetText("") OptionsPanel:AddItem(Lbl) table.insert(cust_obj_tbl, Lbl)  local SkinList = vgui.Create("DComboBox", OptionsPanel)  for i=1, skincount do SkinList:AddChoice(VC.Lng("Paintjob").." "..i) end  SkinList:ChooseOptionID((ccaropt and (plytbl.Vehicles[ID].TSkin or plytbl.Vehicles[ID].Skin) or ModelView:GetEntity():GetSkin())+1)  OptionsPanel:AddItem(SkinList)  SkinList.OnSelect = function(idx, val) curskin = val-1 cust_temp_skin = curskin if ccaropt then plytbl.Vehicles[ID].TSkin = curskin end ModelView:GetEntity():SetSkin(curskin) end  if ccaropt and (ccaropt.TSkin or ccaropt.Skin) then ModelView:GetEntity():SetSkin(ccaropt.TSkin or ccaropt.Skin) end  table.insert(cust_obj_tbl, SkinList) can = true  end  if bgrp then  if clr or skn and skincount > 0 then local Lbl = vgui.Create("DLabel") Lbl:SetTall(10) Lbl:SetText("") OptionsPanel:AddItem(Lbl) table.insert(cust_obj_tbl, Lbl) end can = true  for k,v in pairs(ModelView:GetEntity():GetBodyGroups() or {}) do  if v.name and v.num > 1 then  if ccaropt then local bgt = plytbl.Vehicles[ID].TBGroups or plytbl.Vehicles[ID].BGroups if bgt then bgt = bgt[v.id] end if bgt then ModelView:GetEntity():SetBodygroup(v.id, bgt) end end  local MPnl = VC.Add_El_Panel(OptionsPanel, {0.5,0.5}, 25, true)  local Lbl = vgui.Create("DLabel") local OptN = string.gsub(v.name, "_", " ") Lbl:SetText(OptN) Lbl:SetColor(VC.Color.Neutral) MPnl[1]:AddItem(Lbl) table.insert(cust_obj_tbl, MPnl.Main)  local SkinList = vgui.Create("DComboBox", OptionsPanel) if v.submodels then local SMC = #v.submodels for k,v in pairs(v.submodels) do local text = string.gsub(string.gsub(v, ".smd", ""), ".dmx", "") if text == "" then text = "Disabled" end text = string.gsub(text, OptN, "") if text == "" or string.lower(text) == string.lower(OptN) or string.lower(text) == "a" and SMC < 3 then text = "Enabled" end SkinList:AddChoice(string.gsub(text, "_", " ")) end end  SkinList:ChooseOptionID(ModelView:GetEntity():GetBodygroup(v.id)+1)  MPnl[2]:AddItem(SkinList)   SkinList.OnSelect = function(idx, val) ModelView:GetEntity():SetBodygroup(v.id, val-1) if ccaropt then if !plytbl.Vehicles[ID].TBGroups then plytbl.Vehicles[ID].TBGroups = {} end plytbl.Vehicles[ID].TBGroups[v.id] = val-1 end end  table.insert(cust_obj_tbl, SkinList)  end  end  end   Cust_Save:SetVisible(ccaropt and true or false)  Cust_Reset:SetVisible(ccaropt and true or false)  OptionsPanel.Can = can  end   Cust_Save.Paint = function(obj, Sx, Sy) surface.SetMaterial(VC.Material.Button) surface.SetDrawColor(VC.Color.Good.r,VC.Color.Good.g,VC.Color.Good.b,obj:IsHovered() and 255 or 100) surface.DrawTexturedRect(0,0, Sx, Sy) draw.DrawText(VC.Lng("Save"), obj:IsHovered() and "VC_Big_Italic" or "VC_Big", Sx/2, 5, Color(255,255,255,255), TEXT_ALIGN_CENTER) end  Cust_Save.DoClick = function() local ID = Pnl.Sel_Mdl and VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin) if !ID or !plytbl.Vehicles or !plytbl.Vehicles[ID] then return end if plytbl.Vehicles[ID].TColor then plytbl.Vehicles[ID].Color = plytbl.Vehicles[ID].TColor end if plytbl.Vehicles[ID].TSkin then plytbl.Vehicles[ID].Skin = plytbl.Vehicles[ID].TSkin end if plytbl.Vehicles[ID].TBGroups then plytbl.Vehicles[ID].BGroups = plytbl.Vehicles[ID].TBGroups end  ModelView.RefreshCustomisation = true net.Start("VC_CD_Vehicle_Options_Send") net.WriteEntity(NPC) net.WriteString(ID) net.WriteTable(plytbl.Vehicles[ID]) net.SendToServer()  end   Cust_Reset.Paint = function(obj, Sx, Sy) surface.SetMaterial(VC.Material.Button) surface.SetDrawColor(VC.Color.White.r,VC.Color.White.g,VC.Color.White.b,obj:IsHovered() and 255 or 100) surface.DrawTexturedRect(0,0, Sx, Sy) draw.DrawText(VC.Lng("Reset"), obj:IsHovered() and "VC_Dev_Text" or "VC_Dev_Text", Sx/2, 0, Color(255,255,255,255), TEXT_ALIGN_CENTER) end  Cust_Reset.DoClick = function()  local ID = Pnl.Sel_Mdl and VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin) if !ID or !plytbl.Vehicles or !plytbl.Vehicles[ID] then return end plytbl.Vehicles[ID].TColor = nil plytbl.Vehicles[ID].Color = nil plytbl.Vehicles[ID].TSkin = nil plytbl.Vehicles[ID].Skin = nil plytbl.Vehicles[ID].TBGroups = nil plytbl.Vehicles[ID].BGroups = nil  ModelView.RefreshCustomisation = true ModelView:GetEntity():SetSkin(Pnl.Sel_Mdl.DefaultSkin or 0) if Pnl.Sel_Mdl.BGroups then ModelView:GetEntity():SetBodyGroups(Pnl.Sel_Mdl.BGroups) end ChangeCustomisation(!Pnl.Sel_Mdl.DD_Clr, !Pnl.Sel_Mdl.DD_Skin, !Pnl.Sel_Mdl.DD_BGrp) net.Start("VC_CD_Vehicle_Options_Send") net.WriteEntity(NPC) net.WriteString(ID) net.WriteTable(plytbl.Vehicles[ID]) net.SendToServer()  end  function Pnl.DoSelect(k, v)  Pnl.Sel_Mdl = table.Copy(v) Pnl.Sel_Mdl.ID = k ModelView:SetModel(v.Model) ModelView.ModelLength = ModelView:GetEntity():GetRenderBounds():Length()*1.5-200  if Pnl.Sel_Mdl.BGroups then ModelView:GetEntity():SetBodyGroups(Pnl.Sel_Mdl.BGroups) end ModelView:GetEntity():SetSkin(Pnl.Sel_Mdl.DefaultSkin or 0) local ent = ModelView:GetEntity() ent:SetPoseParameter("vehicle_steer", -1) ent:SetPoseParameter("vehicle_wheel_rl_height", 0.5) ent:SetPoseParameter("vehicle_wheel_rr_height", 0.5) ent:SetPoseParameter("vehicle_wheel_fl_height", 0.5) ent:SetPoseParameter("vehicle_wheel_fr_height", 0.5)  if ModelView.VC_ToSelect and ModelView.VC_ToSelect != Pnl.Sel_Mdl.ID then ModelView.VC_LastSpeed = SwitchSpeed*1.45*math.Clamp(ModelView.VC_ToSelect-Pnl.Sel_Mdl.ID, -1, 1) else ModelView.VC_ToSelect = nil end  ChangeCustomisation(!v.DD_Clr, !v.DD_Skin, !v.DD_BGrp)  end   function Pnl.NextModel() if Pnl.Sel_Mdl then local i, amount = Pnl.Sel_Mdl.ID+1, #Pnl.VC_VehicleList if amount > 1 then if i <= amount then Pnl.DoSelect(i, Pnl.VC_VehicleList[i]) else Pnl.DoSelect(1, Pnl.VC_VehicleList[1]) end end end end  function Pnl.PrevModel() if Pnl.Sel_Mdl then local i, amount = Pnl.Sel_Mdl.ID-1, #Pnl.VC_VehicleList if amount > 1 then if i > 0 then Pnl.DoSelect(i, Pnl.VC_VehicleList[i]) else Pnl.DoSelect(amount, Pnl.VC_VehicleList[amount]) end end end end    local Close = CreateButtonTop(VC.Lng("Close"), MPx-100, nil, true) Close.DoClick = function() Pnl:Close() end   local All = CreateButtonTop(VC.Lng("All"), 0, 1) All.DoClick = function() if All.IgnoreAnim then All.IgnoreAnim = nil else HorzResetAlpha() end Pnl.VC_RefreshModelList = true Pnl.Sel = 1 end  local Purchased = CreateButtonTop(VC.Lng("Purchased"), 200, 2) Purchased.DoClick = function() HorzResetAlpha() Pnl.VC_RefreshModelList = true Pnl.Sel = 2 end  local Available = CreateButtonTop(VC.Lng("Available"), 400, 3) Available.DoClick = function() HorzResetAlpha() Pnl.VC_RefreshModelList = true Pnl.Sel = 3 end  local Job = CreateButtonTop(VC.Lng("JobRelated"), 600, 4) Job.DoClick = function() HorzResetAlpha() Pnl.VC_RefreshModelList = true Pnl.Sel = 4 end   All.IgnoreAnim = true All.DoClick()   Horz.Think = function()  if Btn_Prev:IsDown() then Horz.OffsetX = Horz.OffsetX- (2000* Pnl.FrameRate) Horz:InvalidateLayout(true) end  if Btn_Next:IsDown() then Horz.OffsetX = Horz.OffsetX+ (2000* Pnl.FrameRate) Horz:InvalidateLayout(true) end  end  function Horz:OnMouseWheeled(delta) Horz.OffsetX = Horz.OffsetX+ delta*-100 self:InvalidateLayout(true) return true end   function Horz:PerformLayout()  local w, h = self:GetSize() local x = 0  self.pnlCanvas:SetTall(h)  if self.Panels then  for k, v in pairs(self.Panels) do if IsValid(v) then v:SetPos(x, 0) v:SetTall(h) v:ApplySchemeSettings() x = x+ v:GetWide()- self.m_iOverlap end end  self.pnlCanvas:SetWide(x + self.m_iOverlap)  if (w < self.pnlCanvas:GetWide()) then self.OffsetX = math.Clamp(self.OffsetX, 0, self.pnlCanvas:GetWide()- self:GetWide()) else self.OffsetX = 0 end  self.pnlCanvas.x = Lerp(0.1, self.pnlCanvas.x, -self.OffsetX)  end  self.btnLeft:SetVisible(false) self.btnRight:SetVisible(false)  Btn_Prev:SetVisible(self.pnlCanvas.x < -25) Btn_Next:SetVisible(self.pnlCanvas.x + self.pnlCanvas:GetWide() > (self:GetWide()+25))  end   Btn_Next.Paint = function(obj, Sx, Sy) surface.SetDrawColor(255,255,255, obj:IsHovered() and 255 or 55) surface.SetMaterial(VC.Material.Right) surface.DrawTexturedRect(0, 10, Sx, Sy-20) end  Btn_Prev.Paint = function(obj, Sx, Sy) surface.SetDrawColor(255,255,255, obj:IsHovered() and 255 or 55) surface.SetMaterial(VC.Material.Left) surface.DrawTexturedRect(0, 10, Sx, Sy-20) end   local nvf = VC.Lng("NoVehiclesFound")  Horz.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, clr)  surface.SetDrawColor(clr.r,clr.g,clr.b,clr.a)  surface.SetMaterial(VC.Material.Fade)  surface.DrawTexturedRectRotated(Sx+VC.FadeW/2, Sy/2, VC.FadeW, Sy, 0)  surface.DrawTexturedRectRotated(-VC.FadeW/2, Sy/2, VC.FadeW, Sy, 180)   if !Pnl.Sel_Mdl then draw.DrawText(nvf, "VC_Big_Italic", Sx/2, 35, VC.Color.Blue, TEXT_ALIGN_CENTER) end end   local MainPanel = VC.Add_El_List(ModelView:GetWide()/2-200, ModelView:GetTall()-100-50, 400, 50) MainPanel:SetParent(Pnl) MainPanel:NoClipping(true) MainPanel:AlphaTo(0, 0, 0)  MainPanel.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, clr)  surface.SetMaterial(VC.Material.Fade)  surface.DrawTexturedRectRotated(Sx+VC.FadeW/2, Sy/2, VC.FadeW, Sy, 0)  surface.DrawTexturedRectRotated(-VC.FadeW/2, Sy/2, VC.FadeW, Sy, 180)  end   local mat_dollar = Material("icon16/money_dollar.png")  local mat_free = Material("vcmod/pricetag_free.png")  local mat_price = Material("vcmod/pricetag.png")   local BuySell = vgui.Create("DButton") BuySell:SetSize(MainPanel:GetWide()/2, MainPanel:GetTall()-8) BuySell:SetPos(0,4) BuySell:SetParent(MainPanel) BuySell:NoClipping(true) BuySell:SetText("") BuySell.VC_Type = 2  local Spawn = vgui.Create("DButton") Spawn:SetSize(MainPanel:GetWide()/2, MainPanel:GetTall()-8) Spawn:SetPos(MainPanel:GetWide()/2+8,4) Spawn:SetParent(MainPanel) Spawn:NoClipping(true) Spawn:SetText("") Spawn.VC_Type = 1  BuySell.DoClick = function()  if BuySell.VC_Type == 1 then  if Pnl.Sel_Mdl then  local id = VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin)  Pnl.VC_RefreshModelList = 2  if plytbl.Vehicles and plytbl.Vehicles[id] then return end  if VC.CD.IsRestricted(LocalPlayer(), VC.CD.Main_Pnl.Sel_Mdl, VC.CD.LastTbl) then return false end  if !VC.CD.CanAffordVehicle(LocalPlayer(), Pnl.Sel_Mdl.Price) then VCPopup("CD_Cant_Afford", "cross", 2.5) return end  local Settings = {}  VC.CD.Buy_Vehicle(NPC, id, Settings)  if !plytbl.Vehicles then plytbl.Vehicles = {} end plytbl.Vehicles[id] = Settings  VCPopup("Purchased", "check", 1.5)  HorzResetAlpha()  end  elseif BuySell.VC_Type == 2 then  if Spawn.VC_Type == 4 then VCPopup("FirstReturnTheVehicle", "cross") Pnl.VC_RefreshModelList = 3 return end  local C_Pnl = vgui.Create("DFrame") C_Pnl:SetSize(400, 200) C_Pnl:SetTitle("") C_Pnl:SetPos(ScrW()/2-C_Pnl:GetWide()/2,ScrH()/2-C_Pnl:GetTall()/2) C_Pnl:SetDraggable(false) C_Pnl:ShowCloseButton(false) C_Pnl:AlphaTo(0, 0, 0) C_Pnl:AlphaTo(255, 0.2, 0) C_Pnl:SetParent(Pnl)  C_Pnl.VC_FocusCheckTime = CurTime()+1  C_Pnl.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, VC.Color.Main) surface.SetDrawColor(255,255,255,225) surface.SetMaterial(mat_dollar)  local Sure = VC.Lng("AreYouSureYouWantToSell")..' "'..Pnl.Sel_Mdl.Name..'"?' draw.DrawText(Sure, "VC_Dev_Text", Sx/2, 30, VC.Color.Neutral, TEXT_ALIGN_CENTER) local sz = surface.GetTextSize(Sure)+20 if sz > Sx then C_Pnl:SetWide(sz) end  draw.DrawText(VC.Lng("OriginalPrice")..":", nil, 30, 70, VC.Color.Neutral, TEXT_ALIGN_LEFT) draw.DrawText(Pnl.Sel_Mdl.Price == 0 and VC.Lng("Free") or Pnl.Sel_Mdl.Price, nil, 170, 70, VC.Color.Blue, TEXT_ALIGN_LEFT) surface.DrawTexturedRect(155, 70, 14, 14)  draw.DrawText(VC.Lng("RefundPercentage")..":", nil, 30, 85, VC.Color.Neutral, TEXT_ALIGN_LEFT) draw.DrawText(VC.CD_RefundPrice, nil, 170, 85, VC.Color.Blue, TEXT_ALIGN_LEFT)  draw.DrawText(VC.Lng("SellingPrice")..":", nil, 30, 100, VC.Color.Neutral, TEXT_ALIGN_LEFT) draw.DrawText((VC.CD_RefundPrice == 0 or Pnl.Sel_Mdl.Price == 0) and VC.Lng("None") or math.Round(Pnl.Sel_Mdl.Price*VC.CD_RefundPrice/100), nil, 170, 100, VC.Color.Blue, TEXT_ALIGN_LEFT) surface.DrawTexturedRect(155, 100, 14, 14)  if CurTime() >= C_Pnl.VC_FocusCheckTime and !C_Pnl:HasFocus() then C_Pnl:Remove() end  end   local Accept = vgui.Create("DButton", C_Pnl) Accept:SetText(VC.Lng("Accept")) Accept:SetFont("VC_Big_Italic") Accept:SetSize(C_Pnl:GetWide()/2-30, 50) Accept:SetPos(20, C_Pnl:GetTall()-Accept:GetTall()-15)  Accept.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, Color(0,255,0,255))  draw.RoundedBox(0, 0, 0, Sx, Sy, Color(255, 255, 255, 100))  end  local Cancel = vgui.Create("DButton", C_Pnl) Cancel:SetText(VC.Lng("Cancel")) Cancel:SetFont("VC_Big_Italic") Cancel:SetSize(C_Pnl:GetWide()/2-30,50) Cancel:SetPos(C_Pnl:GetWide()/2+10, C_Pnl:GetTall()-Cancel:GetTall()-15)  Cancel.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, VC.Color.Bad)  draw.RoundedBox(0, 0, 0, Sx, Sy, Color(255, 255, 255, 55))  end   Accept.DoClick = function()  if Pnl.Sel_Mdl then  local id = VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin)  if !plytbl.Vehicles or !plytbl.Vehicles[id] then Pnl:Close() return end  VC.CD.Sell_Vehicle(NPC, id)  plytbl.Vehicles[id] = nil  VCPopup("Sold", "check", 1.5)  HorzResetAlpha() Pnl.VC_RefreshModelList = 2  C_Pnl:Close()  end  end   C_Pnl.Think = function()  local backDown = input.IsKeyDown(KEY_BACKSPACE) if backDown and !backPressed then Cancel.DoClick() backPressed = true elseif !backDown and backPressed then backPressed = false end  local enterDown = input.IsKeyDown(KEY_ENTER) if enterDown and !enterPressed then Accept.DoClick() enterPressed = true elseif !enterDown and enterPressed then enterPressed = false end  end  Cancel.DoClick = function() C_Pnl:Close() end  C_Pnl:MakePopup()  end  end   local text_purcase = VC.Lng("Purchase") local text_sell = VC.Lng("Sell")  BuySell.Paint = function(obj, Sx, Sy)  if !MainPanel.Price then return end  surface.SetMaterial(VC.Material.Button)  if BuySell.VC_Type == 1 then  surface.SetDrawColor(VC.Color.Good.r,VC.Color.Good.g,VC.Color.Good.b, obj:IsHovered() and 255 or 100)  surface.DrawTexturedRect(0,0, Sx, Sy)  draw.DrawText(text_purcase, obj:IsHovered() and "VC_Big_Italic" or "VC_Big", Sx/2, 8, Color(255,255,255,255), TEXT_ALIGN_CENTER)  if MainPanel.Price == 0 then  surface.SetDrawColor(255,255,255,255) surface.SetMaterial(mat_free) surface.DrawTexturedRect(0, 0, 40, 40)  else  surface.SetDrawColor(255,255,255,255) surface.SetMaterial(mat_price) surface.DrawTexturedRect(-25, Sy-20, 90, 20)  local tclr = table.Copy(VC.Color.Good) draw.DrawText(MainPanel.Price, "VC_HUD_Bisgs", -10, Sy-20, tclr, TEXT_ALIGN_LEFT)  surface.SetMaterial(mat_dollar) surface.DrawTexturedRect(-25, Sy-18, 14, 14)  end  elseif BuySell.VC_Type == 2 then  surface.SetDrawColor(VC.Color.Neutral.r,VC.Color.Neutral.g,VC.Color.Neutral.b,obj:IsHovered() and 255 or 100)  surface.DrawTexturedRect(0,0, Sx, Sy)  draw.DrawText(text_sell, obj:IsHovered() and "VC_Big_Italic" or "VC_Big", Sx/2, 8, Color(255,255,255,255), TEXT_ALIGN_CENTER)   surface.SetDrawColor(255,255,255,255) surface.SetMaterial(mat_price) surface.DrawTexturedRect(-23, Sy-20, 90, 20)  local tclr = table.Copy(VC.Color.Good) draw.DrawText(MainPanel.Price, "VC_HUD_Bisgs", -10, Sy-20, tclr, TEXT_ALIGN_LEFT)  surface.SetMaterial(mat_dollar) surface.DrawTexturedRect(-25, Sy-18, 14, 14)  end  end   Spawn.DoClick = function()  local ID = VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin) local Settings = plytbl.Vehicles and plytbl.Vehicles[ID]  if !Settings then Settings = {} Settings.Color = cust_temp_color Settings.Skin = cust_temp_skin end  if Spawn.VC_Type == 1 then  if Pnl.Sel_Mdl then VC.CD.TestDrive(NPC, ID, Settings) Pnl.VC_RefreshModelList = 3 end  elseif Spawn.VC_Type == 2 then  if Pnl.Sel_Mdl then VC.CD.Spawn(NPC, ID, tbl, Settings, plytbl) Pnl.VC_RefreshModelList = 3 end  elseif Spawn.VC_Type == 3 then  VC.CD.EndTestDrive()  elseif Spawn.VC_Type == 4 then  VC.CD.Return(NPC, ID)  end  end   Spawn.Paint = function(obj, Sx, Sy)  surface.SetMaterial(VC.Material.Button)  if Spawn.VC_Type == 1 then  local tclr = table.Copy(VC.Color.Blue) tclr.r = 255 surface.SetDrawColor(tclr.r, tclr.g, tclr.b, obj:IsHovered() and 255 or 100)  surface.DrawTexturedRect(0,0, Sx, Sy)  draw.DrawText(VC.Lng("TestDrive"), obj:IsHovered() and "VC_Big_Italic" or "VC_Big", Sx/2, 8, Color(255,255,255,255), TEXT_ALIGN_CENTER)  elseif Spawn.VC_Type == 2 then  surface.SetDrawColor(VC.Color.Blue.r,VC.Color.Blue.g,VC.Color.Blue.b, obj:IsHovered() and 255 or 100)  surface.DrawTexturedRect(0,0, Sx, Sy)  draw.DrawText(VC.Lng("Spawn"), obj:IsHovered() and "VC_Big_Italic" or "VC_Big", Sx/2, 8, Color(255,255,255,255), TEXT_ALIGN_CENTER)  elseif Spawn.VC_Type == 3 then  local tclr = table.Copy(VC.Color.Neutral) tclr.r = 255 tclr.g = tclr.r/2 surface.SetDrawColor(tclr.r, tclr.g, tclr.b, obj:IsHovered() and 255 or 100)  surface.DrawTexturedRect(0,0, Sx, Sy)  draw.DrawText(VC.Lng("EndTestDrive"), obj:IsHovered() and "VC_Big_Italic" or "VC_Big", Sx/2, 8, Color(255,255,255,255), TEXT_ALIGN_CENTER)  elseif Spawn.VC_Type == 4 then  local tclr = table.Copy(VC.Color.Bad) tclr.r = 255 tclr.g = tclr.r/2 surface.SetDrawColor(tclr.r, tclr.g, tclr.b, obj:IsHovered() and 255 or 100)  surface.DrawTexturedRect(0,0, Sx, Sy)  draw.DrawText(VC.Lng("Return"), obj:IsHovered() and "VC_Big_Italic" or "VC_Big", Sx/2, 8, Color(255,255,255,255), TEXT_ALIGN_CENTER)  end  end   local function GetTblID(k, dec) local ID, amount = 0, #Pnl.VC_VehicleList if dec then ID = k-1 if ID < 1 then ID = amount end else ID = k+1 if ID > amount then ID = 1 end end return ID end   local models = {} local tabPressed = nil local spacePressed = nil  Pnl.Think = function()  if Pnl:HasFocus() then  local tabDown = input.IsKeyDown(KEY_TAB) if tabDown and !tabPressed then if Pnl.Sel then if Pnl.Sel == 1 then Purchased.DoClick() elseif Pnl.Sel == 2 then Available.DoClick() elseif Pnl.Sel == 3 then Job.DoClick() else All.DoClick() end end tabPressed = true elseif !tabDown and tabPressed then tabPressed = false end  local spaceDown = input.IsKeyDown(KEY_SPACE) if spaceDown and !spacePressed then Spawn.DoClick() spacePressed = true elseif !spaceDown and spacePressed then spacePressed = false end  local enterDown = input.IsKeyDown(KEY_ENTER) if enterDown and !enterPressed then BuySell.DoClick() enterPressed = true elseif !enterDown and enterPressed then enterPressed = false end  local backDown = input.IsKeyDown(KEY_BACKSPACE) if backDown and !backPressed then Close.DoClick() backPressed = true elseif !backDown and backPressed then backPressed = false end  local leftDown = input.IsKeyDown(KEY_A) or input.IsKeyDown(KEY_LEFT) if leftDown then if Pnl.Sel_Mdl then ModelView.VC_LastSpeed = ModelView.VC_LastSpeed-10 end end  local rightDown = input.IsKeyDown(KEY_D) or input.IsKeyDown(KEY_RIGHT) if rightDown then if Pnl.Sel_Mdl then ModelView.VC_LastSpeed = ModelView.VC_LastSpeed+10 end end  local upDown = input.IsKeyDown(KEY_W) or input.IsKeyDown(KEY_UP) if upDown then if Pnl.Sel_Mdl then ModelView.VC_RotX=ModelView.VC_RotX-17 end end  local downDown = input.IsKeyDown(KEY_S) or input.IsKeyDown(KEY_DOWN) if downDown then if Pnl.Sel_Mdl then ModelView.VC_RotX = ModelView.VC_RotX+17 end end  end   local Alpha = MainPanel:GetAlpha()  local ShouldDraw = Pnl.Sel_Mdl and ModelView.VC_Progress and ModelView.VC_Progress > -250 and ModelView.VC_Progress < 250 and (math.abs(ModelView.VC_LastSpeed) < 20 or ModelView.VC_IsCapturing)  if ShouldDraw and (Alpha == 0 or !MainPanel:IsVisible()) then  MainPanel:SetVisible(true) MainPanel:AlphaTo(255, 0.3, 0) local ID = VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin)  BuySell.VC_Type = plytbl.Vehicles and plytbl.Vehicles[ID] and 2 or 1  Spawn.VC_Type = BuySell.VC_Type  if VC.CD.SpawnedTestDriveData then Spawn.VC_Type = 3 end  if plytbl.Vehicles and plytbl.Vehicles[ID] and plytbl.Vehicles[ID].Spawned then Spawn.VC_Type = 4 end   MainPanel.Price = Pnl.Sel_Mdl.Price  elseif Alpha == 255 and !ShouldDraw then MainPanel:AlphaTo(0, 0.1, 0)  end  if !ShouldDraw and Alpha == 0 then MainPanel:SetVisible(false) end   local Alpha = OptionsPanel:GetAlpha()  local ShouldDraw = Pnl.Sel_Mdl and OptionsPanel.Can and ModelView.VC_Progress and ModelView.VC_Progress > -100 and ModelView.VC_Progress < 100 and math.abs(ModelView.VC_LastSpeed) < 20 and !ModelView.VC_IsCapturing  if ShouldDraw and (Alpha == 0 or !OptionsPanel:IsVisible()) then  OptionsPanel:SetVisible(true) OptionsPanel:AlphaTo(255, 0.3, 0) local ID = VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin)  elseif Alpha == 255 and !ShouldDraw then OptionsPanel:AlphaTo(0, 0.1, 0)  end  if !ShouldDraw and Alpha == 0 then OptionsPanel:SetVisible(false) end   if VC.CD.Main_Pnl.Returned then  if VC.CD.Main_Pnl.Returned[2] == 0 then VCPopup("VehicleReturned", "check") else VCPopup(VC.Lng("VehicleTowedFor").." "..VC.CD.Main_Pnl.Returned[2].."$.", "info", 4) end  if plytbl.Vehicles and plytbl.Vehicles[VC.CD.Main_Pnl.Returned[1]] then plytbl.Vehicles[VC.CD.Main_Pnl.Returned[1]].Spawned = nil if VC.CD.GetName(Pnl.Sel_Mdl.Model, Pnl.Sel_Mdl.Name, Pnl.Sel_Mdl.DefaultSkin) == VC.CD.Main_Pnl.Returned[1] then VC.CD.Main_Pnl.VC_RefreshModelList = 3 end end  VC.CD.Main_Pnl.Returned = nil  end   Pnl.FrameRate = VGUIFrameTime()- (Pnl.FrameTime or 0) Pnl.FrameTime = VGUIFrameTime()  if Pnl.VC_RefreshModelList then   Pnl.VC_VehicleList = {}  if Pnl.Sel == 1 then  for k,v in pairs(tbl.Vehicles) do table.insert(Pnl.VC_VehicleList, v) end  elseif Pnl.Sel == 2 then  if plytbl and plytbl.Vehicles then for k,v in pairs(plytbl.Vehicles) do if tbl.Vehicles[k] then table.insert(Pnl.VC_VehicleList, tbl.Vehicles[k]) end end end  elseif Pnl.Sel == 3 then  for k,v in pairs(tbl.Vehicles) do local can = true if plytbl and plytbl.Vehicles and plytbl.Vehicles[k] then can = false end if can then table.insert(Pnl.VC_VehicleList, v) end end  elseif Pnl.Sel == 4 then  if tbl.JobRestrict then  local JobName = LocalPlayer().getJobTable and LocalPlayer():getJobTable() and LocalPlayer():getJobTable().name or "Unknown"  for k,v in pairs(tbl.Vehicles) do  local can = true   if !v.JobRestrict[JobName] then can = false end    if can then table.insert(Pnl.VC_VehicleList, v) end  end  end  end   local ttbl = {} for k, v in pairs(Pnl.VC_VehicleList) do ttbl[k] = (v.Name or "Unknown").."__vc__"..k end table.sort(ttbl)  local ttsbl2 = {} for k,v in pairs(ttbl) do local num = tonumber(string.Explode("__vc__", v)[2]) ttsbl2[k] = Pnl.VC_VehicleList[num]end  Pnl.VC_VehicleList = table.Copy(ttsbl2)   if Pnl.VC_RefreshModelList == 3 then MainPanel:AlphaTo(0, 0.1, 0) Pnl.VC_RefreshModelList = nil return end   local oldmdl = table.Copy(Pnl.Sel_Mdl) local oldclr = nil local oldskin = nil local oldbgrps = nil local LProgress, LSpeed = ModelView.VC_Progress, ModelView.VC_LastSpeed   if IsValid(ModelView:GetEntity()) then oldclr = ModelView:GetColor() oldskin = ModelView:GetEntity():GetSkin() oldbgrps = "" if oldbgrps == "" then oldbgrps = oldbgrps.."0" for k,v in pairs(ModelView:GetEntity():GetBodyGroups()) do oldbgrps = oldbgrps..ModelView:GetEntity():GetBodygroup(k) end end end   local mat_lock = Material("icon16/lock.png")  ModelView:SetModel("") ModelView.ModelLength = 0 Pnl.Sel_Mdl = nil ModelView.VC_Progress = 350 ModelView.VC_LastSpeed = 25   for k,v in pairs(models) do if IsValid(v[1]) then v[1]:Remove() end end models = {} local LastOffset = Horz.OffsetX  for k,v in pairs(Pnl.VC_VehicleList) do  local mdl = vgui.Create("DModelPanel", Pnl) mdl:SetModel(v.Model) mdl.ModelLength = mdl:GetEntity():GetRenderBounds():Length()*1.5-200 mdl:SetLookAng(Vector(0, 0, 62)) mdl:SetSize(250, 150)  function mdl:LayoutEntity() mdl:SetLookAng(Angle(0, 180, 0)) mdl:SetCamPos(Vector(mdl:IsHovered() and 250 or 280, 0,60)-Angle(0, 180, 0):Forward()*mdl.ModelLength) return end  mdl.DoClick = function() if Pnl.Sel_Mdl then ModelView.VC_ToSelect = k ModelView.VC_Progress = 0 ModelView.VC_LastSpeed = SwitchSpeed*math.Clamp(k-Pnl.Sel_Mdl.ID, -1, 1) MainPanel:AlphaTo(0, 0.1, 0) else Pnl.DoSelect(k,v) end end  mdl.DoDoubleClick = function() Pnl.DoSelect(k,v) ModelView.VC_Progress = 0 ModelView.VC_LastSpeed = 0 end   local ID = VC.CD.GetName(v.Model, v.Name, v.DefaultSkin) local Restr = VC.CD.IsRestricted(LocalPlayer(), v, tbl, true)   if v.BGroups then mdl:GetEntity():SetBodyGroups(v.BGroups) end mdl:GetEntity():SetSkin(v.DefaultSkin or 0)   mdl.PaintOver = function(obj, Sx, Sy)  local tclr = table.Copy(clr)  local sel = Pnl.Sel_Mdl and Pnl.Sel_Mdl.Name == v.Name and (Pnl.Sel_Mdl.DefaultSkin or 0) == (v.DefaultSkin or 0) and Pnl.Sel_Mdl.Model == v.Model    draw.RoundedBox(0, 0, 0, Sx, 25, clr)   if !mdl:IsHovered() and !(mdl:IsHovered() or sel) then draw.RoundedBox(0, 0, 0, Sx, Sy, Color(0,0,0,200)) end  if mdl:IsDown() then draw.RoundedBox(0, 0, 0, Sx, Sy, Color(0,100,100,55)) end  draw.DrawText(v.Name, nil, Sx/2,7, table.Copy(VC.Color.Neutral), TEXT_ALIGN_CENTER)    local pos = 0  if mdl:IsHovered() then tclr = table.Copy(VC.Color.Blue) surface.SetDrawColor(tclr.r,tclr.g,tclr.b,tclr.a) surface.DrawLine(pos, 0, pos+Sx-1, 0) surface.DrawLine(pos, Sy-1, pos+Sx-1, Sy-1) surface.DrawLine(pos, 0, pos, Sy-1) surface.DrawLine(pos+Sx-1, 0, pos+Sx-1, Sy-1) end  if sel then tclr = table.Copy(VC.Color.Good) pos = -ModelView.VC_Progress/3 surface.SetDrawColor(tclr.r,tclr.g,tclr.b,tclr.a) surface.DrawLine(pos, 0, pos+Sx-1, 0) surface.DrawLine(pos, Sy-1, pos+Sx-1, Sy-1) surface.DrawLine(pos, 0, pos, Sy-1) surface.DrawLine(pos+Sx-1, 0, pos+Sx-1, Sy-1) end   if v.Price == 0 then  surface.SetDrawColor(255,255,255,(mdl:IsHovered() or sel) and 255 or 30) surface.SetMaterial(mat_free) surface.DrawTexturedRect(0, 0, 80, 80)  else  local alpha = (mdl:IsHovered() or sel) and 255 or 55  surface.SetDrawColor(255,255,255,alpha) surface.SetMaterial(mat_price) surface.DrawTexturedRect(Sx-80, Sy-20, 90, 20)  local tclr = table.Copy(VC.Color.Good) tclr.a = alpha draw.DrawText(v.Price, "VC_HUD_Bisgs", Sx-65, Sy-20, tclr, TEXT_ALIGN_LEFT)  surface.SetMaterial(mat_dollar) surface.DrawTexturedRect(Sx-80, Sy-18, 14, 14)  end   if Restr then surface.SetDrawColor(255,255,255,255) surface.SetMaterial(mat_lock) surface.DrawTexturedRect(5, 5, 15, 15) end   if plytbl.Vehicles and plytbl.Vehicles[ID] then surface.SetMaterial(VC.Material.Check) surface.DrawTexturedRect(Sx-30, 0, 30, 30) end   if Pnl.Sel_Mdl and Pnl.Sel_Mdl.ID != k and Pnl.Sel_Mdl.ID == GetTblID(k) then tclr = table.Copy(VC.Color.Good) pos = -ModelView.VC_Progress/3+mdl:GetWide()+1 surface.SetDrawColor(tclr.r,tclr.g,tclr.b,tclr.a) surface.DrawLine(pos, 0, pos+Sx-1, 0) surface.DrawLine(pos, Sy-1, pos+Sx-1, Sy-1) surface.DrawLine(pos, 0, pos, Sy-1) surface.DrawLine(pos+Sx-1, 0, pos+Sx-1, Sy-1) end  if Pnl.Sel_Mdl and Pnl.Sel_Mdl.ID != k and Pnl.Sel_Mdl.ID == GetTblID(k, true) then tclr = table.Copy(VC.Color.Good) pos = -ModelView.VC_Progress/3-mdl:GetWide()-1 surface.SetDrawColor(tclr.r,tclr.g,tclr.b,tclr.a) surface.DrawLine(pos, 0, pos+Sx-1, 0) surface.DrawLine(pos, Sy-1, pos+Sx-1, Sy-1) surface.DrawLine(pos, 0, pos, Sy-1) surface.DrawLine(pos+Sx-1, 0, pos+Sx-1, Sy-1) end  end  Horz:AddPanel(mdl)  table.insert(models, {mdl, ID})  end  Horz.OffsetX = LastOffset Horz.pnlCanvas.x = -Horz.OffsetX  local ran = false if oldmdl then for k,v in pairs(Pnl.VC_VehicleList) do if (v.Name or "Unknown") == (oldmdl.Name or "Unknown") and v.Model == oldmdl.Model and (v.DefaultSkin or 0) == (oldmdl.DefaultSkin or 0) then ModelView.VC_Progress = LProgress ModelView.VC_LastSpeed = LSpeed if Pnl.VC_RefreshModelList == 2 then MainPanel:AlphaTo(0, 0.1, 0) end ran = true Pnl.DoSelect(k, v) if oldclr then ModelView:SetColor(oldclr) ModelView:GetEntity():SetSkin(oldskin) ModelView:GetEntity():SetBodyGroups(oldbgrps) end break end end end  if !ran and #Pnl.VC_VehicleList > 0 then Pnl.DoSelect(1,Pnl.VC_VehicleList[1]) end  Pnl.VC_RefreshModelList = nil ModelView.RefreshCustomisation = true  end   if ModelView.RefreshCustomisation then  for k,v in pairs(models) do  if plytbl.Vehicles and plytbl.Vehicles[v[2]] then  if !tbl.DD_Clr and !tbl.Vehicles[v[2]].DD_Clr then v[1]:SetColor(plytbl.Vehicles[v[2]].Color or Color(255,255,255,255)) end  if !tbl.DD_Skin and !tbl.Vehicles[v[2]].DD_Skin then v[1]:GetEntity():SetSkin(plytbl.Vehicles[v[2]].Skin or tbl.Vehicles[v[2]].DefaultSkin or 0) end  if !tbl.DD_BGrp and !tbl.Vehicles[v[2]].DD_BGrp then if plytbl.Vehicles[v[2]].BGroups then for k2,v2 in pairs(plytbl.Vehicles[v[2]].BGroups) do v[1]:GetEntity():SetBodygroup(k2,v2) end elseif tbl.Vehicles[v[2]].BGroups then v[1]:GetEntity():SetBodyGroups(tbl.Vehicles[v[2]].BGroups) end end  end  end  ModelView.RefreshCustomisation = nil  end  end  Pnl:MakePopup() end  function VC.CD.open_menu_main(NPC, tbl, plytbl, int) if !IsValid(VC.CD.Main_Pnl) then if !NPC.VC_LoadingMsg then VCPopup("CD_Loading", "info", 0.5) timer.Simple(0.1, function() DoMainMenu(NPC, tbl, plytbl, int) end) NPC.VC_LoadingMsg = true else DoMainMenu(NPC, tbl, plytbl, int) end end end function VC.CD.Buy_Vehicle(NPC, ID, settings) net.Start("VC_CD_Buy_Vehicle") net.WriteEntity(NPC) net.WriteString(ID) net.WriteTable(settings) net.SendToServer() end function VC.CD.Sell_Vehicle(NPC, ID) net.Start("VC_CD_Sell_Vehicle") net.WriteEntity(NPC) net.WriteString(ID) net.SendToServer() end function VC.CD.TestDrive(NPC, ID, settings) net.Start("VC_CD_StartTestDrive") net.WriteEntity(NPC) net.WriteString(ID) net.WriteTable(settings) net.SendToServer() end function VC.CD.EndTestDrive(nosend) VCPopup("TestDriveEnded") VC.CD.SpawnedTestDriveData = nil if VC.CD.Main_Pnl and VC.CD.Main_Pnl:IsVisible() then VC.CD.Main_Pnl.VC_RefreshModelList = 3 end if !nosend then net.Start("VC_CD_EndTestDrive") net.SendToServer() end end function VC.CD.Spawn(NPC, ID, tbl, settings, plytbl) if plytbl.Vehicles and plytbl.Vehicles[ID] and !plytbl.Vehicles[ID].Spawned then if VC.CD.IsRestricted(LocalPlayer(), VC.CD.Main_Pnl.Sel_Mdl, VC.CD.LastTbl) then return false end if tbl and tbl.Platforms then local pos, ang = VC.CD.GetSpawnPosAng(LocalPlayer(), tbl, NPC) if !pos or !ang then VCPopup("ParkingLotsTaken", "cross") return end plytbl.Vehicles[ID].Spawned = true net.Start("VC_CD_Spawn_Vehicle") net.WriteEntity(NPC) net.WriteString(ID) net.WriteTable(settings) net.SendToServer() end else VCPopup("Error spawning.", "cross") end end function VC.CD.Return(NPC, ID) net.Start("VC_CD_Return_Vehicle") net.WriteEntity(NPC) net.WriteString(ID) net.SendToServer() end  function VC.CD.open_menu_choice(ent, tbl, plytbl, int)  if !int then int = VC.CD.LastInt end if VC.CD.EditPlatorms and IsValid(VC.CD.EditPlatorms[1]) then VCPopup("Close platform editing menu first.", "cross") return end  if !int then int = VC.CD.LastInt end if VC.CD.EditVehicles and IsValid(VC.CD.EditVehicles[1]) then VCPopup("Close vehicle editing menu first.", "cross") return end  local Pnl = vgui.Create("DFrame") Pnl:SetSize(400, 200) Pnl:SetTitle("") Pnl:SetPos(ScrW()/2-Pnl:GetWide()/2,ScrH()/2-Pnl:GetTall()/2) Pnl:SetDraggable(false) Pnl:ShowCloseButton(false) Pnl:AlphaTo(0, 0, 0) Pnl:AlphaTo(255, 0.2, 0)  Pnl.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, 0, 0, Sx, Sy, VC.Color.Main) draw.DrawText("This menu is only visible to administrators.", "VC_Dev_Text", 10, 10, VC.Color.White, TEXT_ALIGN_LEFT) end   local CarDealer = vgui.Create("VC_Button", Pnl) CarDealer:SetColor(VC.Color.Btn_Add) CarDealer:SetText("Dealer's menu") CarDealer:SetFont("VC_Big_Italic") CarDealer:SetSize(Pnl:GetWide()/2-30,Pnl:GetTall()-55) CarDealer:SetPos(20, 35)  local CarDealer_Edit = vgui.Create("VC_Button", Pnl) CarDealer_Edit:SetColor(VC.Color.Btn_Chng) CarDealer_Edit:SetText("Edit menu") CarDealer_Edit:SetFont("VC_Big_Italic") CarDealer_Edit:SetSize(Pnl:GetWide()/2-30,Pnl:GetTall()-55) CarDealer_Edit:SetPos(Pnl:GetWide()/2+10, 35)   CarDealer.DoClick = function() VC.CD.open_menu_main(ent, tbl, plytbl, int) Pnl:Close() end  CarDealer_Edit.DoClick = function() VC.CD.LastTbl = tbl or table.Copy(VC.CD.Default) VC.CD.LastInt = int if IsValid(ent) then VC.CD.LastNPC = ent VC.CD.open_menu_cardealer_edit(ent) end Pnl:Close() end  Pnl:MakePopup() end  function VC.CD.open_menu_cardealer_edit(ent)  if IsValid(VC.CD_Edit_Panel) then VC.CD_Edit_Panel:Close() VC.CD_Edit_Panel = nil end  local Pnl = vgui.Create("DFrame") VC.CD_Edit_Panel = Pnl Pnl:SetSize(600, 320) Pnl:SetTitle("") Pnl:SetPos(ScrW()/2-Pnl:GetWide()/2,ScrH()/2-Pnl:GetTall()/2) Pnl:ShowCloseButton(false) Pnl:AlphaTo(0, 0, 0) Pnl:AlphaTo(255, 0.2, 0)  VC.CD.LastTbl.Pos = ent:GetPos() VC.CD.LastTbl.Ang = ent:GetAngles() VC.CD.LastTbl.Model = ent:GetModel()  Pnl.Paint = function(obj, Sx, Sy)  draw.RoundedBox(0, 0, 0, Sx, Sy, VC.Color.Main)  draw.RoundedBox(0, 0, 0, Sx, 25, VC.Color.Main)  draw.DrawText('VCMod Car Dealer Editor. Current map - "'..game.GetMap()..'".', "VC_Dev_Text", 7, 5, VC.Color.Neutral, TEXT_ALIGN_LEFT)    draw.RoundedBox(0, 10, 30, 155, 255, VC.Color.Main)  draw.RoundedBox(0, 170, 30, 420, 30, VC.Color.Main)  draw.RoundedBox(0, 170, 65, 420, 60, VC.Color.Main)   draw.DrawText("Name:", "VC_Dev_Text", 15, 40, VC.Color.Neutral, TEXT_ALIGN_LEFT)  draw.DrawText("Model:", "VC_Dev_Text", 15, 215, VC.Color.Neutral, TEXT_ALIGN_LEFT)  draw.DrawText("Pos: "..math.Round(VC.CD.LastTbl.Pos.x)..", "..math.Round(VC.CD.LastTbl.Pos.y)..", "..math.Round(VC.CD.LastTbl.Pos.z), "VC_Dev_Text", 15, 235, VC.Color.Neutral, TEXT_ALIGN_LEFT)  draw.DrawText("Ang: "..math.Round(VC.CD.LastTbl.Ang.p)..", "..math.Round(VC.CD.LastTbl.Ang.y)..", "..math.Round(VC.CD.LastTbl.Ang.r), "VC_Dev_Text", 15, 255, VC.Color.Neutral, TEXT_ALIGN_LEFT)  end   local delete = vgui.Create("VC_Button", Pnl) delete:SetToolTip("Delete the car dealer from the server and all the data files.") delete:SetText("Delete this car dealer") delete:SetSize(Pnl:GetWide()-20,20) delete:SetPos(10, Pnl:GetTall()-delete:GetTall()-10) delete:SetColor(VC.Color.Btn_Rem) delete:SetTextIsWhite(true)  delete.DoClick = function() net.Start("VC_CD_Delete") net.WriteEntity(ent) net.WriteInt(VC.CD.LastInt, 32) net.SendToServer() Pnl:Close() VC.CD.MM_Refresh = true end   local done = vgui.Create("DImageButton", Pnl) done:SetMaterial(VC.Material.Check) done:SetToolTip("Close menu and save settings.") done:SetSize(20+15,20) done:SetPos(Pnl:GetWide()-done:GetWide()-2-15, 2)  done.DoClick = function() net.Start("VC_CD_DoneEditting") net.WriteEntity(ent) net.WriteTable(VC.CD.LastTbl) net.WriteInt(VC.CD.LastInt, 32) net.WriteInt(1, 32) net.SendToServer() Pnl:Close() VC.CD.MM_Refresh = true end   local cancel = vgui.Create("DImageButton", Pnl) cancel:SetMaterial(VC.Material.Cross) cancel:SetToolTip("Discard all settings and close.") cancel:SetSize(20,20) cancel:SetPos(Pnl:GetWide()-cancel:GetWide()-24-45, 2)  cancel.DoClick = function() Pnl:Close() VC.CD.MM_Refresh = true end   local find = vgui.Create("DImageButton", Pnl) find:SetMaterial("icon16/find.png") find:SetToolTip("Adjust all settings.") find:SetSize(20,20) find:SetPos(Pnl:GetWide()-65-60, 2)  find.DoClick = function()  local DDM = DermaMenu()  local ISM = nil  DDM:AddOption("Import from other maps (everything)", function() net.Start("VC_CD_RequestInfo_Import_NPC_OtherInfo") net.WriteEntity(ent) net.SendToServer() end):SetImage("icon16/key.png")  for k,v in pairs(ents.FindByClass("vc_npc_cardealer")) do  if v:GetNWInt("VC_Int") != VC.CD.LastInt then  if !ISM then ISM = DDM:AddSubMenu("Load settings from car dealer:") end  local ISM2 = ISM:AddSubMenu(v:GetNWString("VC_Name", VC.CD.Default.Name))  ISM2:AddOption("Everything", function() if IsValid(v) then net.Start("VC_CD_RequestInfo_Import_NPC") net.WriteEntity(v) net.WriteInt(0, 32) net.SendToServer() end end):SetImage("icon16/key.png")  ISM2:AddSpacer()  ISM2:AddOption("Spawn platforms", function() if IsValid(v) then net.Start("VC_CD_RequestInfo_Import_NPC") net.WriteEntity(v) net.WriteInt(1, 32) net.SendToServer() end end):SetImage("icon16/tab.png")  ISM2:AddOption("Vehicles", function() if IsValid(v) then net.Start("VC_CD_RequestInfo_Import_NPC") net.WriteEntity(v) net.WriteInt(2, 32) net.SendToServer() end end):SetImage("icon16/car.png")  end  end  if DDM then DDM:Open() end  end   local el_name = vgui.Create("DTextEntry", Pnl) el_name:SetTall(20) el_name:SetWide(100) el_name:SetToolTip("Car dealer's name.") el_name:SetValue(VC.CD.LastTbl.Name) el_name:SetPos(60, 35) el_name.OnTextChanged = function() local val = el_name:GetValue() VC.CD.LastTbl.Name = val end  local el_mdlname = vgui.Create("DTextEntry", Pnl) el_mdlname:SetTall(20) el_mdlname:SetWide(100) el_mdlname:SetToolTip("Car dealer's model. Enter it manually here or click on the image.") el_mdlname:SetValue(VC.CD.LastTbl.Model) el_mdlname:SetPos(60, 210) el_mdlname.OnTextChanged = function() local val = el_mdlname:GetValue() VC.CD.LastTbl.Model = val end  local el_mdl = vgui.Create("DModelPanel", Pnl) el_mdl:SetModel(VC.CD.LastTbl.Model) el_mdl:SetCamPos(Vector(20,0,62)) el_mdl:SetLookAt(Vector(0, 0, 62)) el_mdl:SetSize(150, 150) el_mdl:SetPos(10, 50) function el_mdl:LayoutEntity() el_mdl:SetLookAt(Vector(0, math.sin(CurTime()*2), 62)) return end   local function SetModel(mdl)  el_mdlname:SetValue(mdl) el_mdl:GetEntity():SetModel(mdl) el_mdlname.OnTextChanged()  local iSeq = el_mdl:GetEntity():LookupSequence("walk_all")  if iSeq <= 0 then iSeq = el_mdl:GetEntity():LookupSequence("WalkUnarmed_all") end  if iSeq <= 0 then iSeq = el_mdl:GetEntity():LookupSequence("walk_all_moderate") end  if iSeq > 0 then el_mdl:GetEntity():ResetSequence(iSeq) end  end    el_mdl.DoClick = function()  local DDM = DermaMenu()  DDM:AddOption("Mossman", function() SetModel("models/mossman.mdl") end)  DDM:AddOption("Barney", function() SetModel("models/Barney.mdl") end)  DDM:AddOption("Breen", function() SetModel("models/breen.mdl") end)  DDM:AddOption("Eli", function() SetModel("models/Eli.mdl") end)  DDM:AddOption("GMan", function() SetModel("models/gman_high.mdl") end)  DDM:AddOption("Kleiner", function() SetModel("models/Kleiner.mdl") end)  DDM:AddOption("Father Grigory", function() SetModel("models/monk.mdl") end)  DDM:AddOption("Vortigaunt", function() SetModel("models/vortigaunt.mdl") end)  DDM:AddOption("Police", function() SetModel("models/Police.mdl") end)  DDM:AddOption("Zombie", function() SetModel("models/Zombie/Classic.mdl") end)  DDM:Open()  end   local El_List1 = VC.Add_El_List(175,35,410,120, 2) El_List1:SetParent(Pnl)   local MPnl = VC.Add_El_Panel(El_List1, {0.4,0.6}, 25, true)  local PlatformLable = vgui.Create("DLabel") PlatformLable:SetTextColor(VC.Color.Neutral) PlatformLable:SetFont("VC_Dev_Text") MPnl[1]:AddItem(PlatformLable)  local EditPlatform = vgui.Create("VC_Button", Pnl) EditPlatform:SetToolTip("Allows you to edit this NPC's spawn platforms.") EditPlatform:SetText("Manage") EditPlatform:SetSize(Pnl:GetWide()-20,20) MPnl[2]:AddItem(EditPlatform)  EditPlatform:SetColor(Color(100,155,255,255)) EditPlatform:SetTextIsWhite(true) EditPlatform.DoClick = function() Pnl:Close() StartEditPlatforms(ent) end   local El_List1 = VC.Add_El_List(175,72,410,120, 2) El_List1:SetParent(Pnl)  local MPnl = VC.Add_El_Panel(El_List1, {0.4,0.6}, 25, true)  local VehiclesLable = vgui.Create("DLabel") VehiclesLable:SetText("Vehicles: "..table.Count(VC.CD.LastTbl.Vehicles)) VehiclesLable:SetTextColor(VC.Color.Neutral) VehiclesLable:SetFont("VC_Dev_Text") MPnl[1]:AddItem(VehiclesLable)  local EditVehicles = vgui.Create("VC_Button", Pnl) EditVehicles:SetToolTip("Allows you to edit this NPC's vehicles.") EditVehicles:SetText("Manage") EditVehicles:SetSize(Pnl:GetWide()-20,20) MPnl[2]:AddItem(EditVehicles)  EditVehicles:SetColor(VC.Color.Neutral) EditVehicles:SetTextIsWhite(true) EditVehicles.DoClick = function() Pnl:Close() StartEditVehicles(ent) end   local Veh_ARB = vgui.Create("VC_ARB") Veh_ARB:SetTall(20) El_List1:AddItem(Veh_ARB) Veh_ARB.RemoveButton = 3  Veh_ARB.VC_BTbl = {  {name = "Add", tooltip = "Add a new vehicle.", clk = function()  local DDM = nil local cat = {} local cattest = {}  for k,v in pairs(list.Get("Vehicles")) do local tc = v.Category or "Unknown" if !cattest[tc] then cattest[tc] = {} end table.insert(cattest[tc], v) end  for k,v in SortedPairs(cattest) do  local tempn = {} for k2,v2 in pairs(v) do tempn[v2.Name or "Unknown"] = v2 end  for k2,v2 in SortedPairs(tempn) do  if !VC.CD.LastTbl.Vehicles[VC.CD.GetName(v2.Model, v2.Name, v2.DefaultSkin)] and v2.Class and (string.lower(v2.Class) == "prop_vehicle_jeep" or string.lower(v2.Class) == "prop_vehicle_jeep_old") then  if !DDM then DDM = DermaMenu() end if !cat[k] then cat[k] = DDM:AddSubMenu(k) end  cat[k]:AddOption(v2.Name or "Unknown", function() VC.CD.open_menu_addcar(ent, nil, v2) Pnl:Close() end)  end  end  end  if DDM then DDM:Open() end  end},  {name = "Change", tooltip = "Change the current vehicles.", clk = function()  local DDM = nil local cat = {} local cattest = {}  for k,v in pairs(VC.CD.LastTbl.Vehicles) do local tc = v.Category or "Unknown" if !cattest[tc] then cattest[tc] = {} end table.insert(cattest[tc], v) end  for k,v in SortedPairs(cattest) do  local tempn = {} for k2,v2 in pairs(v) do tempn[v2.Name or "Unknown"] = v2 end  for k2,v2 in SortedPairs(tempn) do  if !DDM then DDM = DermaMenu() end if !cat[k] then cat[k] = DDM:AddSubMenu(k) end  v2.KeyValues = {vehiclescript = v2.Handling} cat[v2.Category]:AddOption((v2.Name or "Unknown")..", skin "..((v2.DefaultSkin or 0)+1), function() VC.CD.open_menu_addcar(ent, nil, v2) Pnl:Close() end)  end  end  if DDM then DDM:Open() end  end},  {name = "Remove", tooltip = "Remove vehicle.", clk = function()  local DDM = nil local cat = {} local cattest = {}  for k,v in pairs(VC.CD.LastTbl.Vehicles) do local tc = v.Category or "Unknown" if !cattest[tc] then cattest[tc] = {} end table.insert(cattest[tc], v) end  for k,v in SortedPairs(cattest) do  local tempn = {} for k2,v2 in pairs(v) do tempn[v2.Name or "Unknown"] = v2 end  for k2,v2 in SortedPairs(tempn) do  if !DDM then DDM = DermaMenu() end if !cat[k] then cat[k] = DDM:AddSubMenu(k) end  cat[v2.Category]:AddOption((v2.Name or "Unknown")..", skin "..((v2.DefaultSkin or 0)+1), function() net.Start("VC_CD_DeleteVehicle") net.WriteEntity(ent) net.WriteString(VC.CD.GetName(v2.Model, v2.Name, v2.DefaultSkin)) net.SendToServer() end)  end  end  if DDM then DDM:Open() end  end}  }   local El_List1 = VC.Add_El_List(175,135,210,48) El_List1:SetParent(Pnl) El_List1:NoClipping(true) El_List1.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, -5, -5, Sx+10, Sy+10, VC.Color.Main) end   local el_colour = VC.Add_El_Checkbox("Allow to customise colour", "Allows the vehicles to be customised.") El_List1:AddItem(el_colour) el_colour.OnChange = function(idx, val) VC.CD.LastTbl.DD_Clr = !val end  local el_skin = VC.Add_El_Checkbox("Allow to customise skin (paintjob)", "Allows the vehicles to be customised.") El_List1:AddItem(el_skin) el_skin.OnChange = function(idx, val) VC.CD.LastTbl.DD_Skin = !val end  local el_bgroup = VC.Add_El_Checkbox("Allow to customise bodygroups", "Allows the vehicles to be customised.") El_List1:AddItem(el_bgroup) el_bgroup.OnChange = function(idx, val) VC.CD.LastTbl.DD_BGrp = !val end   local El_List1 = VC.Add_El_List(175,198,210,82) El_List1:SetParent(Pnl) El_List1:NoClipping(true) El_List1.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, -5, -5, Sx+10, Sy+10, VC.Color.Main) end    local ResE2L = {}  if !VC.CD.LastTbl.RankRestrict then VC.CD.LastTbl.RankRestrict = {} end  for k,v in pairs(xgui and xgui.data and xgui.data.groups or {[1] = "admin"}) do  ResE2L[v] = VC.Add_El_Checkbox(v, "This rank is allowed to use this car dealer.") El_List1:AddItem(ResE2L[v]) ResE2L[v].OnChange = function(idx, val) VC.CD.LastTbl.RankRestrict[v] = !val end  end   local ResElL = {} if RPExtraTeams then  if !VC.CD.LastTbl.JobRestrict then VC.CD.LastTbl.JobRestrict = {} end  local El_List1 = VC.Add_El_List(400,135,185,145) El_List1:SetParent(Pnl) El_List1:NoClipping(true) El_List1.Paint = function(obj, Sx, Sy) draw.RoundedBox(0, -5, -5, Sx+10, Sy+10, VC.Color.Main) end  for k,v in pairs(RPExtraTeams) do local nm = v.name or "Unknown" ResElL[nm] = VC.Add_El_Checkbox(nm, "This job is allowed to use this car dealer.") El_List1:AddItem(ResElL[nm]) ResElL[nm].OnChange = function(idx, val) VC.CD.LastTbl.JobRestrict[nm] = !val end end  end   local function RefreshInfo()  local tmdl = VC.CD.LastTbl.Model el_mdlname:SetValue(tmdl) SetModel(tmdl) el_mdlname.OnTextChanged()  el_name:SetValue(VC.CD.LastTbl.Name)    el_colour:SetValue(VC.CD.LastTbl.DD_Clr and 0 or 1)  el_skin:SetValue(VC.CD.LastTbl.DD_Skin and 0 or 1)  el_bgroup:SetValue(VC.CD.LastTbl.DD_BGrp and 0 or 1)   if !VC.CD.LastTbl.RankRestrict then VC.CD.LastTbl.RankRestrict = {} end  if xgui and xgui.data and xgui.data.groups then  for k,v in pairs(xgui and xgui.data and xgui.data.groups or {[1] = "admin"}) do if ResE2L[v] then ResE2L[v]:SetValue(!VC.CD.LastTbl.RankRestrict[v]) end end  end   if RPExtraTeams then  if !VC.CD.LastTbl.JobRestrict then VC.CD.LastTbl.JobRestrict = {} end  for k,v in pairs(RPExtraTeams) do local nm = v.name or "Unknown" if ResElL[nm] then ResElL[nm]:SetValue(!VC.CD.LastTbl.JobRestrict[nm]) end end  end   PlatformLable:SetText("Spawn platforms: "..#VC.CD.LastTbl.Platforms)  end   RefreshInfo()   Pnl.Think = function()  if VC.CD.RefreshVehicles then VehiclesLable:SetText("Vehicles: "..table.Count(VC.CD.LastTbl.Vehicles)) VC.CD.RefreshVehicles = nil end  if VC.CD.Import_NPC_Tbl then local temptbl = table.Copy(VC.CD.Import_NPC_Tbl[2]) local ttype = VC.CD.Import_NPC_Tbl[3] if !VC.CD.LastTbl then VC.CD.LastTbl = {} end if !ttype then ttype = 0 end if ttype == 0 or ttype == 1 then VC.CD.LastTbl.Platforms = temptbl.Platforms end if ttype == 0 or ttype == 2 then VC.CD.LastTbl.Vehicles = temptbl.Vehicles end RefreshInfo() VC.CD.RefreshVehicles = true VC.CD.Import_NPC_Tbl = nil end  end  Pnl:MakePopup() end  local KeyDownIn = nil local KeyDownDel = nil hook.Add("HUDPaint", "VC_CD_HUDPaint", function()  local FTm = FrameTime()*100 if FTm < 1 then FTm = 1 end   for k,v in pairs(ents.FindByClass("vc_npc_cardealer")) do                               if !v.VC_PVsb then v.VC_Color = VC.Color.Neutral v.VC_PVsb = util.GetPixelVisibleHandle() end  local BInd = v:LookupBone("ValveBiped.Bip01_Head1")  local pos = Vector(0,0,0) if BInd then local BonePos , BoneAng = v:GetBonePosition(v:LookupBone("ValveBiped.Bip01_Head1")) pos = BonePos+Vector(0,0,8) else pos=v:GetPos()+Vector(0,0,65) end  local Vis = util.PixelVisible(pos+Vector(0,0,5), 1, v.VC_PVsb) local Dist = nil  if Vis > 0 then Dist = EyePos():Distance(pos) end  local Lrp = "CD_"..k VC.DrawFT["Lerp"](Vis > 0 and Dist < (VC.ServerSettings.CD_Text_Dist or 500), Lrp, FTm, 0.05, 0.05)    if VC.Anim_Lerp[Lrp] and v.VC_LastPos_X and v.VC_LastPos_Y then  local VisM = VC.Anim_Lerp[Lrp]  local text = v:GetNWString("VC_Name", VC.CD.Default.Name) surface.SetFont("VC_Name") local tz = surface.GetTextSize(text)  local Sx = math.Round(v.VC_LastPos_X+(VisM-1)*50) local Sy = math.Round(v.VC_LastPos_Y-25) local PSx, PSy = tz, 50  local clr = table.Copy(VC.Color.Main) clr.a=clr.a*VisM draw.RoundedBox(0, math.Round(Sx-PSx/2)+1, Sy, PSx, PSy, clr)  surface.SetMaterial(VC.Material.Fade) surface.DrawTexturedRectRotated(math.Round(Sx+VC.FadeW/2+PSx/2+1), Sy+PSy/2, VC.FadeW, PSy, 0) surface.DrawTexturedRectRotated(math.Round(Sx-VC.FadeW/2-PSx/2+1), Sy+PSy/2, VC.FadeW, PSy, 180)  local tclr = table.Copy(VC.Color.White) tclr.a=tclr.a*VisM draw.SimpleText(text, "VC_Name", Sx, Sy+25, tclr, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  end  local pos = (v:GetPos()+Vector(0,0,75)):ToScreen() v.VC_LastPos_X = math.Clamp(Lerp(0.2, v.VC_LastPos_X or pos.x, pos.x), -200, ScrW()+200) v.VC_LastPos_Y = math.Clamp(Lerp(0.2, v.VC_LastPos_Y or pos.y, pos.y), -200, ScrH()+200)  end   if VC.CD.EditPlatorms then  local NPC = VC.CD.EditPlatorms[1]  local PInsert, PEnd, PDel = input.IsKeyDown(KEY_INSERT) or input.IsKeyDown(KEY_LALT) and input.IsKeyDown(KEY_RIGHT), input.IsKeyDown(KEY_END) or input.IsKeyDown(KEY_LALT) and input.IsKeyDown(KEY_DOWN), input.IsKeyDown(KEY_DELETE) or input.IsKeyDown(KEY_LALT) and input.IsKeyDown(KEY_LEFT)  if IsValid(NPC) and !PEnd then  if PInsert and !KeyDownIn then KeyDownIn = true elseif KeyDownIn and !PInsert then SpawnPlatform(NPC) KeyDownIn = nil end  if PDel and !KeyDownDel then KeyDownDel = true elseif KeyDownDel and !PDel then DeletePlatform(NPC) KeyDownDel = nil end  local LineP = ScrH()*0.15 local NPCPos = (NPC:GetPos()+Vector(0,0,50)):ToScreen()  draw.RoundedBox(0, 0, LineP, ScrW(), 50, Color(100, 155, 200, 155))  for i=1,6 do surface.DrawLine(NPCPos.x,NPCPos.y, ScrW()/2-3+i,LineP+50) end  draw.SimpleText('[INSERT] or [LALT] + [RIGHT ARROW]   - Spawn new platform', nil, 10, LineP+10, VC.Color.Good, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  draw.SimpleText('[END] or [LALT] + [DOWN ARROW]   - Done editing', nil, 10, LineP+25, VC.Color.Good, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  draw.SimpleText('[DELETE] or [LALT] + [LEFT ARROW]   - Delete platform', nil, 10, LineP+40, VC.Color.Good, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  for i=1,6 do surface.DrawLine(NPCPos.x,NPCPos.y, ScrW()/2-3+i,LineP+50) end  draw.SimpleText('VCMod: Editing spawn platforms for car dealer: "'..NPC:GetNWString("VC_Name")..'"', "VC_Name", ScrW()/2, LineP+25, VC.Color.Good, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  else  FinishEditPlatforms()  end  end   if VC.CD.EditVehicles then  local NPC = VC.CD.EditVehicles[1]  local PInsert, PEnd, PDel = input.IsKeyDown(KEY_INSERT) or input.IsKeyDown(KEY_LALT) and input.IsKeyDown(KEY_RIGHT), input.IsKeyDown(KEY_END) or input.IsKeyDown(KEY_LALT) and input.IsKeyDown(KEY_DOWN), input.IsKeyDown(KEY_DELETE) or input.IsKeyDown(KEY_LALT) and input.IsKeyDown(KEY_LEFT)  if IsValid(NPC) and !PEnd then  if PInsert and !KeyDownIn then KeyDownIn = true elseif KeyDownIn and !PInsert then InsertVehicle(NPC) KeyDownIn = nil end  if PDel and !KeyDownDel then KeyDownDel = true elseif KeyDownDel and !PDel then DeleteVehicle(NPC) KeyDownDel = nil end  local LineP = ScrH()*0.15 local NPCPos = (NPC:GetPos()+Vector(0,0,50)):ToScreen()  draw.RoundedBox(0, 0, LineP, ScrW(), 50, Color(255, 155, 0, 155))  for i=1,6 do surface.DrawLine(NPCPos.x,NPCPos.y, ScrW()/2-3+i,LineP+50) end  draw.SimpleText('[INSERT] or [LALT] + [RIGHT ARROW]   - Insert vehicle', nil, 10, LineP+10, VC.Color.Good, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  draw.SimpleText('[END] or [LALT] + [DOWN ARROW]   - Done editing', nil, 10, LineP+25, VC.Color.Good, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  draw.SimpleText('[DELETE] or [LALT] + [LEFT ARROW]   - Remove vehicle', nil, 10, LineP+40, VC.Color.Good, TEXT_ALIGN_LEFT, TEXT_ALIGN_CENTER)  for i=1,6 do surface.DrawLine(NPCPos.x,NPCPos.y, ScrW()/2-3+i,LineP+50) end  draw.SimpleText('VCMod: Editing vehicle list for car dealer: "'..NPC:GetNWString("VC_Name")..'"', "VC_Name", ScrW()/2, LineP+25, VC.Color.Good, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  else  FinishEditVehicles()  end  end   local FTm = FrameTime()*100 if FTm < 1 then FTm = 1 end   if VC.CD.SpawnedTestDriveData and !IsValid(VC.CD.SpawnedTestDriveData.Entity) then VC.CD.EndTestDrive() end  if VC.CD.SpawnedVehicleData and (!IsValid(VC.CD.SpawnedVehicleData.Entity) or CurTime() >= VC.CD.SpawnedVehicleData.EndTime or IsValid(LocalPlayer():GetVehicle())) then VC.CD.SpawnedVehicleData = nil end   local testdrivedistgood = VC.CD.SpawnedTestDriveData and VC.CD.SpawnedTestDriveData.Entity and VC.CD.SpawnedTestDriveData.Entity:GetPos():Distance(LocalPlayer():GetPos()) < 2000  if VC.CD.SpawnedTestDriveData and (!VC.CD.TestDriveFade or VC.CD.TestDriveFade < 1) and testdrivedistgood then  VC.CD.TestDriveFade = (VC.CD.TestDriveFade or 0)+0.05*FTm if VC.CD.TestDriveFade > 1 then VC.CD.TestDriveFade = 1 end  elseif (!VC.CD.SpawnedTestDriveData or !testdrivedistgood) and VC.CD.TestDriveFade then  VC.CD.TestDriveFade = VC.CD.TestDriveFade-0.03*FTm if VC.CD.TestDriveFade <= 0 then VC.CD.TestDriveFade = nil end  end   local drivedistgood = VC.CD.SpawnedVehicleData and VC.CD.SpawnedVehicleData.Entity and VC.CD.SpawnedVehicleData.Entity:GetPos():Distance(LocalPlayer():GetPos()) < 2000  if VC.CD.SpawnedVehicleData and (!VC.CD.SpawnedDriveFade or VC.CD.SpawnedDriveFade < 1) and drivedistgood then  VC.CD.SpawnedDriveFade = (VC.CD.SpawnedDriveFade or 0)+0.03*FTm if VC.CD.SpawnedDriveFade > 1 then VC.CD.SpawnedDriveFade = 1 end  elseif (!VC.CD.SpawnedVehicleData or !drivedistgood) and VC.CD.SpawnedDriveFade then  VC.CD.SpawnedDriveFade = VC.CD.SpawnedDriveFade-0.02*FTm if VC.CD.SpawnedDriveFade <= 0 then VC.CD.SpawnedDriveFade = nil end  end   if VC.CD.TestDriveFade then  local Sx = ScrW()/2-(VC.CD.TestDriveFade-1)*50 local Sy = 90 local PSx, PSy = 500, 50  local clr = table.Copy(VC.Color.Main) clr.a=clr.a*VC.CD.TestDriveFade draw.RoundedBox(0, Sx-PSx/2, Sy, PSx, PSy, clr)  surface.SetMaterial(VC.Material.Fade) surface.DrawTexturedRectRotated(Sx+VC.FadeW/2+PSx/2, Sy+PSy/2, VC.FadeW, PSy, 0) surface.DrawTexturedRectRotated(Sx+-VC.FadeW/2-PSx/2, Sy+PSy/2, VC.FadeW, PSy, 180)   local timeleft = (VC.CD.SpawnedTestDriveData and VC.CD.SpawnedTestDriveData.EndTime or CurTime())-CurTime() if timeleft < 0 then timeleft = 0 end local min, sec = math.floor(timeleft/60), math.floor(timeleft)%60  local tclr = table.Copy(VC.Color.Blue) tclr.a=tclr.a*VC.CD.TestDriveFade draw.SimpleText(VC.Lng('TestDriveTimeLeft'), "VC_Name", Sx+70, Sy+25, tclr, TEXT_ALIGN_RIGHT, TEXT_ALIGN_CENTER)  local tclr = table.Copy(min == 0 and sec < 10 and VC.Color.Bad or VC.Color.Neutral) tclr.a=tclr.a*VC.CD.TestDriveFade draw.SimpleText((min < 10 and "0" or "")..tostring(min)..":"..(sec < 10 and "0" or "")..tostring(sec), "VC_Name", Sx+110, Sy+25, tclr, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  end  if VC.CD.SpawnedDriveFade then  if VC.CD.SpawnedVehicleData_LastPos_X and VC.CD.SpawnedVehicleData_LastPos_Y then  local text = VC.Lng('SpawnedVehicle') surface.SetFont("VC_Name") local tz = surface.GetTextSize(text)  local Sx = math.Round(VC.CD.SpawnedVehicleData_LastPos_X+(VC.CD.SpawnedDriveFade-1)*50) local Sy = math.Round(VC.CD.SpawnedVehicleData_LastPos_Y-25) local PSx, PSy = tz, 50  local clr = table.Copy(VC.Color.Main) clr.a=clr.a*VC.CD.SpawnedDriveFade draw.RoundedBox(0, math.Round(Sx-PSx/2), Sy, PSx, PSy, clr)  surface.SetMaterial(VC.Material.Fade) surface.DrawTexturedRectRotated(math.Round(Sx+VC.FadeW/2+PSx/2), Sy+PSy/2, VC.FadeW, PSy, 0) surface.DrawTexturedRectRotated(math.Round(Sx+-VC.FadeW/2-PSx/2), Sy+PSy/2, VC.FadeW, PSy, 180)  local tclr = table.Copy(VC.Color.Good) tclr.a=tclr.a*VC.CD.SpawnedDriveFade draw.SimpleText(text, "VC_Name", Sx, Sy+25, tclr, TEXT_ALIGN_CENTER, TEXT_ALIGN_CENTER)  end  if VC.CD.SpawnedVehicleData and VC.CD.SpawnedVehicleData.Entity then local pos = (VC.CD.SpawnedVehicleData.Entity:GetPos()+Vector(0,0,50)):ToScreen() VC.CD.SpawnedVehicleData_LastPos_X = math.Clamp(Lerp(0.1, VC.CD.SpawnedVehicleData_LastPos_X or pos.x, pos.x), -200, ScrW()+200) VC.CD.SpawnedVehicleData_LastPos_Y = math.Clamp(Lerp(0.1, VC.CD.SpawnedVehicleData_LastPos_Y or pos.y, pos.y), -200, ScrH()+200) end  end end)  hook.Add("PostDrawTranslucentRenderables", "VC_CD_PostDrawTranslucentRenderables", function()  if VC.CD.EditVehicles and IsValid(VC.CD.EditVehicles[1]) then  render.SetMaterial(VC.Material.Beam)  for k,v in pairs(VC.GetVehicleList()) do  if IsValid(v) then  local Has = nil for k2,v2 in pairs(VC.CD.LastTbl.Vehicles) do if v.VC_Model and v.VC_Model == v2.Model and v:GetNWString("VC_Name") == (v2.Name or "Unknown") and v:GetSkin() == (v2.DefaultSkin or 0) then Has = true break end end  if Has then render.DrawBeam(v:GetPos()+v:GetUp()*30, VC.CD.EditVehicles[1]:GetPos()+VC.CD.EditVehicles[1]:GetUp()*50, 5, 1, 1, Color(200, 100, 0, 255)) end  end  end  end end) local rs7 = "vc.check_msg_work_ALS_k4" 