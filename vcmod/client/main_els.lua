
-----------------------------------------------------
local Controls = {  {cmd = "vc_els_manual", menu = "controls_els", NoCheckBox = true, carg1 = "1", carg2 = "2", info = "ManualSiren", default = {key = "KEY_T", hold = "1"}},  {cmd = "vc_els_sound", menu = "controls_els", info = "ELSSirenSwitch", default = {key = "MOUSE_RIGHT", hold = "0", mouse = "1"}},  {cmd = "vc_els_sound_onoff", menu = "controls_els", info = "ELSSirenToggle", default = {key = "MOUSE_RIGHT", hold = "1", mouse = "1"}},  {cmd = "vc_els_lights", menu = "controls_els", info = "ELSLightsSwitch", default = {key = "MOUSE_LEFT", hold = "0", mouse = "1"}},  {cmd = "vc_els_lights_onoff", menu = "controls_els", info = "ELSLightsToggle", default = {key = "MOUSE_LEFT", hold = "1", mouse = "1"}}, }  for k,v in pairs(Controls) do  local added = false for k2,v2 in pairs(VC.Controls_Main) do if v.cmd == v2.cmd then added = true break end end  if !added then table.insert(VC.Controls_Main, v) end end   local settings = { HUD_ELS = true, HUD_ELS_Siren = true,  ELS_Dyn_Enabled = true, ELS_Dyn_Mult = 1.5, ELS_Dyn_Interior = true, ELS_Dyn_Interior_M = 1, ELS_ExtraGlow = true, ELS_ExtraGlow_M = 1, }  table.Merge(VC.Settings_Defaults, settings)   function VC.Chatter_Stop() if VC.ELS_Chatter_Sound then VC.ELS_Chatter_Sound[1]:Stop() end VC.ELS_Chatter_Sound = nil end function VC.Chatter_Play(ent, url, name, vol)  VC.Chatter_Stop()  local ent = LocalPlayer():GetVehicle()  if IsValid(ent) then  local MEnt = ent.VC_ExtraSeat and ent:GetParent() or ent  sound.PlayURL(url, "", function(sta)  if IsValid(sta) then  sta:SetVolume(vol or 1) sta:Play() VC.ELS_Chatter_Sound = {sta, MEnt}  VCMsg(VC.Lng("ELS_TuningIntoPoliceC")..": "..name..".")  else  VCMsg(VC.Lng("ELS_NoPoliceRCFound"))  end  end)  end end  local function ELS_Convert_Section_Data(mdl)  if VC.Global_Data[mdl].Siren and VC.Global_Data[mdl].Siren.Sections and VC.Global_Data[mdl].LightTable and VC.Global_Data[mdl].LightTable.Siren then  for k,v in pairs(VC.Global_Data[mdl].Siren.Sections) do  for k2,v2 in pairs(v) do  if VC.Global_Data[mdl].LightTable.Siren[k2] then  VC.Global_Data[mdl].Siren.Sections[k][k2] = VC.Global_Data[mdl].LightTable.Siren[k2].Pos.x  else  VC.Global_Data[mdl].Siren.Sections[k][k2] = nil  end  end  end   local FixedT = nil if VC.Global_Data[mdl].Siren.InterSec then FixedT = {}  for k,v in pairs(VC.Global_Data[mdl].Siren.InterSec) do  if v.Section and VC.Global_Data[mdl].Siren.Sections[v.Section] then  FixedT[k] = v FixedT[k].Lights = {}  local Am = v.Am or 10 local Min, Max = 0,0 for k2,v2 in pairs(VC.Global_Data[mdl].Siren.Sections[v.Section]) do if v2 < Min then Min = v2 end if v2 > Max then Max = v2 end end local MMax = (math.abs(Max)+math.abs(Min))/Am  for k2,v2 in pairs(VC.Global_Data[mdl].Siren.Sections[v.Section]) do  for i=1,Am do if (Max-v2) >= MMax*(i-1) and (Max-v2) <= MMax*i then FixedT[k].Lights[k2] = {i} break end end  end  end  end  end   for k,v in pairs(VC.Global_Data[mdl].Siren.Sections) do  local LTbl, Min, Max = {}, nil, nil  local TTbl = {} for k2,v2 in pairs(v) do if !TTbl[v2] then TTbl[v2] = {} end TTbl[v2][k2] = v2 end  local NTbl = {} local int = 1 for k2,v2 in SortedPairs(TTbl) do NTbl[int] = v2 int = int+1 end  VC.Global_Data[mdl].Siren.Sections[k] = NTbl  end  end end  function VC.ELS_Attachment(ent)  if ent.VC_Models_Atc then for k2,v2 in pairs(ent.VC_Models_Atc) do v2:Remove() end end ent.VC_Models_Atc = nil  if VC.Global_Data[ent.VC_Model].ELS_Attach then  ent.VC_Models_Atc = {}  for k,v in pairs(VC.Global_Data[ent.VC_Model].ELS_Attach) do  local Atc = ClientsideModel(v.Model, RENDERGROUP_TRANSLUCENT)  Atc:SetAngles(VC.AngleCombCalc(ent:GetAngles(), v.Ang))  Atc:SetPos(ent:LocalToWorld(v.Pos))  Atc:SetParent(ent)  Atc.VC_Atc = ent   Atc.VC_Model = v.Model   if !VC.Models_Atc then VC.Models_Atc = {} end    table.insert(VC.Models_Atc, Atc)  table.insert(ent.VC_Models_Atc, Atc)  end  end end  function VC.ELS_Attachments(mdl) for _, ent in pairs(VC.GetVehicleList()) do if IsValid(ent) and ent.VC_Model and ent.VC_Model == mdl then VC.ELS_Attachment(ent) end end end  net.Receive("VC_SendToClient_Srn_Lht_Sel", function(len) local ent, code, nocodes = net.ReadEntity(), net.ReadInt(32), net.ReadInt(32) ent.VC_ELS_Lht_Sel = code ent.VC_ELS_Lht_Sel_NCodes = tobool(nocodes) end) net.Receive("VC_SendToClient_ClearSiren", function(len) net.ReadEntity().VC_SirenTable = nil end)  net.Receive("VC_Light_3DSpinPPData_Clear", function(len) local ent = net.ReadEntity() end) net.Receive("VC_ELS_Chatter", function(dt) local Tbl = net.ReadTable() VC.Chatter_Play(Tbl[4], Tbl[1], Tbl[2], Tbl[3]) end)  net.Receive("VC_SendToClient_Siren_Seq", function(len) local mdl, k, tbl = net.ReadString(), net.ReadInt(32), net.ReadTable() if !VC.Global_Data[mdl].Siren then VC.Global_Data[mdl].Siren = {} end if !VC.Global_Data[mdl].Siren.Sequences then VC.Global_Data[mdl].Siren.Sequences = {} end VC.Global_Data[mdl].Siren.Sequences[k] = tbl end) net.Receive("VC_SendToClient_Siren_Rest", function(len) local mdl, tbl = net.ReadString(), net.ReadTable() if !VC.Global_Data[mdl].Siren then VC.Global_Data[mdl].Siren = {} end tbl.Sequences = VC.Global_Data[mdl].Sequences VC.Global_Data[mdl].Siren = tbl ELS_Convert_Section_Data(mdl) end)  net.Receive("VC_SendToClient_ELS_Attach", function(len) local mdl, tbl = net.ReadString(), net.ReadTable() VC.Global_Data[mdl].ELS_Attach = table.Count(tbl) > 0 and tbl or nil VC.ELS_Attachments(mdl) end) local rs7 = "vc.check_msg_work_ALS_k4" 