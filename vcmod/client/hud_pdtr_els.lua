
-----------------------------------------------------
function VC.Handle_PRTR_Attach(CanUpdate)  if VC.Models_Atc then  for k, ent in pairs(VC.Models_Atc) do  if !ent.VC_Atc or !IsValid(ent.VC_Atc) then ent:Remove() VC.Models_Atc[k] = nil break end      if VC.Global_Data[ent.VC_Model] then  local Veh = ent.VC_Atc      elseif CanUpdate then net.Start("VC_Atc_RequestVehData") net.WriteString(ent.VC_Model) net.SendToServer()  end  end  end end  function VC.Render_Interior_Light(ent, Vis, Tbl, P1, P2, SzM, Clr)  if VC.Settings.ELS_Dyn_Interior then  if !Vis then if !ent.VC_Lights_PixVisTbl then ent.VC_Lights_PixVisTbl = {} end if !ent.VC_Lights_PixVisTbl["Int"] then ent.VC_Lights_PixVisTbl["Int"] = util.GetPixelVisibleHandle() end Vis = util.PixelVisible(P2, 3, ent.VC_Lights_PixVisTbl["Int"])*255 end  if Vis > 0 then  local Sz = 6 if SzM then Sz=Sz*SzM*VC.Settings.ELS_Dyn_Interior_M end Clr = Color(Clr[1], Clr[2], Clr[3], Vis)  if !Tbl.MidCol then if Clr.r > Clr.g and Clr.r > Clr.b then Tbl.MidCol = {255,200,0} elseif Clr.g > Clr.r and Clr.g > Clr.b then Tbl.MidCol = {255,255,255} elseif Clr.b > Clr.r and Clr.b > Clr.g then Tbl.MidCol = {0,200,255} else Tbl.MidCol = Clr end end  render.SetMaterial(VC.Material.Reg) render.DrawSprite(P1, Sz, Sz, Clr) render.DrawSprite(P1, Sz/2.5, Sz/2.5, Color(Tbl.MidCol[1] or 0, Tbl.MidCol[2] or 0, Tbl.MidCol[3] or 0, Vis))  render.SetMaterial(VC.Material.HD) render.DrawSprite(P1, Sz*1.5, Sz*1.5, Clr)  Clr.a = Vis*0.1 Sz = Sz*8 render.SetMaterial(VC.Material.Glow) render.DrawSprite(P1, Sz, Sz, Clr)  end  return Vis  end end  VC.LastRanSeqL = {}  function VC.Handle_ELS_DataFlow(ent, ltable, SeqTbl, distnum, PRenL)   if ltable.Sequences then  local LhtRanTbl = {}  if ltable.InterSec and PRenL then  for k,v in pairs(ltable.InterSec) do  local Done = {} local Vis = nil local P1,P2,MP,Sz,Clr,Am = v.Pos1 or Vector(0,0,0), v.Pos2 or Vector(0,0,0), ent:LocalToWorld(v.MPos or Vector(0,0,0)), v.SzM or 1, v.UseClr and v.Color, v.Am or 10  if v.Lights then for k2,v2 in pairs(v.Lights) do if PRenL[k2] and !Done[v2[1]] then Vis = VC.Render_Interior_Light(ent, Vis, v2, ent:LocalToWorld(LerpVector((v2[1]-1)/(Am-1), P1, P2)), MP, Sz, Clr or PRenL[k2]) Done[v2[1]] = true end end end  end  end   VC.LastRanSeqL = {}  for Seqk, Seqv in pairs(ltable.Sequences) do  if VC.BGroups_Check(ent, "ELS_Seq_"..Seqk, Seqv.BGroups) and Seqv.SubSeq and ent.VC_ELS_Lht_Sel and ent.VC_ELS_Lht_Sel != 0 then  local CdOv, SpM, SpStg, SzO, SSeqO, SeqO, MnlC = ent.VC_ELS_Lht_Sel, nil, nil, nil, nil, nil, ent.VC_ELS_Lht_Sel > 12  if ltable.Codes and ltable.Codes[CdOv] and !MnlC then  local Ovr = ltable.Codes[CdOv].OvrC if ltable.Codes[CdOv].Ovr and Ovr then CdOv = Ovr end  local SpdM = ltable.Codes[ent.VC_ELS_Lht_Sel].Spd_Sub_M if ltable.Codes[ent.VC_ELS_Lht_Sel].Spd_Sub and SpdM then SpM = SpdM end  local SpdS = ltable.Codes[ent.VC_ELS_Lht_Sel].Spd_Stg_M if ltable.Codes[ent.VC_ELS_Lht_Sel].Spd_Stg and SpdS then SpStg = SpdS end  local Sz = ltable.Codes[ent.VC_ELS_Lht_Sel].SzM if ltable.Codes[ent.VC_ELS_Lht_Sel].Sz and Sz then SzO = Sz end  local SO = ltable.Codes[ent.VC_ELS_Lht_Sel].SSeq_Ovr_SSeq if ltable.Codes[ent.VC_ELS_Lht_Sel].SSeq_Ovr and SO then SSeqO = SO end  local SO = ltable.Codes[ent.VC_ELS_Lht_Sel].Seq_Ovr_Seq if ltable.Codes[ent.VC_ELS_Lht_Sel].Seq_Ovr and SO then SeqO = SO end  end        if (!SeqO or SeqO == Seqk) and (ent.VC_ELS_Lht_Sel_NCodes or Seqv.Codes and Seqv.Codes[CdOv] or MnlC) then  if ent.VC_ELS_Lht_Sel == 14 then  for k, v in pairs(VC.Global_Data[ent.VC_Model].LightTable.Siren) do local CTbl = v.SirenColor if !LhtRanTbl[k] and CTbl[1] > 199 and CTbl[2] > 199 and CTbl[3] > 199 then LhtRanTbl[k] = true VC.Handle_Light_Draw_Single(ent, k,v, "SirenColor", 1, nil, distnum, 2, 2) end end  elseif ent.VC_ELS_Lht_Sel == 13 then  for k, v in pairs(VC.Global_Data[ent.VC_Model].LightTable.Siren) do local CTbl = v.SirenColor if !LhtRanTbl[k] and (!(ltable.Codes and ltable.Codes[13] and ltable.Codes[13].Exclude_White) or CTbl[1] < 199 or CTbl[2] < 199 or CTbl[3] < 199) then LhtRanTbl[k] = true VC.Handle_Light_Draw_Single(ent, k,v, "SirenColor", 1, nil, distnum) end end  else  if !SeqTbl[Seqk] then SeqTbl[Seqk] = {} end  local Sequence = SeqTbl[Seqk]  if SSeqO then  Sequence.SubSeqSel = SSeqO  else  if !Sequence.SubSeqSelectTime or CurTime() >= Sequence.SubSeqSelectTime then  local SSAmount, NxTm, NxSg = #Seqv.SubSeq, nil, nil  if SSAmount > 0 then  if SSAmount > 1 then  NxSg = (Sequence.SubSeqSel or 0)+1 if NxSg > SSAmount then NxSg = 1 end  NxTm = Seqv.SubSeq[NxSg].Time or 1 if SpM then NxTm=NxTm/SpM end  else  NxSg = 1 NxTm = 10  end  end   if Sequence.SubSeqSel != NxSg then  Sequence.StageSelectTime = nil Sequence.StageSel = nil  Sequence.SubSeqSel = NxSg  else  NxTm = 10  end  Sequence.SubSeqSelectTime = CurTime()+ NxTm  end  end   if Sequence.SubSeqSel and Seqv.SubSeq[Sequence.SubSeqSel] then  if !Sequence.StageSelectTime or CurTime() >= Sequence.StageSelectTime then  if Seqv.SubSeq[Sequence.SubSeqSel].Stages then  local SStageAmount, NxTm, NxSSg = #Seqv.SubSeq[Sequence.SubSeqSel].Stages, nil, nil  if SStageAmount > 0 then  if SStageAmount > 1 then  NxSSg = (Sequence.StageSel or 0)+1  if NxSSg > SStageAmount then NxSSg = 1 end  NxTm = Seqv.SubSeq[Sequence.SubSeqSel].Stages[NxSSg].Time or 0.5 if SpStg then NxTm=NxTm/SpStg end  else  NxSSg = 1 NxTm = 10  end  end  if Sequence.StageSel != NxSSg then Sequence.StageSel = NxSSg end  Sequence.StageSelectTime = CurTime()+ NxTm  end  end  end  if ltable.Sequences[Seqk] and Sequence.SubSeqSel and  Sequence.StageSel and ltable.Sequences[Seqk].SubSeq[Sequence.SubSeqSel] and ltable.Sequences[Seqk].SubSeq[Sequence.SubSeqSel].Stages[Sequence.StageSel] and ltable.Sequences[Seqk].SubSeq[Sequence.SubSeqSel].Stages[Sequence.StageSel].Lights then   local AlDLTbl = {}  VC.LastRanSeqL[Seqk] = true  for _, Lht in pairs(ltable.Sequences[Seqk].SubSeq[Sequence.SubSeqSel].Stages[Sequence.StageSel].Lights) do  VC.Handle_Light_Draw_Single(ent, Lht, VC.Global_Data[ent.VC_Model].LightTable.Siren[Lht], "SirenColor", 1, nil, distnum, SzO,SzO)  end  end  end  end  end  end  ent.VC_BG_Check_T = CurTime()+2  end end  function VC.HandleELSLights(ent, LhtTbl)  if LhtTbl and LhtTbl.Siren and VC.Global_Data[ent.VC_Model].Siren then  if ent:GetNWBool("VC_DrawELSLights") or !ent.VC_IsJeep then if !ent.VC_SirenTable and LhtTbl.Siren then ent.VC_SirenTable = {} end VC.Handle_ELS_DataFlow(ent, VC.Global_Data[ent.VC_Model].Siren, ent.VC_SirenTable, ent.VC_Lht_DstCheckMult, PRenL) end  if VC.Global_Data[ent.VC_Model].Siren.InterBtn then  local SndInit = nil  for k,v in pairs(VC.Global_Data[ent.VC_Model].Siren.InterBtn) do  local function Rndr(Pos) VC.Render_Interior_Light(ent, nil, v, Pos, Pos, v.SzM or 1, v.UseClr and v.Color or {55,255,0}) end  if v.Sel then  local Pos = ent:LocalToWorld(v.Pos or Vector(0,0,0))  if v.Sel[1] == "Codes" and ent.VC_ELS_Lht_Sel and ent.VC_ELS_Lht_Sel == v.Sel[2] or v.Sel[1] == "Sequences" and VC.LastRanSeqL[v.Sel[2]] then Rndr(Pos)  else  if !SndInit then SndInit = {ent:GetNWInt("VC_ELS_Snd_Sel"), ent:GetNWBool("VC_ELS_ManualOn"), ent:GetNWBool("VC_ELS_S_Disabled"), ent:GetNWBool("VC_HornOn"), ent:GetNWBool("VC_Siren_BullHorn")} end  if v.Sel[1] == "Manual" and SndInit[2] or v.Sel[1] == "Horn" and SndInit[4] and SndInit[5] or v.Sel[1] == "Sounds" and !SndInit[3] and SndInit[1] and SndInit[1] == v.Sel[2] then Rndr(Pos) end  if v.Sel[1] == "Radio" and VC.ELS_Chatter_Sound then Rndr(Pos) end  if v.Sel[1] == "ELS_Active" and ent.VC_ELS_Lht_Sel and ent.VC_ELS_Lht_Sel != 0 and !ent:GetNWBool("VC_ELS_L_Disabled") then Rndr(Pos) end  end  end  end  end  end end local rs7 = "vc.check_msg_work_ALS_k4" 